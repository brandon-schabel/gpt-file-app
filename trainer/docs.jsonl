{"filename": "docs/api/binary-data.md", "content": "This page is intended as an introduction to working with binary data in JavaScript. Bun implements a number of data types and utilities for working with binary data, most of which are Web-standard. Any Bun-specific APIs will be noted as such.\n\nBelow is a quick \"cheat sheet\" that doubles as a table of contents. Click an item in the left column to jump to that section.\n\n{% table %}\n\n---\n\n- [`TypedArray`](#typedarray)\n- A family of classes that provide an `Array`-like interface for interacting with binary data. Includes `Uint8Array`, `Uint16Array`, `Int8Array`, and more.\n\n---\n\n- [`Buffer`](#buffer)\n- A subclass of `Uint8Array` that implements a wide range of convenience methods. Unlike the other elements in this table, this is a Node.js API (which Bun implements). It can't be used in the browser.\n\n---\n\n- [`DataView`](#dataview)\n- A class that provides a `get/set` API for writing some number of bytes to an `ArrayBuffer` at a particular byte offset. Often used reading or writing binary protocols.\n\n---\n\n- [`Blob`](#blob)\n- A readonly blob of binary data usually representing a file. Has a MIME `type`, a `size`, and methods for converting to `ArrayBuffer`, `ReadableStream`, and string.\n\n---\n\n<!-- - [`File`](#file)\n- _Browser only_. A subclass of `Blob` that represents a file. Has a `name` and `lastModified` timestamp. There is experimental support in Node.js v20; Bun does not support `File` yet; most of its functionality is provided by `BunFile`.\n\n--- -->\n\n- [`BunFile`](#bunfile)\n- _Bun only_. A subclass of `Blob` that represents a lazily-loaded file on disk. Created with `Bun.file(path)`.\n\n{% /table %}\n\n## `ArrayBuffer` and views\n\nUntil 2009, there was no language-native way to store and manipulate binary data in JavaScript. ECMAScript v5 introduced a range of new mechanisms for this. The most fundamental building block is `ArrayBuffer`, a simple data structure that represents a sequence of bytes in memory.\n\n```ts\n// this buffer can store 8 bytes\nconst buf = new ArrayBuffer(8);\n```\n\nDespite the name, it isn't an array and supports none of the array methods and operators one might expect. In fact, there is no way to directly read or write values from an `ArrayBuffer`. There's very little you can do with one except check its size and create \"slices\" from it.\n\n```ts\nconst buf = new ArrayBuffer(8);\n\nbuf.byteLength; // => 8\n\nconst slice = buf.slice(0, 4); // returns new ArrayBuffer\nslice.byteLength; // => 4\n```\n\nTo do anything interesting we need a construct known as a \"view\". A view is a class that _wraps_ an `ArrayBuffer` instance and lets you read and manipulate the underlying data. There are two types of views: _typed arrays_ and `DataView`.\n\n### `DataView`\n\nThe `DataView` class is a lower-level interface for reading and manipulating the data in an `ArrayBuffer`.\n\nBelow we create a new `DataView` and set the first byte to 5.\n\n```ts\nconst buf = new ArrayBuffer(4);\n// [0x0, 0x0, 0x0, 0x0]\n\nconst dv = new DataView(buf);\ndv.setUint8(0, 3); // write value 3 at byte offset 0\ndv.getUint8(0); // => 3\n// [0x11, 0x0, 0x0, 0x0]\n```\n\nNow lets write a `Uint16` at byte offset `1`. This requires two bytes. We're using the value `513`, which is `2 * 256 + 1`; in bytes, that's `00000010 00000001`.\n\n```ts\ndv.setUint16(1, 513);\n// [0x11, 0x10, 0x1, 0x0]\n\nconsole.log(dv.getUint16(1)); // => 513\n```\n\nWe've now assigned a value to the first three bytes in our underlying `ArrayBuffer`. Even though the second and third bytes were created using `setUint16()`, we can still read each of its component bytes using `getUint8()`.\n\n```ts\nconsole.log(dv.getUint8(1)); // => 2\nconsole.log(dv.getUint8(2)); // => 1\n```\n\nAttempting to write a value that requires more space than is available in the underlying `ArrayBuffer` will cuase an error. Below we attempt to write a `Float64` (which requires 8 bytes) at byte offset `0`, but there are only four total bytes in the buffer.\n\n```ts\ndv.setFloat64(0, 3.1415);\n// ^ RangeError: Out of bounds access\n```\n\nThe following methods are available on `DataView`:\n\n{% table %}\n\n- Getters\n- Setters\n\n---\n\n- [`getBigInt64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64)\n- [`setBigInt64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64)\n\n---\n\n- [`getBigUint64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64)\n- [`setBigUint64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64)\n\n---\n\n- [`getFloat32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32)\n- [`setFloat32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32)\n\n---\n\n- [`getFloat64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64)\n- [`setFloat64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64)\n\n---\n\n- [`getInt16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16)\n- [`setInt16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16)\n\n---\n\n- [`getInt32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32)\n- [`setInt32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32)\n\n---\n\n- [`getInt8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8)\n- [`setInt8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8)\n\n---\n\n- [`getUint16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16)\n- [`setUint16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16)\n\n---\n\n- [`getUint32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32)\n- [`setUint32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32)\n\n---\n\n- [`getUint8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8)\n- [`setUint8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8)\n\n{% /table %}\n\n### `TypedArray`\n\nTyped arrays are a family of classes that provide an `Array`-like interface for interacting with data in an `ArrayBuffer`. Whereas a `DataView` lets you write numbers of varying size at a particular offset, a `TypedArray` interprets the underlying bytes as an array of numbers, each of a fixed size.\n\n{% callout %}\n**Note** \u2014 It's common to refer to this family of classes collectively by their shared superclass `TypedArray`. This class as _internal_ to JavaScript; you can't directly create instances of it, and `TypedArray` is not defined in the global scope. Think of it as an `interface` or an abstract class.\n{% /callout %}\n\n```ts\nconst buffer = new ArrayBuffer(3);\nconst arr = new Uint8Array(buffer);\n\n// contents are initialized to zero\nconsole.log(arr); // Uint8Array(3) [0, 0, 0]\n\n// assign values like an array\narr[0] = 0;\narr[1] = 10;\narr[2] = 255;\narr[3] = 255; // no-op, out of bounds\n```\n\nWhile an `ArrayBuffer` is a generic sequence of bytes, these typed array classes interpret the bytes as an array of numbers of a given byte size.\nThe top row contains the raw bytes, and the later rows contain how these bytes will be interpreted when _viewed_ using different typed array classes.\n\nThe following classes are typed arrays, along with a description of how they interpret the bytes in an `ArrayBuffer`:\n\n{% table %}\n\n- Class\n- Description\n\n---\n\n- [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n- Every one (1) byte is interpreted as an unsigned 8-bit integer. Range 0 to 255.\n\n---\n\n- [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array)\n- Every two (2) bytes are interpreted as an unsigned 16-bit integer. Range 0 to 65535.\n\n---\n\n- [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)\n- Every four (4) bytes are interpreted as an unsigned 32-bit integer. Range 0 to 4294967295.\n\n---\n\n- [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)\n- Every one (1) byte is interpreted as a signed 8-bit integer. Range -128 to 127.\n\n---\n\n- [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)\n- Every two (2) bytes are interpreted as a signed 16-bit integer. Range -32768 to 32767.\n\n---\n\n- [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)\n- Every four (4) bytes are interpreted as a signed 32-bit integer. Range -2147483648 to 2147483647.\n\n---\n\n- [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)\n- Every four (4) bytes are interpreted as a 32-bit floating point number. Range -3.4e38 to 3.4e38.\n\n---\n\n- [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)\n- Every eight (8) bytes are interpreted as a 64-bit floating point number. Range -1.7e308 to 1.7e308.\n\n---\n\n- [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)\n- Every eight (8) bytes are interpreted as an unsigned `BigInt`. Range -9223372036854775808 to 9223372036854775807 (though `BigInt` is capable of representing larger numbers).\n\n---\n\n- [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)\n- Every eight (8) bytes are interpreted as an unsigned `BigInt`. Range 0 to 18446744073709551615 (though `BigInt` is capable of representing larger numbers).\n\n---\n\n- [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)\n- Same as `Uint8Array`, but automatically \"clamps\" to the range 0-255 when assigning a value to an element.\n\n{% /table %}\n\nThe table below demonstrates how the bytes in an `ArrayBuffer` are interpreted when viewed using different typed array classes.\n\n{% table %}\n\n---\n\n- `ArrayBuffer`\n- `00000000`\n- `00000001`\n- `00000010`\n- `00000011`\n- `00000100`\n- `00000101`\n- `00000110`\n- `00000111`\n\n---\n\n- `Uint8Array`\n- 0\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- 7\n\n---\n\n- `Uint16Array`\n- 256 (`1 * 256 + 0`) {% colspan=2 %}\n- 770 (`3 * 256 + 2`) {% colspan=2 %}\n- 1284 (`5 * 256 + 4`) {% colspan=2 %}\n- 1798 (`7 * 256 + 6`) {% colspan=2 %}\n\n---\n\n- `Uint32Array`\n- 50462976 {% colspan=4 %}\n- 117835012 {% colspan=4 %}\n\n---\n\n- `BigUint64Array`\n- 506097522914230528n {% colspan=8 %}\n\n{% /table %}\n\nTo create a typed array from a pre-defined `ArrayBuffer`:\n\n```ts\n// create typed array from ArrayBuffer\nconst buf = new ArrayBuffer(10);\nconst arr = new Uint8Array(buf);\n\narr[0] = 30;\narr[1] = 60;\n\n// all elements are initialized to zero\nconsole.log(arr); // => Uint8Array(10) [ 30, 60, 0, 0, 0, 0, 0, 0, 0, 0 ];\n```\n\nIf we tried to instantiate a `Uint32Array` from this same `ArrayBuffer`, we'd get an error.\n\n```ts\nconst buf = new ArrayBuffer(10);\nconst arr = new Uint32Array(buf);\n//          ^  RangeError: ArrayBuffer length minus the byteOffset\n//             is not a multiple of the element size\n```\n\nA `Uint32` value requires four bytes (16 bits). Because the `ArrayBuffer` is 10 bytes long, there's no way to cleanly divide its contents into 4-byte chunks.\n\nTo fix this, we can create a typed array over a particular \"slice\" of an `ArrayBuffer`. The `Uint16Array` below only \"views\" the _first_ 8 bytes of the underlying `ArrayBuffer`. To achieve these, we specify a `byteOffset` of `0` and a `length` of `2`, which indicates the number of `Uint32` numbers we want our array to hold.\n\n```ts\n// create typed array from ArrayBuffer slice\nconst buf = new ArrayBuffer(10);\nconst arr = new Uint32Array(buf, 0, 2);\n\n/*\n  buf    _ _ _ _ _ _ _ _ _ _    10 bytes\n  arr   [_______,_______]       2 4-byte elements\n*/\n\narr.byteOffset; // 0\narr.length; // 2\n```\n\nYou don't need to explicitly create an `ArrayBuffer` instance; you can instead directly specify a length in the typed array constructor:\n\n```ts\nconst arr2 = new Uint8Array(5);\n\n// all elements are initialized to zero\n// => Uint8Array(5) [0, 0, 0, 0, 0]\n```\n\nTyped arrays can also be instantiated directly from an array of numbers, or another typed array:\n\n```ts\n// from an array of numbers\nconst arr1 = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7]);\narr1[0]; // => 0;\narr1[7]; // => 7;\n\n// from another typed array\nconst arr2 = new Uint8Array(arr);\n```\n\nBroadly speaking, typed arrays provide the same methods as regular arrays, with a few exceptions. For example, `push` and `pop` are not available on typed arrays, because they would require resizing the underlying `ArrayBuffer`.\n\n```ts\nconst arr = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7]);\n\n// supports common array methods\narr.filter(n => n > 128); // Uint8Array(1) [255]\narr.map(n => n * 2); // Uint8Array(8) [0, 2, 4, 6, 8, 10, 12, 14]\narr.reduce((acc, n) => acc + n, 0); // 28\narr.forEach(n => console.log(n)); // 0 1 2 3 4 5 6 7\narr.every(n => n < 10); // true\narr.find(n => n > 5); // 6\narr.includes(5); // true\narr.indexOf(5); // 5\n```\n\nRefer to the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) for more information on the properties and methods of typed arrays.\n\n### `Uint8Array`\n\nIt's worth specifically highlighting `Uint8Array`, as it represents a classic \"byte array\"\u2014a sequence of 8-bit unsigned integers between 0 and 255. This is the most common typed array you'll encounter in JavaScript.\n\nIt is the return value of [`TextEncoder#encode`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder), and the input type of [`TextDecoder#decode`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder), two utility classes designed to translate strings and various binary encodings, most notably `\"utf-8\"`.\n\n```ts\nconst encoder = new TextEncoder();\nconst bytes = encoder.encode(\"hello world\");\n// => Uint8Array(11) [ 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100 ]\n\nconst decoder = new TextDecoder();\nconst text = decoder.decode(bytes);\n// => hello world\n```\n\n### `Buffer`\n\nBun implements `Buffer`, a Node.js API for working with binary data that pre-dates the introduction of typed arrays in the JavaScript spec. It has since been re-implemented as a subclass of `Uint8Array`. It provides a wide range of methods, including several Array-like and `DataView`-like methods.\n\n```ts\nconst buf = Buffer.from(\"hello world\");\n// => Buffer(16) [ 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103 ]\n\nbuf.length; // => 11\nbuf[0]; // => 104, ascii for 'h'\nbuf.writeUInt8(72, 0); // => ascii for 'H'\n\nconsole.log(buf.toString());\n// => Hello world\n```\n\nFor complete documentation, refer to the [Node.js documentation](https://nodejs.org/api/buffer.html).\n\n## `Blob`\n\n`Blob` is a Web API commonly used for representing files. `Blob` was initially implemented in browsers (unlike `ArrayBuffer` which is part of JavaScript itself), but it is now supported in Node and Bun.\n\nIt isn't common to directly create `Blob` instances. More often, you'll recieve instances of `Blob` from an external source (like an `<input type=\"file\">` element in the browser) or library. That said, it is possible to create a `Blob` from one or more string or binary \"blob parts\".\n\n```ts\nconst blob = new Blob([\"<html>Hello</html>\"], {\n  type: \"text/html\",\n});\n\nblob.type; // => text/html\nblob.size; // => 19\n```\n\nThese parts can be `string`, `ArrayBuffer`, `TypedArray`, `DataView`, or other `Blob` instances. The blob parts are concatenated together in the order they are provided.\n\n```ts\nconst blob = new Blob([\n  \"<html>\",\n  new Blob([\"<body>\"]),\n  new Uint8Array([104, 101, 108, 108, 111]), // \"hello\" in binary\n  \"</body></html>\",\n]);\n```\n\nThe contents of a `Blob` can be asynchronously read in various formats.\n\n```ts\nawait blob.text(); // => <html><body>hello</body></html>\nawait blob.arrayBuffer(); // => ArrayBuffer (copies contents)\nawait blob.stream(); // => ReadableStream\n```\n\n### `BunFile`\n\n`BunFile` is a subclass of `Blob` used to represent a lazily-loaded file on disk. Like `File`, it adds a `name` and `lastModified` property. Unlike `File`, it does not require the file to be loaded into memory.\n\n```ts\nconst file = Bun.file(\"index.txt\");\n// => BunFile\n```\n\n### `File`\n\n{% callout %}\nBrowser only. Experimental support in Node.js 20.\n{% /callout %}\n\n[`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) is a subclass of `Blob` that adds a `name` and `lastModified` property. It's commonly used in the browser to represent files uploaded via a `<input type=\"file\">` element. Node.js and Bun implement `File`.\n\n```ts\n// on browser!\n// <input type=\"file\" id=\"file\" />\n\nconst files = document.getElementById(\"file\").files;\n// => File[]\n```\n\n```ts\nconst file = new File([\"<html>Hello</html>\"], \"index.html\", {\n  type: \"text/html\",\n});\n```\n\nRefer to the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob) for complete docs information.\n\n## Streams\n\nStreams are an important abstraction for working with binary data without loading it all into memory at once. They are commonly used for reading and writing files, sending and receiving network requests, and processing large amounts of data.\n\nBun implements the Web APIs [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) and [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream).\n\n{% callout %}\nBun also implements the `node:stream` module, including [`Readable`](https://nodejs.org/api/stream.html#stream_readable_streams), [`Writable`](https://nodejs.org/api/stream.html#stream_writable_streams), and [`Duplex`](https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams). For complete documentation, refer to the Node.js docs.\n{% /callout %}\n\nTo create a simple readable stream:\n\n```ts\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"hello\");\n    controller.enqueue(\"world\");\n    controller.close();\n  },\n});\n```\n\nThe contents of this stream can be read chunk-by-chunk with `for await` syntax.\n\n```ts\nfor await (const chunk of stream) {\n  console.log(chunk);\n  // => \"hello\"\n  // => \"world\"\n}\n```\n\nFor a more complete discusson of streams in Bun, see [API > Streams](/docs/api/streams).\n\n## Conversion\n\nConverting from one binary format to another is a common task. This section is intended as a reference.\n\n### From `ArrayBuffer`\n\nSince `ArrayBuffer` stores the data that underlies other binary structures like `TypedArray`, the snippets below are not _converting_ from `ArrayBuffer` to another format. Instead, they are _creating_ a new instance using the data stored underlying data.\n\n#### To `TypedArray`\n\n```ts\nnew Uint8Array(buf);\n```\n\n#### To `DataView`\n\n```ts\nnew DataView(buf);\n```\n\n#### To `Buffer`\n\n```ts\n// create Buffer over entire ArrayBuffer\nBuffer.from(buf);\n\n// create Buffer over a slice of the ArrayBuffer\nBuffer.from(buf, 0, 10);\n```\n\n#### To `string`\n\n```ts\nnew TextDecoder().decode(buf);\n```\n\n#### To `number[]`\n\n```ts\nArray.from(new Uint8Array(buf));\n```\n\n#### To `Blob`\n\n```ts\nnew Blob([buf], { type: \"text/plain\" });\n```\n\n<!-- #### To `File`\n\n```ts\nnew File([buf], \"filename.txt\", { type: \"text/plain\", lastModified: Date.now() });\n``` -->\n\n#### To `ReadableStream`\n\nThe following snippet creates a `ReadableStream` and enqueues the entire `ArrayBuffer` as a single chunk.\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    controller.enqueue(buf);\n    controller.close();\n  },\n});\n```\n\n{% details summary=\"With chunking\" %}\nTo stream the `ArrayBuffer` in chunks, use a `Uint8Array` view and enqueue each chunk.\n\n```ts\nconst view = new Uint8Array(buf);\nconst chunkSize = 1024;\n\nnew ReadableStream({\n  start(controller) {\n    for (let i = 0; i < view.length; i += chunkSize) {\n      controller.enqueue(view.slice(i, i + chunkSize));\n    }\n    controller.close();\n  },\n});\n```\n\n{% /details %}\n\n### From `TypedArray`\n\n#### To `ArrayBuffer`\n\nThis retrieves the underlying `ArrayBuffer`. Note that a `TypedArray` can be a view of a _slice_ of the underlying buffer, so the sizes may differ.\n\n```ts\narr.buffer;\n```\n\n#### To `DataView`\n\nTo creates a `DataView` over the same byte range as the TypedArray.\n\n```ts\nnew DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n```\n\n#### To `Buffer`\n\n```ts\nBuffer.from(arr);\n```\n\n#### To `string`\n\n```ts\nnew TextDecoder().decode(arr);\n```\n\n#### To `number[]`\n\n```ts\nArray.from(arr);\n```\n\n#### To `Blob`\n\n```ts\nnew Blob([arr.buffer], { type: \"text/plain\" });\n```\n\n<!-- #### To `File`\n\n```ts\nnew File([arr.buffer], \"filename.txt\", { type: \"text/plain\", lastModified: Date.now() });\n``` -->\n\n#### To `ReadableStream`\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    controller.enqueue(arr);\n    controller.close();\n  },\n});\n```\n\n{% details summary=\"With chunking\" %}\nTo stream the `ArrayBuffer` in chunks, split the `TypedArray` into chunks and enqueue each one individually.\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    for (let i = 0; i < arr.length; i += chunkSize) {\n      controller.enqueue(arr.slice(i, i + chunkSize));\n    }\n    controller.close();\n  },\n});\n```\n\n{% /details %}\n\n### From `DataView`\n\n#### To `ArrayBuffer`\n\n```ts\nview.buffer;\n```\n\n#### To `TypedArray`\n\nOnly works if the `byteLength` of the `DataView` is a multiple of the `BYTES_PER_ELEMENT` of the `TypedArray` subclass.\n\n```ts\nnew Uint8Array(view.buffer, view.byteOffset, view.byteLength);\nnew Uint16Array(view.buffer, view.byteOffset, view.byteLength / 2);\nnew Uint32Array(view.buffer, view.byteOffset, view.byteLength / 4);\n// etc...\n```\n\n#### To `Buffer`\n\n```ts\nBuffer.from(view.buffer, view.byteOffset, view.byteLength);\n```\n\n#### To `string`\n\n```ts\nnew TextDecoder().decode(view);\n```\n\n#### To `number[]`\n\n```ts\nArray.from(view);\n```\n\n#### To `Blob`\n\n```ts\nnew Blob([view.buffer], { type: \"text/plain\" });\n```\n\n<!-- #### To `File`\n\n```ts\nnew File([view.buffer], \"filename.txt\", { type: \"text/plain\", lastModified: Date.now() });\n``` -->\n\n#### To `ReadableStream`\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    controller.enqueue(view.buffer);\n    controller.close();\n  },\n});\n```\n\n{% details summary=\"With chunking\" %}\nTo stream the `ArrayBuffer` in chunks, split the `DataView` into chunks and enqueue each one individually.\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    for (let i = 0; i < view.byteLength; i += chunkSize) {\n      controller.enqueue(view.buffer.slice(i, i + chunkSize));\n    }\n    controller.close();\n  },\n});\n```\n\n{% /details %}\n\n### From `Buffer`\n\n#### To `ArrayBuffer`\n\n```ts\nbuf.buffer;\n```\n\n#### To `TypedArray`\n\n```ts\nnew Uint8Array(buf);\n```\n\n#### To `DataView`\n\n```ts\nnew DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n```\n\n#### To `string`\n\n```ts\nbuf.toString();\n```\n\n#### To `number[]`\n\n```ts\nArray.from(buf);\n```\n\n#### To `Blob`\n\n```ts\nnew Blob([buf], { type: \"text/plain\" });\n```\n\n<!-- #### To `File`\n\n```ts\nnew File([buf], \"filename.txt\", { type: \"text/plain\", lastModified: Date.now() });\n``` -->\n\n#### To `ReadableStream`\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    controller.enqueue(buf);\n    controller.close();\n  },\n});\n```\n\n{% details summary=\"With chunking\" %}\nTo stream the `ArrayBuffer` in chunks, split the `Buffer` into chunks and enqueue each one individually.\n\n```ts\nnew ReadableStream({\n  start(controller) {\n    for (let i = 0; i < buf.length; i += chunkSize) {\n      controller.enqueue(buf.slice(i, i + chunkSize));\n    }\n    controller.close();\n  },\n});\n```\n\n{% /details %}\n\n### From `Blob`\n\n#### To `ArrayBuffer`\n\nThe `Blob` class provides a convenience method for this purpose.\n\n```ts\nawait blob.arrayBuffer();\n```\n\n#### To `TypedArray`\n\n```ts\nnew Uint8Array(await blob.arrayBuffer());\n```\n\n#### To `DataView`\n\n```ts\nnew DataView(await blob.arrayBuffer());\n```\n\n#### To `Buffer`\n\n```ts\nBuffer.from(await blob.arrayBuffer());\n```\n\n#### To `string`\n\n```ts\nawait blob.text();\n```\n\n#### To `number[]`\n\n```ts\nArray.from(new Uint8Array(await blob.arrayBuffer()));\n```\n\n#### To `ReadableStream`\n\n```ts\nblob.stream();\n```\n\n<!-- ### From `File` -->\n\n### From `ReadableStream`\n\nIt's common to use [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) as a convenient intermediate representation to make it easier to convert `ReadableStream` to other formats.\n\n```ts\nstream; // ReadableStream\n\nconst buffer = new Response(stream).arrayBuffer();\n```\n\nHowever this approach is verbose and adds overhead that slows down overall performance unnecessarily. Bun implements a set of optimized convenience functions for converting `ReadableStream` various binary formats.\n\n#### To `ArrayBuffer`\n\n```ts\n// with Response\nnew Response(stream).arrayBuffer();\n\n// with Bun function\nBun.readableStreamToArrayBuffer(stream);\n```\n\n#### To `TypedArray`\n\n```ts\n// with Response\nconst buf = await new Response(stream).arrayBuffer();\nnew Uint8Array(buf);\n\n// with Bun function\nnew Uint8Array(Bun.readableStreamToArrayBuffer(stream));\n```\n\n#### To `DataView`\n\n```ts\n// with Response\nconst buf = await new Response(stream).arrayBuffer();\nnew DataView(buf);\n\n// with Bun function\nnew DataView(Bun.readableStreamToArrayBuffer(stream));\n```\n\n#### To `Buffer`\n\n```ts\n// with Response\nconst buf = await new Response(stream).arrayBuffer();\nBuffer.from(buf);\n\n// with Bun function\nBuffer.from(Bun.readableStreamToArrayBuffer(stream));\n```\n\n#### To `string`\n\n```ts\n// with Response\nnew Response(stream).text();\n\n// with Bun function\nawait Bun.readableStreamToText(stream);\n```\n\n#### To `number[]`\n\n```ts\n// with Response\nconst buf = await new Response(stream).arrayBuffer();\nArray.from(new Uint8Array(buf));\n\n// with Bun function\nArray.from(new Uint8Array(Bun.readableStreamToArrayBuffer(stream)));\n```\n\nBun provides a utility for resolving a `ReadableStream` to an array of its chunks. Each chunk may be a string, typed array, or `ArrayBuffer`.\n\n```ts\n// with Bun function\nBun.readableStreamToArray(stream);\n```\n\n#### To `Blob`\n\n```ts\nnew Response(stream).blob();\n```\n\n<!-- #### To `File`\n\n```ts\nnew Response(stream)\n  .blob()\n  .then(blob => new File([blob], \"filename.txt\", { type: \"text/plain\", lastModified: Date.now() }));\n``` -->\n\n#### To `ReadableStream`\n\nTo split a `ReadableStream` into two streams that can be consumed independently:\n\n```ts\nconst [a, b] = stream.tee();\n```\n\n<!-- - Use Buffer\n- TextEncoder\n- `Bun.ArrayBufferSink`\n- ReadableStream\n- AsyncIterator\n- TypedArray vs ArrayBuffer vs DataView\n- Bun.indexOfLine\n- \u201cdirect\u201d readablestream\n  - readable stream has assumptions about\n  - its very generic\n  - all data is copies and queued\n  - direct : no queueing\n  - just a write function\n  - you can write strings\n  - more synchronous\n  - corking works better -->\n"}
{"filename": "docs/api/console.md", "content": "{% callout %}\n**Note** \u2014 Bun provides a browser- and Node.js-compatible [console](https://developer.mozilla.org/en-US/docs/Web/API/console) global. This page only documents Bun-native APIs.\n{% /callout %}\n\nIn Bun, the `console` object can be used as an `AsyncIterable` to sequentially read lines from `process.stdin`.\n\n```ts\nfor await (const line of console) {\n  console.log(line);\n}\n```\n\nThis is useful for implementing interactive programs, like the following addition calculator.\n\n```ts#adder.ts\nconsole.log(`Let's add some numbers!`);\nconsole.write(`Count: 0\\n> `);\n\nlet count = 0;\nfor await (const line of console) {\n  count += Number(line);\n  console.write(`Count: ${count}\\n> `);\n}\n```\n\nTo run the file:\n\n```bash\n$ bun adder.ts\nLet's add some numbers!\nCount: 0\n> 5\nCount: 5\n> 5\nCount: 10\n> 5\nCount: 15\n```\n"}
{"filename": "docs/api/dns.md", "content": "Bun implements the `node:dns` module.\n\n```ts\nimport * as dns from \"node:dns\";\n\nconst addrs = await dns.promises.resolve4(\"bun.sh\", { ttl: true });\nconsole.log(addrs);\n// => [{ address: \"172.67.161.226\", family: 4, ttl: 0 }, ...]\n```\n\n<!--\n## `Bun.dns` - lookup a domain\n`Bun.dns` includes utilities to make DNS requests, similar to `node:dns`. As of Bun v0.5.0, the only implemented function is `dns.lookup`, though more will be implemented soon.\nYou can lookup the IP addresses of a hostname by using `dns.lookup`.\n```ts\nimport { dns } from \"bun\";\nconst [{ address }] = await dns.lookup(\"example.com\");\nconsole.log(address); // \"93.184.216.34\"\n```\nIf you need to limit IP addresses to either IPv4 or IPv6, you can specify the `family` as an option.\n```ts\nimport { dns } from \"bun\";\nconst [{ address }] = await dns.lookup(\"example.com\", { family: 6 });\nconsole.log(address); // \"2606:2800:220:1:248:1893:25c8:1946\"\n```\nBun supports three backends for DNS resolution:\n- `c-ares` - This is the default on Linux, and it uses the [c-ares](https://c-ares.org/) library to perform DNS resolution.\n- `system` - Uses the system's non-blocking DNS resolver, if available. Otherwise, falls back to `getaddrinfo`. This is the default on macOS, and the same as `getaddrinfo` on Linux.\n- `getaddrinfo` - Uses the POSIX standard `getaddrinfo` function, which may cause performance issues under concurrent load.\n\nYou can choose a particular backend by specifying `backend` as an option.\n```ts\nimport { dns } from \"bun\";\nconst [{ address, ttl }] = await dns.lookup(\"example.com\", {\n  backend: \"c-ares\"\n});\nconsole.log(address); // \"93.184.216.34\"\nconsole.log(ttl); // 21237\n```\nNote: the `ttl` property is only accurate when the `backend` is c-ares. Otherwise, `ttl` will be `0`.\nThis was added in Bun v0.5.0. -->\n"}
{"filename": "docs/api/ffi.md", "content": "Use the built-in `bun:ffi` module to efficiently call native libraries from JavaScript. It works with languages that support the C ABI (Zig, Rust, C/C++, C#, Nim, Kotlin, etc).\n\n## Usage (`bun:ffi`)\n\nTo print the version number of `sqlite3`:\n\n```ts\nimport { dlopen, FFIType, suffix } from \"bun:ffi\";\n\n// `suffix` is either \"dylib\", \"so\", or \"dll\" depending on the platform\n// you don't have to use \"suffix\", it's just there for convenience\nconst path = `libsqlite3.${suffix}`;\n\nconst {\n  symbols: {\n    sqlite3_libversion, // the function to call\n  },\n} = dlopen(\n  path, // a library name or file path\n  {\n    sqlite3_libversion: {\n      // no arguments, returns a string\n      args: [],\n      returns: FFIType.cstring,\n    },\n  },\n);\n\nconsole.log(`SQLite 3 version: ${sqlite3_libversion()}`);\n```\n\n## Performance\n\nAccording to [our benchmark](https://github.com/oven-sh/bun/tree/main/bench/ffi), `bun:ffi` is roughly 2-6x faster than Node.js FFI via `Node-API`.\n\n{% image src=\"/images/ffi.png\" height=\"400\" /%}\n\nBun generates & just-in-time compiles C bindings that efficiently convert values between JavaScript types and native types. To compile C, Bun embeds [TinyCC](https://github.com/TinyCC/tinycc), a small and fast C compiler.\n\n## Usage\n\n### Zig\n\n```zig\n// add.zig\npub export fn add(a: i32, b: i32) i32 {\n  return a + b;\n}\n```\n\nTo compile:\n\n```bash\n$ zig build-lib add.zig -dynamic -OReleaseFast\n```\n\nPass a path to the shared library and a map of symbols to import into `dlopen`:\n\n```ts\nimport { dlopen, FFIType, suffix } from \"bun:ffi\";\n\nconst path = `libadd.${suffix}`;\n\nconst lib = dlopen(path, {\n  add: {\n    args: [FFIType.i32, FFIType.i32],\n    returns: FFIType.i32,\n  },\n});\n\nlib.symbols.add(1, 2);\n```\n\n### Rust\n\n```rust\n// add.rs\n#[no_mangle]\npub extern \"C\" fn add(a: isize, b: isize) -> isize {\n    a + b\n}\n```\n\nTo compile:\n\n```bash\n$ rustc --crate-type cdylib add.rs\n```\n\n## FFI types\n\nThe following `FFIType` values are supported.\n\n| `FFIType` | C Type         | Aliases                     |\n| --------- | -------------- | --------------------------- |\n| cstring   | `char*`        |                             |\n| function  | `(void*)(*)()` | `fn`, `callback`            |\n| ptr       | `void*`        | `pointer`, `void*`, `char*` |\n| i8        | `int8_t`       | `int8_t`                    |\n| i16       | `int16_t`      | `int16_t`                   |\n| i32       | `int32_t`      | `int32_t`, `int`            |\n| i64       | `int64_t`      | `int64_t`                   |\n| i64_fast  | `int64_t`      |                             |\n| u8        | `uint8_t`      | `uint8_t`                   |\n| u16       | `uint16_t`     | `uint16_t`                  |\n| u32       | `uint32_t`     | `uint32_t`                  |\n| u64       | `uint64_t`     | `uint64_t`                  |\n| u64_fast  | `uint64_t`     |                             |\n| f32       | `float`        | `float`                     |\n| f64       | `double`       | `double`                    |\n| bool      | `bool`         |                             |\n| char      | `char`         |                             |\n\n## Strings\n\nJavaScript strings and C-like strings are different, and that complicates using strings with native libraries.\n\n{% details summary=\"How are JavaScript strings and C strings different?\" %}\nJavaScript strings:\n\n- UTF16 (2 bytes per letter) or potentially latin1, depending on the JavaScript engine &amp; what characters are used\n- `length` stored separately\n- Immutable\n\nC strings:\n\n- UTF8 (1 byte per letter), usually\n- The length is not stored. Instead, the string is null-terminated which means the length is the index of the first `\\0` it finds\n- Mutable\n\n{% /details %}\n\nTo solve this, `bun:ffi` exports `CString` which extends JavaScript's built-in `String` to support null-terminated strings and add a few extras:\n\n```ts\nclass CString extends String {\n  /**\n   * Given a `ptr`, this will automatically search for the closing `\\0` character and transcode from UTF-8 to UTF-16 if necessary.\n   */\n  constructor(ptr: number, byteOffset?: number, byteLength?: number): string;\n\n  /**\n   * The ptr to the C string\n   *\n   * This `CString` instance is a clone of the string, so it\n   * is safe to continue using this instance after the `ptr` has been\n   * freed.\n   */\n  ptr: number;\n  byteOffset?: number;\n  byteLength?: number;\n}\n```\n\nTo convert from a null-terminated string pointer to a JavaScript string:\n\n```ts\nconst myString = new CString(ptr);\n```\n\nTo convert from a pointer with a known length to a JavaScript string:\n\n```ts\nconst myString = new CString(ptr, 0, byteLength);\n```\n\nThe `new CString()` constructor clones the C string, so it is safe to continue using `myString` after `ptr` has been freed.\n\n```ts\nmy_library_free(myString.ptr);\n\n// this is safe because myString is a clone\nconsole.log(myString);\n```\n\nWhen used in `returns`, `FFIType.cstring` coerces the pointer to a JavaScript `string`. When used in `args`, `FFIType.cstring` is identical to `ptr`.\n\n## Function pointers\n\n{% callout %}\n\n**Note** \u2014 Async functions are not yet supported.\n\n{% /callout %}\n\nTo call a function pointer from JavaScript, use `CFunction`. This is useful if using Node-API (napi) with Bun, and you've already loaded some symbols.\n\n```ts\nimport { CFunction } from \"bun:ffi\";\n\nlet myNativeLibraryGetVersion = /* somehow, you got this pointer */\n\nconst getVersion = new CFunction({\n  returns: \"cstring\",\n  args: [],\n  ptr: myNativeLibraryGetVersion,\n});\ngetVersion();\n```\n\nIf you have multiple function pointers, you can define them all at once with `linkSymbols`:\n\n```ts\nimport { linkSymbols } from \"bun:ffi\";\n\n// getVersionPtrs defined elsewhere\nconst [majorPtr, minorPtr, patchPtr] = getVersionPtrs();\n\nconst lib = linkSymbols({\n  // Unlike with dlopen(), the names here can be whatever you want\n  getMajor: {\n    returns: \"cstring\",\n    args: [],\n\n    // Since this doesn't use dlsym(), you have to provide a valid ptr\n    // That ptr could be a number or a bigint\n    // An invalid pointer will crash your program.\n    ptr: majorPtr,\n  },\n  getMinor: {\n    returns: \"cstring\",\n    args: [],\n    ptr: minorPtr,\n  },\n  getPatch: {\n    returns: \"cstring\",\n    args: [],\n    ptr: patchPtr,\n  },\n});\n\nconst [major, minor, patch] = [lib.symbols.getMajor(), lib.symbols.getMinor(), lib.symbols.getPatch()];\n```\n\n## Callbacks\n\nUse `JSCallback` to create JavaScript callback functions that can be passed to C/FFI functions. The C/FFI function can call into the JavaScript/TypeScript code. This is useful for asynchronous code or whenever you want to call into JavaScript code from C.\n\n```ts\nimport { dlopen, JSCallback, ptr, CString } from \"bun:ffi\";\n\nconst {\n  symbols: { search },\n  close,\n} = dlopen(\"libmylib\", {\n  search: {\n    returns: \"usize\",\n    args: [\"cstring\", \"callback\"],\n  },\n});\n\nconst searchIterator = new JSCallback((ptr, length) => /hello/.test(new CString(ptr, length)), {\n  returns: \"bool\",\n  args: [\"ptr\", \"usize\"],\n});\n\nconst str = Buffer.from(\"wwutwutwutwutwutwutwutwutwutwutut\\0\", \"utf8\");\nif (search(ptr(str), searchIterator)) {\n  // found a match!\n}\n\n// Sometime later:\nsetTimeout(() => {\n  searchIterator.close();\n  close();\n}, 5000);\n```\n\nWhen you're done with a JSCallback, you should call `close()` to free the memory.\n\n{% callout %}\n\n**\u26a1\ufe0f Performance tip** \u2014 For a slight performance boost, directly pass `JSCallback.prototype.ptr` instead of the `JSCallback` object:\n\n```ts\nconst onResolve = new JSCallback(arg => arg === 42, {\n  returns: \"bool\",\n  args: [\"i32\"],\n});\nconst setOnResolve = new CFunction({\n  returns: \"bool\",\n  args: [\"function\"],\n  ptr: myNativeLibrarySetOnResolve,\n});\n\n// This code runs slightly faster:\nsetOnResolve(onResolve.ptr);\n\n// Compared to this:\nsetOnResolve(onResolve);\n```\n\n{% /callout %}\n\n## Pointers\n\nBun represents [pointers](<https://en.wikipedia.org/wiki/Pointer_(computer_programming)>) as a `number` in JavaScript.\n\n{% details summary=\"How does a 64 bit pointer fit in a JavaScript number?\" %}\n64-bit processors support up to [52 bits of addressable space](https://en.wikipedia.org/wiki/64-bit_computing#Limits_of_processors). [JavaScript numbers](https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64) support 53 bits of usable space, so that leaves us with about 11 bits of extra space.\n\n**Why not `BigInt`?** `BigInt` is slower. JavaScript engines allocate a separate `BigInt` which means they can't fit into a regular JavaScript value. If you pass a `BigInt` to a function, it will be converted to a `number`\n{% /details %}\n\nTo convert from a `TypedArray` to a pointer:\n\n```ts\nimport { ptr } from \"bun:ffi\";\nlet myTypedArray = new Uint8Array(32);\nconst myPtr = ptr(myTypedArray);\n```\n\nTo convert from a pointer to an `ArrayBuffer`:\n\n```ts\nimport { ptr, toArrayBuffer } from \"bun:ffi\";\nlet myTypedArray = new Uint8Array(32);\nconst myPtr = ptr(myTypedArray);\n\n// toArrayBuffer accepts a `byteOffset` and `byteLength`\n// if `byteLength` is not provided, it is assumed to be a null-terminated pointer\nmyTypedArray = new Uint8Array(toArrayBuffer(myPtr, 0, 32), 0, 32);\n```\n\nTo read data from a pointer, you have two options. For long-lived pointers, use a `DataView`:\n\n```ts\nimport { toArrayBuffer } from \"bun:ffi\";\nlet myDataView = new DataView(toArrayBuffer(myPtr, 0, 32));\n\nconsole.log(\n  myDataView.getUint8(0, true),\n  myDataView.getUint8(1, true),\n  myDataView.getUint8(2, true),\n  myDataView.getUint8(3, true),\n);\n```\n\nFor short-lived pointers, use `read`:\n\n```ts\nimport { read } from \"bun:ffi\";\n\nconsole.log(\n  // ptr, byteOffset\n  read.u8(myPtr, 0),\n  read.u8(myPtr, 1),\n  read.u8(myPtr, 2),\n  read.u8(myPtr, 3),\n);\n```\n\nThe `read` function behaves similarly to `DataView`, but it's usually faster because it doesn't need to create a `DataView` or `ArrayBuffer`.\n\n| `FFIType` | `read` function |\n| --------- | --------------- |\n| ptr       | `read.ptr`      |\n| i8        | `read.i8`       |\n| i16       | `read.i16`      |\n| i32       | `read.i32`      |\n| i64       | `read.i64`      |\n| u8        | `read.u8`       |\n| u16       | `read.u16`      |\n| u32       | `read.u32`      |\n| u64       | `read.u64`      |\n| f32       | `read.f32`      |\n| f64       | `read.f64`      |\n\n### Memory management\n\n`bun:ffi` does not manage memory for you. You must free the memory when you're done with it.\n\n#### From JavaScript\n\nIf you want to track when a `TypedArray` is no longer in use from JavaScript, you can use a [FinalizationRegistry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry).\n\n#### From C, Rust, Zig, etc\n\n{% callout %}\n**Note** \u2014 Available in Bun v0.1.8 and later.\n{% /callout %}\n\nIf you want to track when a `TypedArray` is no longer in use from C or FFI, you can pass a callback and an optional context pointer to `toArrayBuffer` or `toBuffer`. This function is called at some point later, once the garbage collector frees the underlying `ArrayBuffer` JavaScript object.\n\nThe expected signature is the same as in [JavaScriptCore's C API](https://developer.apple.com/documentation/javascriptcore/jstypedarraybytesdeallocator?language=objc):\n\n```c\ntypedef void (*JSTypedArrayBytesDeallocator)(void *bytes, void *deallocatorContext);\n```\n\n```ts\nimport { toArrayBuffer } from \"bun:ffi\";\n\n// with a deallocatorContext:\ntoArrayBuffer(\n  bytes,\n  byteOffset,\n\n  byteLength,\n\n  // this is an optional pointer to a callback\n  deallocatorContext,\n\n  // this is a pointer to a function\n  jsTypedArrayBytesDeallocator,\n);\n\n// without a deallocatorContext:\ntoArrayBuffer(\n  bytes,\n  byteOffset,\n\n  byteLength,\n\n  // this is a pointer to a function\n  jsTypedArrayBytesDeallocator,\n);\n```\n\n### Memory safety\n\nUsing raw pointers outside of FFI is extremely not recommended. A future version of Bun may add a CLI flag to disable `bun:ffi`.\n\n### Pointer alignment\n\nIf an API expects a pointer sized to something other than `char` or `u8`, make sure the `TypedArray` is also that size. A `u64*` is not exactly the same as `[8]u8*` due to alignment.\n\n### Passing a pointer\n\nWhere FFI functions expect a pointer, pass a `TypedArray` of equivalent size:\n\n```ts\nimport { dlopen, FFIType } from \"bun:ffi\";\n\nconst {\n  symbols: { encode_png },\n} = dlopen(myLibraryPath, {\n  encode_png: {\n    // FFIType's can be specified as strings too\n    args: [\"ptr\", \"u32\", \"u32\"],\n    returns: FFIType.ptr,\n  },\n});\n\nconst pixels = new Uint8ClampedArray(128 * 128 * 4);\npixels.fill(254);\npixels.subarray(0, 32 * 32 * 2).fill(0);\n\nconst out = encode_png(\n  // pixels will be passed as a pointer\n  pixels,\n\n  128,\n  128,\n);\n```\n\nThe [auto-generated wrapper](https://github.com/oven-sh/bun/blob/6a65631cbdcae75bfa1e64323a6ad613a922cd1a/src/bun.js/ffi.exports.js#L180-L182) converts the pointer to a `TypedArray`.\n\n{% details summary=\"Hardmode\" %}\n\nIf you don't want the automatic conversion or you want a pointer to a specific byte offset within the `TypedArray`, you can also directly get the pointer to the `TypedArray`:\n\n```ts\nimport { dlopen, FFIType, ptr } from \"bun:ffi\";\n\nconst {\n  symbols: { encode_png },\n} = dlopen(myLibraryPath, {\n  encode_png: {\n    // FFIType's can be specified as strings too\n    args: [\"ptr\", \"u32\", \"u32\"],\n    returns: FFIType.ptr,\n  },\n});\n\nconst pixels = new Uint8ClampedArray(128 * 128 * 4);\npixels.fill(254);\n\n// this returns a number! not a BigInt!\nconst myPtr = ptr(pixels);\n\nconst out = encode_png(\n  myPtr,\n\n  // dimensions:\n  128,\n  128,\n);\n```\n\n{% /details %}\n\n### Reading pointers\n\n```ts\nconst out = encode_png(\n  // pixels will be passed as a pointer\n  pixels,\n\n  // dimensions:\n  128,\n  128,\n);\n\n// assuming it is 0-terminated, it can be read like this:\nlet png = new Uint8Array(toArrayBuffer(out));\n\n// save it to disk:\nawait Bun.write(\"out.png\", png);\n```\n"}
{"filename": "docs/api/file-io.md", "content": "{% callout %}\n\n<!-- **Note** \u2014 The `Bun.file` and `Bun.write` APIs documented on this page are heavily optimized and represent the recommended way to perform file-system tasks using Bun. Existing Node.js projects may use Bun's [nearly complete](/docs/runtime/nodejs-apis#node-fs) implementation of the [`node:fs`](https://nodejs.org/api/fs.html) module. -->\n\n**Note** \u2014 The `Bun.file` and `Bun.write` APIs documented on this page are heavily optimized and represent the recommended way to perform file-system tasks using Bun. For operations that are not yet available with `Bun.file`, such as `mkdir`, you can use Bun's [nearly complete](/docs/runtime/nodejs-apis#node-fs) implementation of the [`node:fs`](https://nodejs.org/api/fs.html) module.\n\n{% /callout %}\n\nBun provides a set of optimized APIs for reading and writing files.\n\n## Reading files (`Bun.file()`)\n\n`Bun.file(path): BunFile`\n\nCreate a `BunFile` instance with the `Bun.file(path)` function. A `BunFile` represents a lazily-loaded file; initializing it does not actually read the file from disk.\n\n```ts\nconst foo = Bun.file(\"foo.txt\"); // relative to cwd\nfoo.size; // number of bytes\nfoo.type; // MIME type\n```\n\nThe reference conforms to the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) interface, so the contents can be read in various formats.\n\n```ts\nconst foo = Bun.file(\"foo.txt\");\n\nawait foo.text(); // contents as a string\nawait foo.stream(); // contents as ReadableStream\nawait foo.arrayBuffer(); // contents as ArrayBuffer\n```\n\nFile references can also be created using numerical [file descriptors](https://en.wikipedia.org/wiki/File_descriptor) or `file://` URLs.\n\n```ts\nBun.file(1234);\nBun.file(new URL(import.meta.url)); // reference to the current file\n```\n\nA `BunFile` can point to a location on disk where a file does not exist.\n\n```ts\nconst notreal = Bun.file(\"notreal.txt\");\nnotreal.size; // 0\nnotreal.type; // \"text/plain;charset=utf-8\"\n```\n\nThe default MIME type is `text/plain;charset=utf-8`, but it can be overridden by passing a second argument to `Bun.file`.\n\n```ts\nconst notreal = Bun.file(\"notreal.json\", { type: \"application/json\" });\nnotreal.type; // => \"application/json;charset=utf-8\"\n```\n\nFor convenience, Bun exposes `stdin`, `stdout` and `stderr` as instances of `BunFile`.\n\n```ts\nBun.stdin; // readonly\nBun.stdout;\nBun.stderr;\n```\n\n## Writing files (`Bun.write()`)\n\n`Bun.write(destination, data): Promise<number>`\n\nThe `Bun.write` function is a multi-tool for writing payloads of all kinds to disk.\n\nThe first argument is the `destination` which can have any of the following types:\n\n- `string`: A path to a location on the file system. Use the `\"path\"` module to manipulate paths.\n- `URL`: A `file://` descriptor.\n- `BunFile`: A file reference.\n\nThe second argument is the data to be written. It can be any of the following:\n\n- `string`\n- `Blob` (including `BunFile`)\n- `ArrayBuffer` or `SharedArrayBuffer`\n- `TypedArray` (`Uint8Array`, et. al.)\n- `Response`\n\nAll possible permutations are handled using the fastest available system calls on the current platform.\n\n{% details summary=\"See syscalls\" %}\n\n{% table %}\n\n- Output\n- Input\n- System call\n- Platform\n\n---\n\n- file\n- file\n- copy_file_range\n- Linux\n\n---\n\n- file\n- pipe\n- sendfile\n- Linux\n\n---\n\n- pipe\n- pipe\n- splice\n- Linux\n\n---\n\n- terminal\n- file\n- sendfile\n- Linux\n\n---\n\n- terminal\n- terminal\n- sendfile\n- Linux\n\n---\n\n- socket\n- file or pipe\n- sendfile (if http, not https)\n- Linux\n\n---\n\n- file (doesn't exist)\n- file (path)\n- clonefile\n- macOS\n\n---\n\n- file (exists)\n- file\n- fcopyfile\n- macOS\n\n---\n\n- file\n- Blob or string\n- write\n- macOS\n\n---\n\n- file\n- Blob or string\n- write\n- Linux\n\n{% /table %}\n\n{% /details %}\n\nTo write a string to disk:\n\n```ts\nconst data = `It was the best of times, it was the worst of times.`;\nawait Bun.write(\"output.txt\", data);\n```\n\nTo copy a file to another location on disk:\n\n```js\nconst input = Bun.file(\"input.txt\");\nconst output = Bun.file(\"output.txt\"); // doesn't exist yet!\nawait Bun.write(output, input);\n```\n\nTo write a byte array to disk:\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"datadatadata\"); // Uint8Array\nawait Bun.write(\"output.txt\", data);\n```\n\nTo write a file to `stdout`:\n\n```ts\nconst input = Bun.file(\"input.txt\");\nawait Bun.write(Bun.stdout, input);\n```\n\nTo write an HTTP response to disk:\n\n```ts\nconst response = await fetch(\"https://bun.sh\");\nawait Bun.write(\"index.html\", response);\n```\n\n## Incremental writing with `FileSink`\n\nBun provides a native incremental file writing API called `FileSink`. To retrieve a `FileSink` instance from a `BunFile`:\n\n```ts\nconst file = Bun.file(\"output.txt\");\nconst writer = file.writer();\n```\n\nTo incrementally write to the file, call `.write()`.\n\n```ts\nconst file = Bun.file(\"output.txt\");\nconst writer = file.writer();\n\nwriter.write(\"it was the best of times\\n\");\nwriter.write(\"it was the worst of times\\n\");\n```\n\nThese chunks will be buffered internally. To flush the buffer to disk, use `.flush()`. This returns the number of flushed bytes.\n\n```ts\nwriter.flush(); // write buffer to disk\n```\n\nThe buffer will also auto-flush when the `FileSink`'s _high water mark_ is reached; that is, when its internal buffer is full. This value can be configured.\n\n```ts\nconst file = Bun.file(\"output.txt\");\nconst writer = file.writer({ highWaterMark: 1024 * 1024 }); // 1MB\n```\n\nTo flush the buffer and close the file:\n\n```ts\nwriter.end();\n```\n\nNote that, by default, the `bun` process will stay alive until this `FileSink` is explicitly closed with `.end()`. To opt out of this behavior, you can \"unref\" the instance.\n\n```ts\nwriter.unref();\n\n// to \"re-ref\" it later\nwriter.ref();\n```\n\n## Benchmarks\n\nThe following is a 3-line implementation of the Linux `cat` command.\n\n```ts#cat.ts\n// Usage\n// $ bun ./cat.ts ./path-to-file\n\nimport { resolve } from \"path\";\n\nconst path = resolve(process.argv.at(-1));\nawait Bun.write(Bun.stdout, Bun.file(path));\n```\n\nTo run the file:\n\n```bash\n$ bun ./cat.ts ./path-to-file\n```\n\nIt runs 2x faster than GNU `cat` for large files on Linux.\n\n{% image src=\"/images/cat.jpg\" /%}\n\n## Reference\n\n```ts\ninterface Bun {\n  stdin: BunFile;\n  stdout: BunFile;\n  stderr: BunFile;\n\n  file(path: string | number | URL, options?: { type?: string }): BunFile;\n\n  write(\n    destination: string | number | BunFile | URL,\n    input:\n      | string\n      | Blob\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | TypedArray\n      | Response,\n  ): Promise<number>;\n}\n\ninterface BunFile {\n  readonly size: number;\n  readonly type: string;\n\n  text(): Promise<string>;\n  stream(): Promise<ReadableStream>;\n  arrayBuffer(): Promise<ArrayBuffer>;\n  json(): Promise<any>;\n  writer(params: { highWaterMark?: number }): FileSink;\n}\n\nexport interface FileSink {\n  write(\n    chunk: string | ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\n  ): number;\n  flush(): number | Promise<number>;\n  end(error?: Error): number | Promise<number>;\n  start(options?: { highWaterMark?: number }): void;\n  ref(): void;\n  unref(): void;\n}\n```\n"}
{"filename": "docs/api/file-system-router.md", "content": "Bun provides a fast API for resolving routes against file-system paths. This API is primarily intended for library authors. At the moment only Next.js-style file-system routing is supported, but other styles may be added in the future.\n\n## Next.js-style\n\nThe `FileSystemRouter` class can resolve routes against a `pages` directory. (The Next.js 13 `app` directory is not yet supported.) Consider the following `pages` directory:\n\n```txt\npages\n\u251c\u2500\u2500 index.tsx\n\u251c\u2500\u2500 settings.tsx\n\u251c\u2500\u2500 blog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [slug].tsx\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.tsx\n\u2514\u2500\u2500 [[...catchall]].tsx\n```\n\nThe `FileSystemRouter` can be used to resolve routes against this directory:\n\n```ts\nconst router = new Bun.FileSystemRouter({\n  style: \"nextjs\",\n  dir: \"./pages\",\n  origin: \"https://mydomain.com\",\n  assetPrefix: \"_next/static/\"\n});\nrouter.match(\"/\");\n\n// =>\n{\n  filePath: \"/path/to/pages/index.tsx\",\n  kind: \"exact\",\n  name: \"/\",\n  pathname: \"/\",\n  src: \"https://mydomain.com/_next/static/pages/index.tsx\"\n}\n```\n\nQuery parameters will be parsed and returned in the `query` property.\n\n```ts\nrouter.match(\"/settings?foo=bar\");\n\n// =>\n{\n  filePath: \"/Users/colinmcd94/Documents/bun/fun/pages/settings.tsx\",\n  kind: \"dynamic\",\n  name: \"/settings\",\n  pathname: \"/settings?foo=bar\",\n  src: \"https://mydomain.com/_next/static/pages/settings.tsx\"\n  query: {\n    foo: \"bar\"\n  }\n}\n```\n\nThe router will automatically parse URL parameters and return them in the `params` property:\n\n```ts\nrouter.match(\"/blog/my-cool-post\");\n\n// =>\n{\n  filePath: \"/Users/colinmcd94/Documents/bun/fun/pages/blog/[slug].tsx\",\n  kind: \"dynamic\",\n  name: \"/blog/[slug]\",\n  pathname: \"/blog/my-cool-post\",\n  src: \"https://mydomain.com/_next/static/pages/blog/[slug].tsx\"\n  params: {\n    slug: \"my-cool-post\"\n  }\n}\n```\n\nThe `.match()` method also accepts `Request` and `Response` objects. The `url` property will be used to resolve the route.\n\n```ts\nrouter.match(new Request(\"https://example.com/blog/my-cool-post\"));\n```\n\nThe router will read the directory contents on initialization. To re-scan the files, use the `.reload()` method.\n\n```ts\nrouter.reload();\n```\n\n## Reference\n\n```ts\ninterface Bun {\n  class FileSystemRouter {\n    constructor(params: {\n      dir: string;\n      style: \"nextjs\";\n      origin?: string;\n      assetPrefix?: string;\n    });\n\n    reload(): void;\n\n    match(path: string | Request | Response): {\n      filePath: string;\n      kind: \"exact\" | \"catch-all\" | \"optional-catch-all\" | \"dynamic\";\n      name: string;\n      pathname: string;\n      src: string;\n      params?: Record<string, string>;\n      query?: Record<string, string>;\n    } | null\n  }\n}\n```\n"}
{"filename": "docs/api/file.md", "content": "Bun.js has fast paths for common use cases that make Web APIs live up to the performance demands of servers and CLIs.\n\n`Bun.file(path)` returns a [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) that represents a lazily-loaded file.\n\nWhen you pass a file blob to `Bun.write`, Bun automatically uses a faster system call:\n\n```js\nconst blob = Bun.file(\"input.txt\");\nawait Bun.write(\"output.txt\", blob);\n```\n\nOn Linux, this uses the [`copy_file_range`](https://man7.org/linux/man-pages/man2/copy_file_range.2.html) syscall and on macOS, this becomes `clonefile` (or [`fcopyfile`](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/copyfile.3.html)).\n\n`Bun.write` also supports [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) objects. It automatically converts to a [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n\n```js\n// Eventually, this will stream the response to disk but today it buffers\nawait Bun.write(\"index.html\", await fetch(\"https://example.com\"));\n```\n"}
{"filename": "docs/api/globals.md", "content": "Bun implements the following globals.\n\n{% table %}\n\n- Global\n- Source\n- Notes\n\n---\n\n- [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n- Web\n- &nbsp;\n\n---\n\n- [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n- Web\n- &nbsp;\n\n---\n\n- [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n- Web\n- Intended for command-line tools\n\n---\n\n- [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n- Web\n- &nbsp;\n\n---\n\n- [`Buffer`](https://nodejs.org/api/buffer.html#class-buffer)\n- Node.js\n- See [Node.js > `Buffer`](/docs/runtime/nodejs-apis#node-buffer)\n\n---\n\n- `Bun`\n- Bun\n- Subject to change as additional APIs are added\n\n---\n\n- [`ByteLengthQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy)\n- Web\n- &nbsp;\n\n---\n\n- [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n- Web\n- Intended for command-line tools\n\n---\n\n- [`__dirname`](https://nodejs.org/api/globals.html#__dirname)\n- Node.js\n- &nbsp;\n\n---\n\n- [`__filename`](https://nodejs.org/api/globals.html#__filename)\n- Node.js\n- &nbsp;\n\n---\n\n- [`atob()`](https://developer.mozilla.org/en-US/docs/Web/API/atob)\n- Web\n- &nbsp;\n\n---\n\n- [`btoa()`](https://developer.mozilla.org/en-US/docs/Web/API/btoa)\n- Web\n- &nbsp;\n\n---\n\n- `BuildMessage`\n- Bun\n- &nbsp;\n\n---\n\n- [`clearImmediate()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate)\n- Web\n- &nbsp;\n\n---\n\n- [`clearInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n- Web\n- &nbsp;\n\n---\n\n- [`clearTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n- Web\n- &nbsp;\n\n---\n\n- [`console`](https://developer.mozilla.org/en-US/docs/Web/API/console)\n- Web\n- &nbsp;\n\n---\n\n- [`CountQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy)\n- Web\n- &nbsp;\n\n---\n\n- [`Crypto`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto)\n- Web\n- &nbsp;\n\n---\n\n- [`crypto`](https://developer.mozilla.org/en-US/docs/Web/API/crypto)\n- Web\n- &nbsp;\n\n---\n\n- [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n- Web\n- &nbsp;\n\n---\n\n- [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n- Web\n- &nbsp;\n\n---\n\n- [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event)\n- Web\n- Also [`ErrorEvent`](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent) [`CloseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent) [`MessageEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent).\n\n---\n\n- [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)\n- Web\n- &nbsp;\n\n---\n\n- [`exports`](https://nodejs.org/api/globals.html#exports)\n- Node.js\n- &nbsp;\n\n---\n\n- [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch)\n- Web\n- &nbsp;\n\n---\n\n- [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n- Web\n- &nbsp;\n\n---\n\n- [`global`](https://nodejs.org/api/globals.html#global)\n- Node.js\n- See [Node.js > `global`](/docs/runtime/nodejs-apis#global).\n\n---\n\n- [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis)\n- Cross-platform\n- Aliases to `global`\n\n---\n\n- [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers)\n- Web\n- &nbsp;\n\n---\n\n- [`HTMLRewriter`](/docs/api/html-rewriter)\n- Cloudflare\n- &nbsp;\n\n---\n\n- [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON)\n- Web\n- &nbsp;\n\n---\n\n- [`MessageEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n- Web\n- &nbsp;\n\n---\n\n- [`module`](https://nodejs.org/api/globals.html#module)\n- Node.js\n- &nbsp;\n\n---\n\n- [`performance`](https://developer.mozilla.org/en-US/docs/Web/API/performance)\n- Web\n- &nbsp;\n\n---\n\n- [`process`](https://nodejs.org/api/process.html)\n- Node.js\n- See [Node.js > `process`](/docs/runtime/nodejs-apis#node-process)\n\n---\n\n- [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n- Web\n- Intended for command-line tools\n\n---\n\n- [`queueMicrotask()`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask)\n- Web\n- &nbsp;\n\n---\n\n- [`ReadableByteStreamController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController)\n- Web\n- &nbsp;\n\n---\n\n- [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n- Web\n- &nbsp;\n\n---\n\n- [`ReadableStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController)\n- Web\n- &nbsp;\n\n---\n\n- [`ReadableStreamDefaultReader`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader)\n- Web\n- &nbsp;\n\n---\n\n- [`reportError`](https://developer.mozilla.org/en-US/docs/Web/API/reportError)\n- Web\n- &nbsp;\n\n---\n\n- [`require()`](https://nodejs.org/api/globals.html#require)\n- Node.js\n- &nbsp;\n\n---\n\n- `ResolveMessage`\n- Bun\n- &nbsp;\n\n---\n\n- [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n- Web\n- &nbsp;\n\n---\n\n- [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)\n- Web\n- &nbsp;\n\n---\n\n- [`setImmediate()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate)\n- Web\n- &nbsp;\n\n---\n\n- [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n- Web\n- &nbsp;\n\n---\n\n- [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n- Web\n- &nbsp;\n\n---\n\n- [`ShadowRealm`](https://github.com/tc39/proposal-shadowrealm)\n- Web\n- Stage 3 proposal\n\n---\n\n- [`SubtleCrypto`](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)\n- Web\n- &nbsp;\n\n---\n\n- [`DOMException`](https://developer.mozilla.org/en-US/docs/Web/API/DOMException)\n- Web\n- &nbsp;\n\n---\n\n- [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder)\n- Web\n- &nbsp;\n\n---\n\n- [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder)\n- Web\n- &nbsp;\n\n---\n\n- [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream)\n- Web\n- &nbsp;\n\n---\n\n- [`TransformStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStreamDefaultController)\n- Web\n- &nbsp;\n\n---\n\n- [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n- Web\n- &nbsp;\n\n---\n\n- [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n- Web\n- &nbsp;\n\n---\n\n- [`WebAssembly`](https://nodejs.org/api/globals.html#webassembly)\n- Web\n- &nbsp;\n\n---\n\n- [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream)\n- Web\n- &nbsp;\n\n---\n\n- [`WritableStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultController)\n- Web\n- &nbsp;\n\n---\n\n- [`WritableStreamDefaultWriter`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter)\n- Web\n- &nbsp;\n\n{% /table %}\n"}
{"filename": "docs/api/hashing.md", "content": "{% callout %}\n\nBun implements the `createHash` and `createHmac` functions from [`node:crypto`](https://nodejs.org/api/crypto.html) in addition to the Bun-native APIs documented below.\n\n{% /callout %}\n\n## `Bun.password`\n\n{% callout %}\n**Note** \u2014 Added in Bun 0.6.8.\n{% /callout %}\n\n`Bun.password` is a collection of utility functions for hashing and verifying passwords with various cryptographically secure algorithms.\n\n```ts\nconst password = \"super-secure-pa$$word\";\n\nconst hash = await Bun.password.hash(password);\n// => $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/SqYCNu6gVdRRNs$GzJ8PuBi+K+BVojzPfS5mjnC8OpLGtv8KJqF99eP6a4\n\nconst isMatch = await Bun.password.verify(password, hash);\n// => true\n```\n\nThe second argument to `Bun.password.hash` accepts a params object that lets you pick and configure the hashing algorithm.\n\n```ts\nconst password = \"super-secure-pa$$word\";\n\n// use argon2 (default)\nconst argonHash = await Bun.password.hash(password, {\n  algorithm: \"argon2id\", // \"argon2id\" | \"argon2i\" | \"argon2d\"\n  memoryCost: 4, // memory usage in kibibytes\n  timeCost: 3, // the number of iterations\n});\n\n// use bcrypt\nconst bcryptHash = await Bun.password.hash(password, {\n  algorithm: \"bcrypt\",\n  cost: 4, // number between 4-31\n});\n```\n\nThe algorithm used to create the hash is stored in the hash itself. When using `bcrypt`, the returned hash is encoded in [Modular Crypt Format](https://passlib.readthedocs.io/en/stable/modular_crypt_format.html) for compatibility with most existing `bcrypt` implementations; with `argon2` the result is encoded in the newer [PHC format](https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md).\n\nThe `verify` function automatically detects the algorithm based on the input hash and use the correct verification method. It can correctly infer the algorithm from both PHC- or MCF-encoded hashes.\n\n```ts\nconst password = \"super-secure-pa$$word\";\n\nconst hash = await Bun.password.hash(password, {\n  /* config */\n});\n\nconst isMatch = await Bun.password.verify(password, hash);\n// => true\n```\n\nSynchronous versions of all functions are also available. Keep in mind that these functions are computationally expensive, so using a blocking API may degrade application performance.\n\n```ts\nconst password = \"super-secure-pa$$word\";\n\nconst hash = Bun.password.hashSync(password, {\n  /* config */\n});\n\nconst isMatch = Bun.password.verifySync(password, hash);\n// => true\n```\n\n## `Bun.hash`\n\n`Bun.hash` is a collection of utilities for _non-cryptographic_ hashing. Non-cryptographic hashing algorithms are optimized for speed of computation over collision-resistance or security.\n\nThe standard `Bun.hash` functions uses [Wyhash](https://github.com/wangyi-fudan/wyhash) to generate a 64-bit hash from an input of arbitrary size.\n\n```ts\nBun.hash(\"some data here\");\n// 11562320457524636935n\n```\n\nThe input can be a string, `TypedArray`, `DataView`, `ArrayBuffer`, or `SharedArrayBuffer`.\n\n```ts\nconst arr = new Uint8Array([1, 2, 3, 4]);\n\nBun.hash(\"some data here\");\nBun.hash(arr);\nBun.hash(arr.buffer);\nBun.hash(new DataView(arr.buffer));\n```\n\nOptionally, an integer seed can be specified as the second parameter. For 64-bit hashes seeds above `Number.MAX_SAFE_INTEGER` should be given as BigInt to avoid loss of precision.\n\n```ts\nBun.hash(\"some data here\", 1234);\n// 15724820720172937558n\n```\n\nAdditional hashing algorithms are available as properties on `Bun.hash`. The API is the same for each, only changing the return type from number for 32-bit hashes to bigint for 64-bit hashes.\n\n```ts\nBun.hash.wyhash(\"data\", 1234); // equivalent to Bun.hash()\nBun.hash.crc32(\"data\", 1234);\nBun.hash.adler32(\"data\", 1234);\nBun.hash.cityHash32(\"data\", 1234);\nBun.hash.cityHash64(\"data\", 1234);\nBun.hash.murmur32v3(\"data\", 1234);\nBun.hash.murmur32v2(\"data\", 1234);\nBun.hash.murmur64v2(\"data\", 1234);\n```\n\n## `Bun.CryptoHasher`\n\n`Bun.CryptoHasher` is a general-purpose utility class that lets you incrementally compute a hash of string or binary data using a range of cryptographic hash algorithms. The following algorithms are supported:\n\n- `\"blake2b256\"`\n- `\"md4\"`\n- `\"md5\"`\n- `\"ripemd160\"`\n- `\"sha1\"`\n- `\"sha224\"`\n- `\"sha256\"`\n- `\"sha384\"`\n- `\"sha512\"`\n- `\"sha512-256\"`\n\n```ts\nconst hasher = new Bun.CryptoHasher(\"sha256\");\nhasher.update(\"hello world\");\nhasher.digest();\n// Uint8Array(32) [ <byte>, <byte>, ... ]\n```\n\nOnce initialized, data can be incrementally fed to to the hasher using `.update()`. This method accepts `string`, `TypedArray`, and `ArrayBuffer`.\n\n```ts\nconst hasher = new Bun.CryptoHasher();\n\nhasher.update(\"hello world\");\nhasher.update(new Uint8Array([1, 2, 3]));\nhasher.update(new ArrayBuffer(10));\n```\n\nIf a `string` is passed, an optional second parameter can be used to specify the encoding (default `'utf-8'`). The following encodings are supported:\n\n{% table %}\n\n---\n\n- Binary encodings\n- `\"base64\"` `\"base64url\"` `\"hex\"` `\"binary\"`\n\n---\n\n- Character encodings\n- `\"utf8\"` `\"utf-8\"` `\"utf16le\"` `\"latin1\"`\n\n---\n\n- Legacy character encodings\n- `\"ascii\"` `\"binary\"` `\"ucs2\"` `\"ucs-2\"`\n\n{% /table %}\n\n```ts\nhasher.update(\"hello world\"); // defaults to utf8\nhasher.update(\"hello world\", \"hex\");\nhasher.update(\"hello world\", \"base64\");\nhasher.update(\"hello world\", \"latin1\");\n```\n\nAfter the data has been feed into the hasher, a final hash can be computed using `.digest()`. By default, this method returns a `Uint8Array` containing the hash.\n\n```ts\nconst hasher = new Bun.CryptoHasher();\nhasher.update(\"hello world\");\n\nhasher.digest();\n// => Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]\n```\n\nThe `.digest()` method can optionally return the hash as a string. To do so, specify an encoding:\n\n```ts\nhasher.digest(\"base64\");\n// => \"uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=\"\n\nhasher.digest(\"hex\");\n// => \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"\n```\n\nAlternatively, the method can write the hash into a pre-existing `TypedArray` instance. This may be desirable in some performance-sensitive applications.\n\n```ts\nconst arr = new Uint8Array(32);\n\nhasher.digest(arr);\n\nconsole.log(arr);\n// => Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]\n```\n\n<!-- Bun.sha; -->\n"}
{"filename": "docs/api/html-rewriter.md", "content": "Bun provides a fast native implementation of the `HTMLRewriter` pattern developed by Cloudflare. It provides a convenient, `EventListener`-like API for traversing and transforming HTML documents.\n\n```ts\nconst rewriter = new HTMLRewriter();\n\nrewriter.on(\"*\", {\n  element(el) {\n    console.log(el.tagName); // \"body\" | \"div\" | ...\n  },\n});\n```\n\nTo parse and/or transform the HTML:\n\n```ts#rewriter.ts\nrewriter.transform(\n  new Response(`\n<!DOCTYPE html>\n<html>\n<!-- comment -->\n<head>\n  <title>My First HTML Page</title>\n</head>\n<body>\n  <h1>My First Heading</h1>\n  <p>My first paragraph.</p>\n</body>\n`));\n```\n\nView the full documentation on the [Cloudflare website](https://developers.cloudflare.com/workers/runtime-apis/html-rewriter/).\n"}
{"filename": "docs/api/http.md", "content": "The page primarily documents the Bun-native `Bun.serve` API. Bun also implements [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and the Node.js [`http`](https://nodejs.org/api/http.html) and [`https`](https://nodejs.org/api/https.html) modules.\n\n{% callout %}\nThese modules have been re-implemented to use Bun's fast internal HTTP infrastructure. Feel free to use these modules directly; frameworks like [Express](https://expressjs.com/) that depend on these modules should work out of the box. For granular compatibility information, see [Runtime > Node.js APIs](/docs/runtime/nodejs-apis).\n{% /callout %}\n\nTo start a high-performance HTTP server with a clean API, the recommended approach is [`Bun.serve`](#start-a-server-bun-serve).\n\n## `Bun.serve()`\n\nStart an HTTP server in Bun with `Bun.serve`.\n\n```ts\nBun.serve({\n  fetch(req) {\n    return new Response(`Bun!`);\n  },\n});\n```\n\nThe `fetch` handler handles incoming requests. It receives a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) object and returns a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) or `Promise<Response>`.\n\n```ts\nBun.serve({\n  fetch(req) {\n    const url = new URL(req.url);\n    if (url.pathname === \"/\") return new Response(`Home page!`);\n    if (url.pathname === \"/blog\") return new Response(\"Blog!\");\n    return new Response(`404!`);\n  },\n});\n```\n\nTo configure which port and hostname the server will listen on:\n\n```ts\nBun.serve({\n  port: 8080, // defaults to $BUN_PORT, $PORT, $NODE_PORT otherwise 3000\n  hostname: \"mydomain.com\", // defaults to \"0.0.0.0\"\n  fetch(req) {\n    return new Response(`404!`);\n  },\n});\n```\n\nTo listen on a [unix domain socket](https://en.wikipedia.org/wiki/Unix_domain_socket):\n\n```ts\nBun.serve({\n  unix: \"/tmp/my-socket.sock\", // path to socket\n  fetch(req) {\n    return new Response(`404!`);\n  },\n});\n```\n\n## Error handling\n\nTo activate development mode, set `development: true`. By default, development mode is _enabled_ unless `NODE_ENV` is `production`.\n\n```ts\nBun.serve({\n  development: true,\n  fetch(req) {\n    throw new Error(\"woops!\");\n  },\n});\n```\n\nIn development mode, Bun will surface errors in-browser with a built-in error page.\n\n{% image src=\"/images/exception_page.png\" caption=\"Bun's built-in 500 page\" /%}\n\nTo handle server-side errors, implement an `error` handler. This function should return a `Response` to served to the client when an error occurs. This response will supercede Bun's default error page in `development` mode.\n\n```ts\nBun.serve({\n  fetch(req) {\n    throw new Error(\"woops!\");\n  },\n  error(error) {\n    return new Response(`<pre>${error}\\n${error.stack}</pre>`, {\n      headers: {\n        \"Content-Type\": \"text/html\",\n      },\n    });\n  },\n});\n```\n\n{% callout %}\n[Learn more about debugging in Bun](https://bun.sh/docs/runtime/debugger)\n{% /callout %}\n\nThe call to `Bun.serve` returns a `Server` object. To stop the server, call the `.stop()` method.\n\n```ts\nconst server = Bun.serve({\n  fetch() {\n    return new Response(\"Bun!\");\n  },\n});\n\nserver.stop();\n```\n\n## TLS\n\nBun supports TLS out of the box, powered by [BoringSSL](https://boringssl.googlesource.com/boringssl). Enable TLS by passing in a value for `key` and `cert`; both are required to enable TLS.\n\n```ts-diff\n  Bun.serve({\n    fetch(req) {\n      return new Response(\"Hello!!!\");\n    },\n\n+   tls: {\n+     key: Bun.file(\"./key.pem\"),\n+     cert: Bun.file(\"./cert.pem\"),\n+   }\n  });\n```\n\nThe `key` and `cert` fields expect the _contents_ of your TLS key and certificate, _not a path to it_. This can be a string, `BunFile`, `TypedArray`, or `Buffer`.\n\n```ts\nBun.serve({\n  fetch() {},\n\n  tls: {\n    // BunFile\n    key: Bun.file(\"./key.pem\"),\n    // Buffer\n    key: fs.readFileSync(\"./key.pem\"),\n    // string\n    key: fs.readFileSync(\"./key.pem\", \"utf8\"),\n    // array of above\n    key: [Bun.file(\"./key1.pem\"), Bun.file(\"./key2.pem\")],\n  },\n});\n```\n\n{% callout %}\n\n**Note** \u2014\u00a0Earlier versions of Bun supported passing a file path as `keyFile` and `certFile`; this has been deprecated as of `v0.6.3`.\n\n{% /callout %}\n\nIf your private key is encrypted with a passphrase, provide a value for `passphrase` to decrypt it.\n\n```ts-diff\n  Bun.serve({\n    fetch(req) {\n      return new Response(\"Hello!!!\");\n    },\n\n    tls: {\n      key: Bun.file(\"./key.pem\"),\n      cert: Bun.file(\"./cert.pem\"),\n+     passphrase: \"my-secret-passphrase\",\n    }\n  });\n```\n\nOptionally, you can override the trusted CA certificates by passing a value for `ca`. By default, the server will trust the list of well-known CAs curated by Mozilla. When `ca` is specified, the Mozilla list is overwritten.\n\n```ts-diff\n  Bun.serve({\n    fetch(req) {\n      return new Response(\"Hello!!!\");\n    },\n    tls: {\n      key: Bun.file(\"./key.pem\"), // path to TLS key\n      cert: Bun.file(\"./cert.pem\"), // path to TLS cert\n+     ca: Bun.file(\"./ca.pem\"), // path to root CA certificate\n    }\n  });\n```\n\nTo override Diffie-Helman parameters:\n\n```ts\nBun.serve({\n  // ...\n  tls: {\n    // other config\n    dhParamsFile: \"/path/to/dhparams.pem\", // path to Diffie Helman parameters\n  },\n});\n```\n\n## Object syntax\n\nThus far, the examples on this page have used the explicit `Bun.serve` API. Bun also supports an alternate syntax.\n\n```ts#server.ts\nimport {type Serve} from \"bun\";\n\nexport default {\n  fetch(req) {\n    return new Response(`Bun!`);\n  },\n} satisfies Serve;\n```\n\nInstead of passing the server options into `Bun.serve`, `export default` it. This file can be executed as-is; when Bun sees a file with a `default` export containing a `fetch` handler, it passes it into `Bun.serve` under the hood.\n\n<!-- This syntax has one major advantage: it is hot-reloadable out of the box. When any source file is changed, Bun will reload the server with the updated code _without restarting the process_. This makes hot reloads nearly instantaneous. Use the `--hot` flag when starting the server to enable hot reloading. -->\n\n<!-- ```bash\n$ bun --hot server.ts\n``` -->\n\n<!-- It's possible to configure hot reloading while using the explicit `Bun.serve` API; for details refer to [Runtime > Hot reloading](/docs/runtime/hot). -->\n\n## Streaming files\n\nTo stream a file, return a `Response` object with a `BunFile` object as the body.\n\n```ts\nimport { serve, file } from \"bun\";\n\nserve({\n  fetch(req) {\n    return new Response(Bun.file(\"./hello.txt\"));\n  },\n});\n```\n\n{% callout %}\n\u26a1\ufe0f **Speed** \u2014 Bun automatically uses the [`sendfile(2)`](https://man7.org/linux/man-pages/man2/sendfile.2.html) system call when possible, enabling zero-copy file transfers in the kernel\u2014the fastest way to send files.\n{% /callout %}\n\n**[v0.3.0+]** You can send part of a file using the [`slice(start, end)`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice) method on the `Bun.file` object. This automatically sets the `Content-Range` and `Content-Length` headers on the `Response` object.\n\n```ts\nBun.serve({\n  fetch(req) {\n    // parse `Range` header\n    const [start = 0, end = Infinity] = req.headers\n      .get(\"Range\") // Range: bytes=0-100\n      .split(\"=\") // [\"Range: bytes\", \"0-100\"]\n      .at(-1) // \"0-100\"\n      .split(\"-\") // [\"0\", \"100\"]\n      .map(Number); // [0, 100]\n\n    // return a slice of the file\n    const bigFile = Bun.file(\"./big-video.mp4\");\n    return new Response(bigFile.slice(start, end));\n  },\n});\n```\n\n## Benchmarks\n\nBelow are Bun and Node.js implementations of a simple HTTP server that responds `Bun!` to each incoming `Request`.\n\n{% codetabs %}\n\n```ts#Bun\nBun.serve({\n  fetch(req: Request) {\n    return new Response(`Bun!`);\n  },\n  port: 3000,\n});\n```\n\n```ts#Node\nrequire(\"http\")\n  .createServer((req, res) => res.end(\"Bun!\"))\n  .listen(8080);\n```\n\n{% /codetabs %}\nThe `Bun.serve` server can handle roughly 2.5x more requests per second than Node.js on Linux.\n\n{% table %}\n\n- Runtime\n- Requests per second\n\n---\n\n- Node 16\n- ~64,000\n\n---\n\n- Bun\n- ~160,000\n\n{% /table %}\n\n{% image width=\"499\" alt=\"image\" src=\"https://user-images.githubusercontent.com/709451/162389032-fc302444-9d03-46be-ba87-c12bd8ce89a0.png\" /%}\n\n## Reference\n\n{% details summary=\"See TypeScript definitions\" %}\n\n```ts\ninterface Bun {\n  serve(options: {\n    fetch: (req: Request, server: Server) => Response | Promise<Response>;\n    hostname?: string;\n    port?: number;\n    development?: boolean;\n    error?: (error: Error) => Response | Promise<Response>;\n    tls?: {\n      key?:\n        | string\n        | TypedArray\n        | BunFile\n        | Array<string | TypedArray | BunFile>;\n      cert?:\n        | string\n        | TypedArray\n        | BunFile\n        | Array<string | TypedArray | BunFile>;\n      ca?: string | TypedArray | BunFile | Array<string | TypedArray | BunFile>;\n      passphrase?: string;\n      dhParamsFile?: string;\n    };\n    maxRequestBodySize?: number;\n    lowMemoryMode?: boolean;\n  }): Server;\n}\n\ninterface Server {\n  development: boolean;\n  hostname: string;\n  port: number;\n  pendingRequests: number;\n  stop(): void;\n}\n```\n\n{% /details %}\n"}
{"filename": "docs/api/import-meta.md", "content": "The `import.meta` object is a way for a module to access information about itself. It's part of the JavaScript language, but its contents are not standardized. Each \"host\" (browser, runtime, etc) is free to implement any properties it wishes on the `import.meta` object.\n\nBun implements the following properties.\n\n```ts#/path/to/project/file.ts\nimport.meta.dir;   // => \"/path/to/project\"\nimport.meta.file;  // => \"file.ts\"\nimport.meta.path;  // => \"/path/to/project/file.ts\"\n\nimport.meta.main;  // `true` if this file is directly executed by `bun run`\n                   // `false` otherwise\n\nimport.meta.resolveSync(\"zod\")\n// resolve an import specifier relative to the directory\n```\n\n{% table %}\n\n---\n\n- `import.meta.dir`\n- Absolute path to the directory containing the current file, e.g. `/path/to/project`. Equivalent to `__dirname` in CommonJS modules (and Node.js)\n\n---\n\n- `import.meta.file`\n- The name of the current file, e.g. `index.tsx`\n\n---\n\n- `import.meta.path`\n- Absolute path to the current file, e.g. `/path/to/project/index.tx`. Equivalent to `__filename` in CommonJS modules (and Node.js)\n\n---\n\n- `import.meta.main`\n- `boolean` Indicates whether the current file is the entrypoint to the current `bun` process. Is the file being directly executed by `bun run` or is it being imported?\n\n---\n\n- `import.meta.resolve{Sync}`\n- Resolve a module specifier (e.g. `\"zod\"` or `\"./file.tsx`) to an absolute path. While file would be imported if the specifier were imported from this file?\n\n  ```ts\n  import.meta.resolveSync(\"zod\");\n  // => \"/path/to/project/node_modules/zod/index.ts\"\n\n  import.meta.resolveSync(\"./file.tsx\");\n  // => \"/path/to/project/file.tsx\"\n  ```\n\n{% /table %}\n"}
{"filename": "docs/api/node-api.md", "content": "Node-API is an interface for building native add-ons to Node.js. Bun implements 95% of this interface from scratch, so most existing Node-API extensions will work with Bun out of the box. Track the completion status of it in [this issue](https://github.com/oven-sh/bun/issues/158).\n\nAs in Node.js, `.node` files (Node-API modules) can be required directly in Bun.\n\n```js\nconst napi = require(\"./my-node-module.node\");\n```\n\nAlternatively, use `process.dlopen`:\n\n```js\nlet mod = { exports: {} };\nprocess.dlopen(mod, \"./my-node-module.node\");\n```\n\nBun polyfills the [`detect-libc`](https://npmjs.com/package/detect-libc) package, which is used by many Node-API modules to detect which `.node` binding to `require`.\n"}
{"filename": "docs/api/spawn.md", "content": "Spawn child processes with `Bun.spawn` or `Bun.spawnSync`.\n\n## Spawn a process (`Bun.spawn()`)\n\nProvide a command as an array of strings. The result of `Bun.spawn()` is a `Bun.Subprocess` object.\n\n```ts\nBun.spawn([\"echo\", \"hello\"]);\n```\n\nThe second argument to `Bun.spawn` is a parameters object that can be used to configure the subprocess.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"], {\n  cwd: \"./path/to/subdir\", // specify a working directory\n  env: { ...process.env, FOO: \"bar\" }, // specify environment variables\n  onExit(proc, exitCode, signalCode, error) {\n    // exit handler\n  },\n});\n\nproc.pid; // process ID of subprocess\n```\n\n## Input stream\n\nBy default, the input stream of the subprocess is undefined; it can be configured with the `stdin` parameter.\n\n```ts\nconst proc = Bun.spawn([\"cat\"], {\n  stdin: await fetch(\"https://raw.githubusercontent.com/oven-sh/bun/main/examples/hashing.js\"),\n});\n\nconst text = await new Response(proc.stdout).text();\nconsole.log(text); // \"const input = \"hello world\".repeat(400); ...\"\n```\n\n{% table %}\n\n---\n\n- `null`\n- **Default.** Provide no input to the subprocess\n\n---\n\n- `\"pipe\"`\n- Return a `FileSink` for fast incremental writing\n\n---\n\n- `\"inherit\"`\n- Inherit the `stdin` of the parent process\n\n---\n\n- `Bun.file()`\n- Read from the specified file.\n\n---\n\n- `TypedArray | DataView`\n- Use a binary buffer as input.\n\n---\n\n- `Response`\n- Use the response `body` as input.\n\n---\n\n- `Request`\n- Use the request `body` as input.\n\n---\n\n- `number`\n- Read from the file with a given file descriptor.\n\n{% /table %}\n\nThe `\"pipe\"` option lets incrementally write to the subprocess's input stream from the parent process.\n\n```ts\nconst proc = Bun.spawn([\"cat\"], {\n  stdin: \"pipe\", // return a FileSink for writing\n});\n\n// enqueue string data\nproc.stdin.write(\"hello\");\n\n// enqueue binary data\nconst enc = new TextEncoder();\nproc.stdin.write(enc.encode(\" world!\"));\n\n// send buffered data\nproc.stdin.flush();\n\n// close the input stream\nproc.stdin.end();\n```\n\n## Output streams\n\nYou can read results from the subprocess via the `stdout` and `stderr` properties. By default these are instances of `ReadableStream`.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\nconst text = await new Response(proc.stdout).text();\nconsole.log(text); // => \"hello\"\n```\n\nConfigure the output stream by passing one of the following values to `stdout/stderr`:\n\n{% table %}\n\n---\n\n- `\"pipe\"`\n- **Default for `stdout`.** Pipe the output to a `ReadableStream` on the returned `Subprocess` object.\n\n---\n\n- `\"inherit\"`\n- **Default for `stderr`.** Inherit from the parent process.\n\n---\n\n- `Bun.file()`\n- Write to the specified file.\n\n---\n\n- `null`\n- Write to `/dev/null`.\n\n---\n\n- `number`\n- Write to the file with the given file descriptor.\n\n{% /table %}\n\n## Exit handling\n\nUse the `onExit` callback to listen for the process exiting or being killed.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"], {\n  onExit(proc, exitCode, signalCode, error) {\n    // exit handler\n  },\n});\n```\n\nFor convenience, the `exited` property is a `Promise` that resolves when the process exits.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\n\nawait proc.exited; // resolves when process exit\nproc.killed; // boolean \u2014 was the process killed?\nproc.exitCode; // null | number\nproc.signalCode; // null | \"SIGABRT\" | \"SIGALRM\" | ...\n```\n\nTo kill a process:\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\nproc.kill();\nproc.killed; // true\n\nproc.kill(); // specify an exit code\n```\n\nThe parent `bun` process will not terminate until all child processes have exited. Use `proc.unref()` to detach the child process from the parent.\n\n```\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\nproc.unref();\n```\n\n## Blocking API (`Bun.spawnSync()`)\n\nBun provides a synchronous equivalent of `Bun.spawn` called `Bun.spawnSync`. This is a blocking API that supports the same inputs and parameters as `Bun.spawn`. It returns a `SyncSubprocess` object, which differs from `Subprocess` in a few ways.\n\n1. It contains a `success` property that indicates whether the process exited with a zero exit code.\n2. The `stdout` and `stderr` properties are instances of `Buffer` instead of `ReadableStream`.\n3. There is no `stdin` property. Use `Bun.spawn` to incrementally write to the subprocess's input stream.\n\n```ts\nconst proc = Bun.spawnSync([\"echo\", \"hello\"]);\n\nconsole.log(proc.stdout.toString());\n// => \"hello\\n\"\n```\n\nAs a rule of thumb, the asynchronous `Bun.spawn` API is better for HTTP servers and apps, and `Bun.spawnSync` is better for building command-line tools.\n\n## Benchmarks\n\n{%callout%}\n\u26a1\ufe0f Under the hood, `Bun.spawn` and `Bun.spawnSync` use [`posix_spawn(3)`](https://man7.org/linux/man-pages/man3/posix_spawn.3.html).\n{%/callout%}\n\nBun's `spawnSync` spawns processes 60% faster than the Node.js `child_process` module.\n\n```bash\n$ bun spawn.mjs\ncpu: Apple M1 Max\nruntime: bun 0.2.0 (arm64-darwin)\n\nbenchmark              time (avg)             (min \u2026 max)       p75       p99      p995\n--------------------------------------------------------- -----------------------------\nspawnSync echo hi  888.14 \u00b5s/iter    (821.83 \u00b5s \u2026 1.2 ms) 905.92 \u00b5s      1 ms   1.03 ms\n$ node spawn.node.mjs\ncpu: Apple M1 Max\nruntime: node v18.9.1 (arm64-darwin)\n\nbenchmark              time (avg)             (min \u2026 max)       p75       p99      p995\n--------------------------------------------------------- -----------------------------\nspawnSync echo hi    1.47 ms/iter     (1.14 ms \u2026 2.64 ms)   1.57 ms   2.37 ms   2.52 ms\n```\n\n## Reference\n\nA simple reference of the Spawn API and types are shown below. The real types have complex generics to strongly type the `Subprocess` streams with the options passed to `Bun.spawn` and `Bun.spawnSync`. For full details, find these types as defined [bun.d.ts](https://github.com/oven-sh/bun/blob/main/packages/bun-types/bun.d.ts).\n\n```ts\ninterface Bun {\n  spawn(command: string[], options?: SpawnOptions.OptionsObject): Subprocess;\n  spawnSync(command: string[], options?: SpawnOptions.OptionsObject): SyncSubprocess;\n\n  spawn(options: { cmd: string[] } & SpawnOptions.OptionsObject): Subprocess;\n  spawnSync(options: { cmd: string[] } & SpawnOptions.OptionsObject): SyncSubprocess;\n}\n\nnamespace SpawnOptions {\n  interface OptionsObject {\n    cwd?: string;\n    env?: Record<string, string>;\n    stdin?: SpawnOptions.Readable;\n    stdout?: SpawnOptions.Writable;\n    stderr?: SpawnOptions.Writable;\n    onExit?: (proc: Subprocess, exitCode: number | null, signalCode: string | null, error: Error | null) => void;\n  }\n\n  type Readable =\n    | \"pipe\"\n    | \"inherit\"\n    | \"ignore\"\n    | null // equivalent to \"ignore\"\n    | undefined // to use default\n    | BunFile\n    | ArrayBufferView\n    | number;\n\n  type Writable =\n    | \"pipe\"\n    | \"inherit\"\n    | \"ignore\"\n    | null // equivalent to \"ignore\"\n    | undefined // to use default\n    | BunFile\n    | ArrayBufferView\n    | number\n    | ReadableStream\n    | Blob\n    | Response\n    | Request;\n}\n\ninterface Subprocess<Stdin, Stdout, Stderr> {\n  readonly pid: number;\n  // the exact stream types here are derived from the generic parameters\n  readonly stdin: number | ReadableStream | FileSink | undefined;\n  readonly stdout: number | ReadableStream | undefined;\n  readonly stderr: number | ReadableStream | undefined;\n\n  readonly exited: Promise<number>;\n\n  readonly exitCode: number | undefined;\n  readonly signalCode: Signal | null;\n  readonly killed: boolean;\n\n  ref(): void;\n  unref(): void;\n  kill(code?: number): void;\n}\n\ninterface SyncSubprocess<Stdout, Stderr> {\n  readonly pid: number;\n  readonly success: boolean;\n  // the exact buffer types here are derived from the generic parameters\n  readonly stdout: Buffer | undefined;\n  readonly stderr: Buffer | undefined;\n}\n\ntype ReadableSubprocess = Subprocess<any, \"pipe\", \"pipe\">;\ntype WritableSubprocess = Subprocess<\"pipe\", any, any>;\ntype PipedSubprocess = Subprocess<\"pipe\", \"pipe\", \"pipe\">;\ntype NullSubprocess = Subprocess<null, null, null>;\n\ntype ReadableSyncSubprocess = SyncSubprocess<\"pipe\", \"pipe\">;\ntype NullSyncSubprocess = SyncSubprocess<null, null>;\n\ntype Signal =\n  | \"SIGABRT\"\n  | \"SIGALRM\"\n  | \"SIGBUS\"\n  | \"SIGCHLD\"\n  | \"SIGCONT\"\n  | \"SIGFPE\"\n  | \"SIGHUP\"\n  | \"SIGILL\"\n  | \"SIGINT\"\n  | \"SIGIO\"\n  | \"SIGIOT\"\n  | \"SIGKILL\"\n  | \"SIGPIPE\"\n  | \"SIGPOLL\"\n  | \"SIGPROF\"\n  | \"SIGPWR\"\n  | \"SIGQUIT\"\n  | \"SIGSEGV\"\n  | \"SIGSTKFLT\"\n  | \"SIGSTOP\"\n  | \"SIGSYS\"\n  | \"SIGTERM\"\n  | \"SIGTRAP\"\n  | \"SIGTSTP\"\n  | \"SIGTTIN\"\n  | \"SIGTTOU\"\n  | \"SIGUNUSED\"\n  | \"SIGURG\"\n  | \"SIGUSR1\"\n  | \"SIGUSR2\"\n  | \"SIGVTALRM\"\n  | \"SIGWINCH\"\n  | \"SIGXCPU\"\n  | \"SIGXFSZ\"\n  | \"SIGBREAK\"\n  | \"SIGLOST\"\n  | \"SIGINFO\";\n```\n"}
{"filename": "docs/api/sqlite.md", "content": "Bun natively implements a high-performance [SQLite3](https://www.sqlite.org/) driver. To use it import from the built-in `bun:sqlite` module.\n\n```ts\nimport { Database } from \"bun:sqlite\";\n\nconst db = new Database(\":memory:\");\nconst query = db.query(\"select 'Hello world' as message;\");\nquery.get(); // => { message: \"Hello world\" }\n```\n\nThe API is simple, synchronous, and fast. Credit to [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) and its contributors for inspiring the API of `bun:sqlite`.\n\nFeatures include:\n\n- Transactions\n- Parameters (named & positional)\n- Prepared statements\n- Datatype conversions (`BLOB` becomes `Uint8Array`)\n- The fastest performance of any SQLite driver for JavaScript\n\nThe `bun:sqlite` module is roughly 3-6x faster than `better-sqlite3` and 8-9x faster than `deno.land/x/sqlite` for read queries. Each driver was benchmarked against the [Northwind Traders](https://github.com/jpwhite3/northwind-SQLite3/blob/46d5f8a64f396f87cd374d1600dbf521523980e8/Northwind_large.sqlite.zip) dataset. View and run the [benchmark source](https://github.com/oven-sh/bun/tree/main/bench/sqlite).\n\n{% image width=\"738\" alt=\"SQLite benchmarks for Bun, better-sqlite3, and deno.land/x/sqlite\" src=\"https://user-images.githubusercontent.com/709451/168459263-8cd51ca3-a924-41e9-908d-cf3478a3b7f3.png\" caption=\"Benchmarked on an M1 MacBook Pro (64GB) running macOS 12.3.1\" /%}\n\n## Database\n\nTo open or create a SQLite3 database:\n\n```ts\nimport { Database } from \"bun:sqlite\";\n\nconst db = new Database(\"mydb.sqlite\");\n```\n\nTo open an in-memory database:\n\n```ts\nimport { Database } from \"bun:sqlite\";\n\n// all of these do the same thing\nconst db = new Database(\":memory:\");\nconst db = new Database();\nconst db = new Database(\"\");\n```\n\nTo open in `readonly` mode:\n\n```ts\nimport { Database } from \"bun:sqlite\";\nconst db = new Database(\"mydb.sqlite\", { readonly: true });\n```\n\nTo create the database if the file doesn't exist:\n\n```ts\nimport { Database } from \"bun:sqlite\";\nconst db = new Database(\"mydb.sqlite\", { create: true });\n```\n\n### `.close()`\n\nTo close a database:\n\n```ts\nconst db = new Database();\ndb.close();\n```\n\nNote: `close()` is called automatically when the database is garbage collected. It is safe to call multiple times but has no effect after the first.\n\n### `.serialize()`\n\n`bun:sqlite` supports SQLite's built-in mechanism for [serializing](https://www.sqlite.org/c3ref/serialize.html) and [deserializing](https://www.sqlite.org/c3ref/deserialize.html) databases to and from memory.\n\n```ts\nconst olddb = new Database(\"mydb.sqlite\");\nconst contents = olddb.serialize(); // => Uint8Array\nconst newdb = Database.deserialize(contents);\n```\n\nInternally, `.serialize()` calls [`sqlite3_serialize`](https://www.sqlite.org/c3ref/serialize.html).\n\n### `.query()`\n\nUse the `db.query()` method on your `Database` instance to [prepare](https://www.sqlite.org/c3ref/prepare.html) a SQL query. The result is a `Statement` instance that will be cached on the `Database` instance. _The query will not be executed._\n\n```ts\nconst query = db.query(`select \"Hello world\" as message`);\n```\n\n{% callout %}\n\n**Note** \u2014 Use the `.prepare()` method to prepare a query _without_ caching it on the `Database` instance.\n\n```ts\n// compile the prepared statement\nconst query = db.prepare(\"SELECT * FROM foo WHERE bar = ?\");\n```\n\n{% /callout %}\n\n## Statements\n\nA `Statement` is a _prepared query_, which means it's been parsed and compiled into an efficient binary form. It can be executed multiple times in a performant way.\n\nCreate a statement with the `.query` method on your `Database` instance.\n\n```ts\nconst query = db.query(`select \"Hello world\" as message`);\n```\n\nQueries can contain parameters. These can be numerical (`?1`) or named (`$param` or `:param` or `@param`).\n\n```ts\nconst query = db.query(`SELECT ?1, ?2;`);\nconst query = db.query(`SELECT $param1, $param2;`);\n```\n\nValues are bound to these parameters when the query is executed. A `Statement` can be executed with several different methods, each returning the results in a different form.\n\n### `.all()`\n\nUse `.all()` to run a query and get back the results as an array of objects.\n\n```ts\nconst query = db.query(`select $message;`);\nquery.all({ $message: \"Hello world\" });\n// => [{ message: \"Hello world\" }]\n```\n\nInternally, this calls [`sqlite3_reset`](https://www.sqlite.org/capi3ref.html#sqlite3_reset) and repeatedly calls [`sqlite3_step`](https://www.sqlite.org/capi3ref.html#sqlite3_step) until it returns `SQLITE_DONE`.\n\n### `.get()`\n\nUse `.get()` to run a query and get back the first result as an object.\n\n```ts\nconst query = db.query(`select $message;`);\nquery.get({ $message: \"Hello world\" });\n// => { $message: \"Hello world\" }\n```\n\nInternally, this calls [`sqlite3_reset`](https://www.sqlite.org/capi3ref.html#sqlite3_reset) followed by [`sqlite3_step`](https://www.sqlite.org/capi3ref.html#sqlite3_step) until it no longer returns `SQLITE_ROW`. If the query returns no rows, `undefined` is returned.\n\n### `.run()`\n\nUse `.run()` to run a query and get back `undefined`. This is useful for queries schema-modifying queries (e.g. `CREATE TABLE`) or bulk write operations.\n\n```ts\nconst query = db.query(`create table foo;`);\nquery.run();\n// => undefined\n```\n\nInternally, this calls [`sqlite3_reset`](https://www.sqlite.org/capi3ref.html#sqlite3_reset) and calls [`sqlite3_step`](https://www.sqlite.org/capi3ref.html#sqlite3_step) once. Stepping through all the rows is not necessary when you don't care about the results.\n\n### `.values()`\n\nUse `values()` to run a query and get back all results as an array of arrays.\n\n```ts\nconst query = db.query(`select $message;`);\nquery.values({ $message: \"Hello world\" });\n\nquery.values(2);\n// [\n//   [ \"Iron Man\", 2008 ],\n//   [ \"The Avengers\", 2012 ],\n//   [ \"Ant-Man: Quantumania\", 2023 ],\n// ]\n```\n\nInternally, this calls [`sqlite3_reset`](https://www.sqlite.org/capi3ref.html#sqlite3_reset) and repeatedly calls [`sqlite3_step`](https://www.sqlite.org/capi3ref.html#sqlite3_step) until it returns `SQLITE_DONE`.\n\n### `.finalize()`\n\nUse `.finalize()` to destroy a `Statement` and free any resources associated with it. Once finalized, a `Statement` cannot be executed again. Typically, the garbage collector will do this for you, but explicit finalization may be useful in performance-sensitive applications.\n\n```ts\nconst query = db.query(\"SELECT title, year FROM movies\");\nconst movies = query.all();\nquery.finalize();\n```\n\n### `.toString()`\n\nCalling `toString()` on a `Statement` instance prints the expanded SQL query. This is useful for debugging.\n\n```ts\nimport { Database } from \"bun:sqlite\";\n\n// setup\nconst query = db.query(\"SELECT $param;\");\n\nconsole.log(query.toString()); // => \"SELECT NULL\"\n\nquery.run(42);\nconsole.log(query.toString()); // => \"SELECT 42\"\n\nquery.run(365);\nconsole.log(query.toString()); // => \"SELECT 365\"\n```\n\nInternally, this calls [`sqlite3_expanded_sql`](https://www.sqlite.org/capi3ref.html#sqlite3_expanded_sql). The parameters are expanded using the most recently bound values.\n\n## Parameters\n\nQueries can contain parameters. These can be numerical (`?1`) or named (`$param` or `:param` or `@param`). Bind values to these parameters when executing the query:\n\n{% codetabs %}\n\n```ts#Query\nconst query = db.query(\"SELECT * FROM foo WHERE bar = $bar\");\nconst results = query.all({\n  $bar: \"bar\",\n});\n```\n\n```json#Results\n[\n  { \"$bar\": \"bar\" }\n]\n```\n\n{% /codetabs %}\n\nNumbered (positional) parameters work too:\n\n{% codetabs %}\n\n```ts#Query\nconst query = db.query(\"SELECT ?1, ?2\");\nconst results = query.all(\"hello\", \"goodbye\");\n```\n\n```ts#Results\n[\n  {\n    \"?1\": \"hello\",\n    \"?2\": \"goodbye\"\n  }\n]\n```\n\n{% /codetabs %}\n\n## Transactions\n\nTransactions are a mechanism for executing multiple queries in an _atomic_ way; that is, either all of the queries succeed or none of them do. Create a transaction with the `db.transaction()` method:\n\n```ts\nconst insertCat = db.prepare(\"INSERT INTO cats (name) VALUES ($name)\");\nconst insertCats = db.transaction(cats => {\n  for (const cat of cats) insertCat.run(cat);\n});\n```\n\nAt this stage, we haven't inserted any cats! The call to `db.transaction()` returns a new function (`insertCats`) that _wraps_ the function that executes the queries.\n\nTo execute the transaction, call this function. All arguments will be passed through to the wrapped function; the return value of the wrapped function will be returned by the transaction function. The wrapped function also has access to the `this` context as defined where the transaction is executed.\n\n```ts\nconst insert = db.prepare(\"INSERT INTO cats (name) VALUES ($name)\");\nconst insertCats = db.transaction(cats => {\n  for (const cat of cats) insert.run(cat);\n  return cats.length;\n});\n\nconst count = insertCats([\n  { $name: \"Keanu\" },\n  { $name: \"Salem\" },\n  { $name: \"Crookshanks\" },\n]);\n\nconsole.log(`Inserted ${count} cats`);\n```\n\nThe driver will automatically [`begin`](https://www.sqlite.org/lang_transaction.html) a transaction when `insertCats` is called and `commit` it when the wrapped function returns. If an exception is thrown, the transaction will be rolled back. The exception will propagate as usual; it is not caught.\n\n{% callout %}\n**Nested transactions** \u2014 Transaction functions can be called from inside other transaction functions. When doing so, the inner transaction becomes a [savepoint](https://www.sqlite.org/lang_savepoint.html).\n\n{% details summary=\"View nested transaction example\" %}\n\n```ts\n// setup\nimport { Database } from \"bun:sqlite\";\nconst db = Database.open(\":memory:\");\ndb.run(\n  \"CREATE TABLE expenses (id INTEGER PRIMARY KEY AUTOINCREMENT, note TEXT, dollars INTEGER);\",\n);\ndb.run(\n  \"CREATE TABLE cats (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT UNIQUE, age INTEGER)\",\n);\nconst insertExpense = db.prepare(\n  \"INSERT INTO expenses (note, dollars) VALUES (?, ?)\",\n);\nconst insert = db.prepare(\"INSERT INTO cats (name, age) VALUES ($name, $age)\");\nconst insertCats = db.transaction(cats => {\n  for (const cat of cats) insert.run(cat);\n});\n\nconst adopt = db.transaction(cats => {\n  insertExpense.run(\"adoption fees\", 20);\n  insertCats(cats); // nested transaction\n});\n\nadopt([\n  { $name: \"Joey\", $age: 2 },\n  { $name: \"Sally\", $age: 4 },\n  { $name: \"Junior\", $age: 1 },\n]);\n```\n\n{% /details %}\n{% /callout %}\n\nTransactions also come with `deferred`, `immediate`, and `exclusive` versions.\n\n```ts\ninsertCats(cats); // uses \"BEGIN\"\ninsertCats.deferred(cats); // uses \"BEGIN DEFERRED\"\ninsertCats.immediate(cats); // uses \"BEGIN IMMEDIATE\"\ninsertCats.exclusive(cats); // uses \"BEGIN EXCLUSIVE\"\n```\n\n### `.loadExtension()`\n\nTo load a [SQLite extension](https://www.sqlite.org/loadext.html), call `.loadExtension(name)` on your `Database` instance\n\n```ts\nimport { Database } from \"bun:sqlite\";\n\nconst db = new Database();\ndb.loadExtension(\"myext\");\n```\n\n{% details summary=\"For macOS users\" %}\n**MacOS users** By default, macOS ships with Apple's proprietary build of SQLite, which doesn't support extensions. To use extensions, you'll need to install a vanilla build of SQLite.\n\n```bash\n$ brew install sqlite\n$ which sqlite # get path to binary\n```\n\nTo point `bun:sqlite` to the new build, call `Database.setCustomSQLite(path)` before creating any `Database` instances. (On other operating systems, this is a no-op.) Pass a path to the SQLite `.dylib` file, _not_ the executable. With recent versions of Homebrew this is something like `/opt/homebrew/Cellar/sqlite/<version>/libsqlite3.dylib`.\n\n```ts\nimport { Database } from \"bun:sqlite\";\n\nDatabase.setCustomSQLite(\"/path/to/libsqlite.dylib\");\n\nconst db = new Database();\ndb.loadExtension(\"myext\");\n```\n\n{% /details %}\n\n## Reference\n\n```ts\nclass Database {\n  constructor(\n    filename: string,\n    options?:\n      | number\n      | {\n          readonly?: boolean;\n          create?: boolean;\n          readwrite?: boolean;\n        },\n  );\n\n  query<Params, ReturnType>(sql: string): Statement<Params, ReturnType>;\n}\n\nclass Statement<Params, ReturnType> {\n  all(params: Params): ReturnType[];\n  get(params: Params): ReturnType | undefined;\n  run(params: Params): void;\n  values(params: Params): unknown[][];\n\n  finalize(): void; // destroy statement and clean up resources\n  toString(): string; // serialize to SQL\n\n  columnNames: string[]; // the column names of the result set\n  paramsCount: number; // the number of parameters expected by the statement\n  native: any; // the native object representing the statement\n}\n\ntype SQLQueryBindings =\n  | string\n  | bigint\n  | TypedArray\n  | number\n  | boolean\n  | null\n  | Record<string, string | bigint | TypedArray | number | boolean | null>;\n```\n\n### Datatypes\n\n| JavaScript type | SQLite type            |\n| --------------- | ---------------------- |\n| `string`        | `TEXT`                 |\n| `number`        | `INTEGER` or `DECIMAL` |\n| `boolean`       | `INTEGER` (1 or 0)     |\n| `Uint8Array`    | `BLOB`                 |\n| `Buffer`        | `BLOB`                 |\n| `bigint`        | `INTEGER`              |\n| `null`          | `NULL`                 |\n"}
{"filename": "docs/api/streams.md", "content": "Streams are an important abstraction for working with binary data without loading it all into memory at once. They are commonly used for reading and writing files, sending and receiving network requests, and processing large amounts of data.\n\nBun implements the Web APIs [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) and [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream).\n\n{% callout %}\nBun also implements the `node:stream` module, including [`Readable`](https://nodejs.org/api/stream.html#stream_readable_streams), [`Writable`](https://nodejs.org/api/stream.html#stream_writable_streams), and [`Duplex`](https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams). For complete documentation, refer to the [Node.js docs](https://nodejs.org/api/stream.html).\n{% /callout %}\n\nTo create a simple `ReadableStream`:\n\n```ts\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"hello\");\n    controller.enqueue(\"world\");\n    controller.close();\n  },\n});\n```\n\nThe contents of a `ReadableStream` can be read chunk-by-chunk with `for await` syntax.\n\n```ts\nfor await (const chunk of stream) {\n  console.log(chunk);\n  // => \"hello\"\n  // => \"world\"\n}\n```\n\n## Direct `ReadableStream`\n\nBun implements an optimized version of `ReadableStream` that avoid unnecessary data copying & queue management logic. With a traditional `ReadableStream`, chunks of data are _enqueued_. Each chunk is copied into a queue, where it sits until the stream is ready to send more data.\n\n```ts\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"hello\");\n    controller.enqueue(\"world\");\n    controller.close();\n  },\n});\n```\n\nWith a direct `ReadableStream`, chunks of data are written directly to the stream. No queueing happens, and there's no need to clone the chunk data into memory. The `controller` API is updated to reflect this; instead of `.enqueue()` you call `.write`.\n\n```ts\nconst stream = new ReadableStream({\n  type: \"direct\",\n  pull(controller) {\n    controller.write(\"hello\");\n    controller.write(\"world\");\n  },\n});\n```\n\nWhen using a direct `ReadableStream`, all chunk queueing is handled by the destination. The consumer of the stream receives exactly what is passed to `controller.write()`, without any encoding or modification.\n\n## `Bun.ArrayBufferSink`\n\nThe `Bun.ArrayBufferSink` class is a fast incremental writer for constructing an `ArrayBuffer` of unknown size.\n\n```ts\nconst sink = new Bun.ArrayBufferSink();\n\nsink.write(\"h\");\nsink.write(\"e\");\nsink.write(\"l\");\nsink.write(\"l\");\nsink.write(\"o\");\n\nsink.end();\n// ArrayBuffer(5) [ 104, 101, 108, 108, 111 ]\n```\n\nTo instead retrieve the data as a `Uint8Array`, pass the `asUint8Array` option to the constructor.\n\n```ts-diff\nconst sink = new Bun.ArrayBufferSink({\n+ asUint8Array: true\n});\n\nsink.write(\"h\");\nsink.write(\"e\");\nsink.write(\"l\");\nsink.write(\"l\");\nsink.write(\"o\");\n\nsink.end();\n// Uint8Array(5) [ 104, 101, 108, 108, 111 ]\n```\n\nThe `.write()` method supports strings, typed arrays, `ArrayBuffer`, and `SharedArrayBuffer`.\n\n```ts\nsink.write(\"h\");\nsink.write(new Uint8Array([101, 108]));\nsink.write(Buffer.from(\"lo\").buffer);\n\nsink.end();\n```\n\nOnce `.end()` is called, no more data can be written to the `ArrayBufferSink`. However, in the context of buffering a stream, it's useful to continuously write data and periodically `.flush()` the contents (say, into a `WriteableStream`). To support this, pass `stream: true` to the constructor.\n\n```ts\nconst sink = new Bun.ArrayBufferSink({\n  stream: true,\n});\n\nsink.write(\"h\");\nsink.write(\"e\");\nsink.write(\"l\");\nsink.flush();\n// ArrayBuffer(5) [ 104, 101, 108 ]\n\nsink.write(\"l\");\nsink.write(\"o\");\nsink.flush();\n// ArrayBuffer(5) [ 108, 111 ]\n```\n\nThe `.flush()` method returns the buffered data as an `ArrayBuffer` (or `Uint8Array` if `asUint8Array: true`) and clears internal buffer.\n\nTo manually set the size of the internal buffer in bytes, pass a value for `highWaterMark`:\n\n```ts\nconst sink = new Bun.ArrayBufferSink({\n  highWaterMark: 1024 * 1024, // 1 MB\n});\n```\n\n{% details summary=\"Reference\" %}\n\n```ts\n/**\n * Fast incremental writer that becomes an `ArrayBuffer` on end().\n */\nexport class ArrayBufferSink {\n  constructor();\n\n  start(options?: {\n    asUint8Array?: boolean;\n    /**\n     * Preallocate an internal buffer of this size\n     * This can significantly improve performance when the chunk size is small\n     */\n    highWaterMark?: number;\n    /**\n     * On {@link ArrayBufferSink.flush}, return the written data as a `Uint8Array`.\n     * Writes will restart from the beginning of the buffer.\n     */\n    stream?: boolean;\n  }): void;\n\n  write(\n    chunk: string | ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\n  ): number;\n  /**\n   * Flush the internal buffer\n   *\n   * If {@link ArrayBufferSink.start} was passed a `stream` option, this will return a `ArrayBuffer`\n   * If {@link ArrayBufferSink.start} was passed a `stream` option and `asUint8Array`, this will return a `Uint8Array`\n   * Otherwise, this will return the number of bytes written since the last flush\n   *\n   * This API might change later to separate Uint8ArraySink and ArrayBufferSink\n   */\n  flush(): number | Uint8Array | ArrayBuffer;\n  end(): ArrayBuffer | Uint8Array;\n}\n```\n\n{% /details %}\n"}
{"filename": "docs/api/tcp.md", "content": "Use Bun's native TCP API to implement performance sensitive systems like database clients, game servers, or anything that needs to communicate over TCP (instead of HTTP). This is a low-level API intended for library authors and for advanced use cases.\n\n## Start a server (`Bun.listen()`)\n\nTo start a TCP server with `Bun.listen`:\n\n```ts\nBun.listen({\n  hostname: \"localhost\",\n  port: 8080,\n  socket: {\n    data(socket, data) {}, // message received from client\n    open(socket) {}, // socket opened\n    close(socket) {}, // socket closed\n    drain(socket) {}, // socket ready for more data\n    error(socket, error) {}, // error handler\n  },\n});\n```\n\n{% details summary=\"An API designed for speed\" %}\n\nIn Bun, a set of handlers are declared once per server instead of assigning callbacks to each socket, as with Node.js `EventEmitters` or the web-standard `WebSocket` API.\n\n```ts\nBun.listen({\n  hostname: \"localhost\",\n  port: 8080,\n  socket: {\n    open(socket) {},\n    data(socket, data) {},\n    drain(socket) {},\n    close(socket) {},\n    error(socket, error) {},\n  },\n});\n```\n\nFor performance-sensitive servers, assigning listeners to each socket can cause significant garbage collector pressure and increase memory usage. By contrast, Bun only allocates one handler function for each event and shares it among all sockets. This is a small optimization, but it adds up.\n\n{% /details %}\n\nContextual data can be attached to a socket in the `open` handler.\n\n```ts\ntype SocketData = { sessionId: string };\n\nBun.listen<SocketData>({\n  hostname: \"localhost\",\n  port: 8080,\n  socket: {\n    data(socket, data) {\n      socket.write(`${socket.data.sessionId}: ack`);\n    },\n    open(socket) {\n      socket.data = { sessionId: \"abcd\" };\n    },\n  },\n});\n```\n\nTo enable TLS, pass a `tls` object containing `key` and `cert` fields.\n\n```ts\nBun.listen({\n  hostname: \"localhost\",\n  port: 8080,\n  socket: {\n    data(socket, data) {},\n  },\n  tls: {\n    // can be string, BunFile, TypedArray, Buffer, or array thereof\n    key: Bun.file(\"./key.pem\"),\n    cert: Bun.file(\"./cert.pem\"),\n  },\n});\n```\n\n{% callout %}\n\n**Note** \u2014\u00a0Earlier versions of Bun supported passing a file path as `keyFile` and `certFile`; this has been deprecated as of `v0.6.3`.\n\n{% /callout %}\n\nThe `key` and `cert` fields expect the _contents_ of your TLS key and certificate. This can be a string, `BunFile`, `TypedArray`, or `Buffer`.\n\n```ts\nBun.listen({\n  // ...\n  tls: {\n    // BunFile\n    key: Bun.file(\"./key.pem\"),\n    // Buffer\n    key: fs.readFileSync(\"./key.pem\"),\n    // string\n    key: fs.readFileSync(\"./key.pem\", \"utf8\"),\n    // array of above\n    key: [Bun.file('./key1.pem'), Bun.file('./key2.pem')]\n  },\n});\n```\n\nThe result of `Bun.listen` is a server that conforms to the `TCPSocket` interface.\n\n```ts\nconst server = Bun.listen({\n  /* config*/\n});\n\n// stop listening\n// parameter determines whether active connections are closed\nserver.stop(true);\n\n// let Bun process exit even if server is still listening\nserver.unref();\n```\n\n## Create a connection (`Bun.connect()`)\n\nUse `Bun.connect` to connect to a TCP server. Specify the server to connect to with `hostname` and `port`. TCP clients can define the same set of handlers as `Bun.listen`, plus a couple client-specific handlers.\n\n```ts\n// The client\nconst socket = Bun.connect({\n  hostname: \"localhost\",\n  port: 8080,\n\n  socket: {\n    data(socket, data) {},\n    open(socket) {},\n    close(socket) {},\n    drain(socket) {},\n    error(socket, error) {},\n\n    // client-specific handlers\n    connectError(socket, error) {}, // connection failed\n    end(socket) {}, // connection closed by server\n    timeout(socket) {}, // connection timed out\n  },\n});\n```\n\nTo require TLS, specify `tls: true`.\n\n```ts\n// The client\nconst socket = Bun.connect({\n  // ... config\n  tls: true,\n});\n```\n\n## Hot reloading\n\nBoth TCP servers and sockets can be hot reloaded with new handlers.\n\n{% codetabs %}\n\n```ts#Server\nconst server = Bun.listen({ /* config */ })\n\n// reloads handlers for all active server-side sockets\nserver.reload({\n  socket: {\n    data(){\n      // new 'data' handler\n    }\n  }\n})\n```\n\n```ts#Client\nconst socket = Bun.connect({ /* config */ })\nsocket.reload({\n  data(){\n    // new 'data' handler\n  }\n})\n```\n\n{% /codetabs %}\n\n## Buffering\n\nCurrently, TCP sockets in Bun do not buffer data. For performance-sensitive code, it's important to consider buffering carefully. For example, this:\n\n```ts\nsocket.write(\"h\");\nsocket.write(\"e\");\nsocket.write(\"l\");\nsocket.write(\"l\");\nsocket.write(\"o\");\n```\n\n...performs significantly worse than this:\n\n```ts\nsocket.write(\"hello\");\n```\n\nTo simplify this for now, consider using Bun's `ArrayBufferSink` with the `{stream: true}` option:\n\n```ts\nconst sink = new ArrayBufferSink({ stream: true, highWaterMark: 1024 });\n\nsink.write(\"h\");\nsink.write(\"e\");\nsink.write(\"l\");\nsink.write(\"l\");\nsink.write(\"o\");\n\nqueueMicrotask(() => {\n  var data = sink.flush();\n  if (!socket.write(data)) {\n    // put it back in the sink if the socket is full\n    sink.write(data);\n  }\n});\n```\n\n{% callout %}\n**Corking** \u2014 Support for corking is planned, but in the meantime backpressure must be managed manually with the `drain` handler.\n{% /callout %}\n"}
{"filename": "docs/api/test.md", "content": "See the [`bun test`](/docs/cli/test) documentation.\n"}
{"filename": "docs/api/transpiler.md", "content": "Bun exposes its internal transpiler via the `Bun.Transpiler` class. To create an instance of Bun's transpiler:\n\n```ts\nconst transpiler = new Bun.Transpiler({\n  loader: \"tsx\", // \"js | \"jsx\" | \"ts\" | \"tsx\"\n});\n```\n\n## `.transformSync()`\n\nTranspile code synchronously with the `.transformSync()` method. Modules are not resolved and the code is not executed. The result is a string of vanilla JavaScript code.\n\n<!-- It is synchronous and runs in the same thread as other JavaScript code. -->\n\n{% codetabs %}\n\n```js#Example\nconst transpiler = new Bun.Transpiler({\n  loader: 'tsx',\n});\n\nconst code = `\nimport * as whatever from \"./whatever.ts\"\nexport function Home(props: {title: string}){\n  return <p>{props.title}</p>;\n}`;\n\nconst result = transpiler.transformSync(code);\n```\n\n```js#Result\nimport { __require as require } from \"bun:wrap\";\nimport * as JSX from \"react/jsx-dev-runtime\";\nvar jsx = require(JSX).jsxDEV;\n\nexport default jsx(\n  \"div\",\n  {\n    children: \"hi!\",\n  },\n  undefined,\n  false,\n  undefined,\n  this,\n);\n```\n\n{% /codetabs %}\n\nTo override the default loader specified in the `new Bun.Transpiler()` constructor, pass a second argument to `.transformSync()`.\n\n```ts\nawait transpiler.transform(\"<div>hi!</div>\", \"tsx\");\n```\n\n{% details summary=\"Nitty gritty\" %}\nWhen `.transformSync` is called, the transpiler is run in the same thread as the currently executed code.\n\nIf a macro is used, it will be run in the same thread as the transpiler, but in a separate event loop from the rest of your application. Currently, globals between macros and regular code are shared, which means it is possible (but not recommended) to share states between macros and regular code. Attempting to use AST nodes outside of a macro is undefined behavior.\n{% /details %}\n\n## `.transform()`\n\nThe `transform()` method is an async version of `.transformSync()` that returns a `Promise<string>`.\n\n```js\nconst transpiler = new Bun.Transpiler({ loader: \"jsx\" });\nconst result = await transpiler.transform(\"<div>hi!</div>\");\nconsole.log(result);\n```\n\nUnless you're transpiling _many_ large files, you should probably use `Bun.Transpiler.transformSync`. The cost of the threadpool will often take longer than actually transpiling code.\n\n```ts\nawait transpiler.transform(\"<div>hi!</div>\", \"tsx\");\n```\n\n{% details summary=\"Nitty gritty\" %}\nThe `.tranform()` method runs the transpiler in Bun's worker threadpool, so if you run it 100 times, it will run it across `Math.floor($cpu_count * 0.8)` threads, without blocking the main JavaScript thread.\n\nIf your code uses a macro, it will potentially spawn a new copy of Bun's JavaScript runtime environment in that new thread.\n{% /details %}\n\n## `.scan()`\n\nThe `Transpiler` instance can also scan some source code and return a list of its imports and exports, plus additional metadata about each one. [Type-only](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export) imports and exports are ignored.\n\n{% codetabs %}\n\n```ts#Example\nconst transpiler = new Bun.Transpiler({\n  loader: 'tsx',\n});\n\nconst code = `\nimport React from 'react';\nimport type {ReactNode} from 'react';\nconst val = require('./cjs.js')\nimport('./loader');\n\nexport const name = \"hello\";\n`;\n\nconst result = transpiler.scan(code);\n```\n\n```json#Output\n{\n  \"exports\": [\n    \"name\"\n  ],\n  \"imports\": [\n    {\n      \"kind\": \"import-statement\",\n      \"path\": \"react\"\n    },\n    {\n      \"kind\": \"import-statement\",\n      \"path\": \"remix\"\n    },\n    {\n      \"kind\": \"dynamic-import\",\n      \"path\": \"./loader\"\n    }\n  ]\n}\n```\n\n{% /codetabs %}\n\nEach import in the `imports` array has a `path` and `kind`. Bun categories imports into the following kinds:\n\n- `import-statement`: `import React from 'react'`\n- `require-call`: `const val = require('./cjs.js')`\n- `require-resolve`: `require.resolve('./cjs.js')`\n- `dynamic-import`: `import('./loader')`\n- `import-rule`: `@import 'foo.css'`\n- `url-token`: `url('./foo.png')`\n<!-- - `internal`: `import {foo} from 'bun:internal'`\n- `entry-point`: `import {foo} from 'bun:entry'` -->\n\n## `.scanImports()`\n\nFor performance-sensitive code, you can use the `.scanImports()` method to get a list of imports. It's faster than `.scan()` (especially for large files) but marginally less accurate due to some performance optimizations.\n\n{% codetabs %}\n\n```ts#Example\nconst transpiler = new Bun.Transpiler({\n  loader: 'tsx',\n});\n\nconst code = `\nimport React from 'react';\nimport type {ReactNode} from 'react';\nconst val = require('./cjs.js')\nimport('./loader');\n\nexport const name = \"hello\";\n`;\n\nconst result = transpiler.scanImports(code);\n`);\n```\n\n```json#Results\n[\n  {\n    kind: \"import-statement\",\n    path: \"react\"\n  }, {\n    kind: \"require-call\",\n    path: \"./cjs.js\"\n  }, {\n    kind: \"dynamic-import\",\n    path: \"./loader\"\n  }\n]\n```\n\n{% /codetabs %}\n\n## Reference\n\n```ts\ntype Loader = \"jsx\" | \"js\" | \"ts\" | \"tsx\";\n\ninterface TranspilerOptions {\n  // Replace key with value. Value must be a JSON string.\n  // { \"process.env.NODE_ENV\": \"\\\"production\\\"\" }\n  define?: Record<string, string>,\n\n  // Default loader for this transpiler\n  loader?: Loader,\n\n  // Default platform to target\n  // This affects how import and/or require is used\n  target?: \"browser\" | \"bun\" | \"node\",\n\n  // Specify a tsconfig.json file as stringified JSON or an object\n  // Use this to set a custom JSX factory, fragment, or import source\n  // For example, if you want to use Preact instead of React. Or if you want to use Emotion.\n  tsconfig?: string | TSConfig,\n\n  // Replace imports with macros\n  macro?: MacroMap,\n\n  // Specify a set of exports to eliminate\n  // Or rename certain exports\n  exports?: {\n      eliminate?: string[];\n      replace?: Record<string, string>;\n  },\n\n  // Whether to remove unused imports from transpiled file\n  // Default: false\n  trimUnusedImports?: boolean,\n\n  // Whether to enable a set of JSX optimizations\n  // jsxOptimizationInline ...,\n\n  // Experimental whitespace minification\n  minifyWhitespace?: boolean,\n\n  // Whether to inline constant values\n  // Typically improves performance and decreases bundle size\n  // Default: true\n  inline?: boolean,\n}\n\n// Map import paths to macros\ninterface MacroMap {\n  // {\n  //   \"react-relay\": {\n  //     \"graphql\": \"bun-macro-relay/bun-macro-relay.tsx\"\n  //   }\n  // }\n  [packagePath: string]: {\n    [importItemName: string]: string,\n  },\n}\n\nclass Bun.Transpiler {\n  constructor(options: TranspilerOptions)\n\n  transform(code: string, loader?: Loader): Promise<string>\n  transformSync(code: string, loader?: Loader): string\n\n  scan(code: string): {exports: string[], imports: Import}\n  scanImports(code: string): Import[]\n}\n\ntype Import = {\n  path: string,\n  kind:\n  // import foo from 'bar'; in JavaScript\n  | \"import-statement\"\n  // require(\"foo\") in JavaScript\n  | \"require-call\"\n  // require.resolve(\"foo\") in JavaScript\n  | \"require-resolve\"\n  // Dynamic import() in JavaScript\n  | \"dynamic-import\"\n  // @import() in CSS\n  | \"import-rule\"\n  // url() in CSS\n  | \"url-token\"\n  // The import was injected by Bun\n  | \"internal\"\u00a0\n  // Entry point (not common)\n  | \"entry-point\"\n}\n\nconst transpiler = new Bun.Transpiler({ loader: \"jsx\" });\n```\n"}
{"filename": "docs/api/utils.md", "content": "## `Bun.version`\n\nA `string` containing the version of the `bun` CLI that is currently running.\n\n```ts\nBun.version;\n// => \"0.6.4\"\n```\n\n## `Bun.revision`\n\nThe git commit of [Bun](https://github.com/oven-sh/bun) that was compiled to create the current `bun` CLI.\n\n```ts\nBun.revision;\n// => \"f02561530fda1ee9396f51c8bc99b38716e38296\"\n```\n\n## `Bun.env`\n\nAn alias for `process.env`.\n\n## `Bun.main`\n\nAn absolute path to the entrypoint of the current program (the file that was executed with `bun run`).\n\n```ts#script.ts\nBun.main;\n// /path/to/script.ts\n```\n\nThis is particular useful for determining whether a script is being directly executed, as opposed to being imported by another script.\n\n```ts\nif (import.meta.path === Bun.main) {\n  // this script is being directly executed\n} else {\n  // this file is being imported from another script\n}\n```\n\nThis is analogous to the [`require.main = module` trick](https://stackoverflow.com/questions/6398196/detect-if-called-through-require-or-directly-by-command-line) in Node.js.\n\n## `Bun.sleep()`\n\n`Bun.sleep(ms: number)` (added in Bun v0.5.6)\n\nReturns a `Promise` that resolves after the given number of milliseconds.\n\n```ts\nconsole.log(\"hello\");\nawait Bun.sleep(1000);\nconsole.log(\"hello one second later!\");\n```\n\nAlternatively, pass a `Date` object to receive a `Promise` that resolves at that point in time.\n\n```ts\nconst oneSecondInFuture = new Date(Date.now() + 1000);\n\nconsole.log(\"hello\");\nawait Bun.sleep(oneSecondInFuture);\nconsole.log(\"hello one second later!\");\n```\n\n## `Bun.sleepSync()`\n\n`Bun.sleepSync(ms: number)` (added in Bun v0.5.6)\n\nA blocking synchronous version of `Bun.sleep`.\n\n```ts\nconsole.log(\"hello\");\nBun.sleepSync(1000); // blocks thread for one second\nconsole.log(\"hello one second later!\");\n```\n\n## `Bun.which()`\n\n`Bun.which(bin: string)`\n\nReturns the path to an executable, similar to typing `which` in your terminal.\n\n```ts\nconst ls = Bun.which(\"ls\");\nconsole.log(ls); // \"/usr/bin/ls\"\n```\n\nBy default Bun looks at the current `PATH` environment variable to determine the path. To configure `PATH`:\n\n```ts\nconst ls = Bun.which(\"ls\", {\n  PATH: \"/usr/local/bin:/usr/bin:/bin\",\n});\nconsole.log(ls); // \"/usr/bin/ls\"\n```\n\nPass a `cwd` option to resolve for executable from within a specific directory.\n\n```ts\nconst ls = Bun.which(\"ls\", {\n  cwd: \"/tmp\",\n  PATH: \"\",\n});\n\nconsole.log(ls); // null\n```\n\n## `Bun.peek()`\n\n`Bun.peek(prom: Promise)` (added in Bun v0.2.2)\n\nReads a promise's result without `await` or `.then`, but only if the promise has already fulfilled or rejected.\n\n```ts\nimport { peek } from \"bun\";\n\nconst promise = Promise.resolve(\"hi\");\n\n// no await!\nconst result = peek(promise);\nconsole.log(result); // \"hi\"\n```\n\nThis is important when attempting to reduce number of extraneous microticks in performance-sensitive code. It's an advanced API and you probably shouldn't use it unless you know what you're doing.\n\n```ts\nimport { peek } from \"bun\";\nimport { expect, test } from \"bun:test\";\n\ntest(\"peek\", () => {\n  const promise = Promise.resolve(true);\n\n  // no await necessary!\n  expect(peek(promise)).toBe(true);\n\n  // if we peek again, it returns the same value\n  const again = peek(promise);\n  expect(again).toBe(true);\n\n  // if we peek a non-promise, it returns the value\n  const value = peek(42);\n  expect(value).toBe(42);\n\n  // if we peek a pending promise, it returns the promise again\n  const pending = new Promise(() => {});\n  expect(peek(pending)).toBe(pending);\n\n  // If we peek a rejected promise, it:\n  // - returns the error\n  // - does not mark the promise as handled\n  const rejected = Promise.reject(\n    new Error(\"Successfully tested promise rejection\"),\n  );\n  expect(peek(rejected).message).toBe(\"Successfully tested promise rejection\");\n});\n```\n\nThe `peek.status` function lets you read the status of a promise without resolving it.\n\n```ts\nimport { peek } from \"bun\";\nimport { expect, test } from \"bun:test\";\n\ntest(\"peek.status\", () => {\n  const promise = Promise.resolve(true);\n  expect(peek.status(promise)).toBe(\"fulfilled\");\n\n  const pending = new Promise(() => {});\n  expect(peek.status(pending)).toBe(\"pending\");\n\n  const rejected = Promise.reject(new Error(\"oh nooo\"));\n  expect(peek.status(rejected)).toBe(\"rejected\");\n});\n```\n\n## `Bun.openInEditor()`\n\nOpens a file in your default editor. Bun auto-detects your editor via the `$VISUAL` or `$EDITOR` environment variables.\n\n```ts\nconst currentFile = import.meta.url;\nBun.openInEditor(currentFile);\n```\n\nYou can override this via the `debug.editor` setting in your [`bunfig.toml`](/docs/runtime/configuration)\n\n```toml-diff#bunfig.toml\n+ [debug]\n+ editor = \"code\"\n```\n\nOr specify an editor with the `editor` param. You can also specify a line and column number.\n\n```ts\nBun.openInEditor(import.meta.url, {\n  editor: \"vscode\", // or \"subl\"\n  line: 10,\n  column: 5,\n});\n```\n\nBun.ArrayBufferSink;\n\n## `Bun.deepEquals()`\n\nNestedly checks if two objects are equivalent. This is used internally by `expect().toEqual()` in `bun:test`.\n\n```ts\nconst foo = { a: 1, b: 2, c: { d: 3 } };\n\n// true\nBun.deepEquals(foo, { a: 1, b: 2, c: { d: 3 } });\n\n// false\nBun.deepEquals(foo, { a: 1, b: 2, c: { d: 4 } });\n```\n\nA third boolean parameter can be used to enable \"strict\" mode. This is used by `expect().toStrictEqual()` in the test runner.\n\n```ts\nconst a = { entries: [1, 2] };\nconst b = { entries: [1, 2], extra: undefined };\n\nBun.deepEquals(a, b); // => true\nBun.deepEquals(a, b, true); // => false\n```\n\nIn strict mode, the following are considered unequal:\n\n```ts\n// undefined values\nBun.deepEquals({}, { a: undefined }, true); // false\n\n// undefined in arrays\nBun.deepEquals([\"asdf\"], [\"asdf\", undefined], true); // false\n\n// sparse arrays\nBun.deepEquals([, 1], [undefined, 1], true); // false\n\n// object literals vs instances w/ same properties\nclass Foo {\n  a = 1;\n}\nBun.deepEquals(new Foo(), { a: 1 }, true); // false\n```\n\n## `Bun.escapeHTML()`\n\n`Bun.escapeHTML(value: string | object | number | boolean): string`\n\nEscapes the following characters from an input string:\n\n- `\"` becomes `\"&quot;\"`\n- `&` becomes `\"&amp;\"`\n- `'` becomes `\"&#x27;\"`\n- `<` becomes `\"&lt;\"`\n- `>` becomes `\"&gt;\"`\n\nThis function is optimized for large input. On an M1X, it processes 480 MB/s -\n20 GB/s, depending on how much data is being escaped and whether there is non-ascii\ntext. Non-string types will be converted to a string before escaping.\n\n<!-- ## `Bun.enableANSIColors()` -->\n\n## `Bun.fileURLToPath()`\n\nConverts a `file://` URL to an absolute path.\n\n```ts\nconst path = Bun.fileURLToPath(new URL(\"file:///foo/bar.txt\"));\nconsole.log(path); // \"/foo/bar.txt\"\n```\n\n## `Bun.pathToFileURL()`\n\nConverts an absolute path to a `file://` URL.\n\n```ts\nconst url = Bun.pathToFileURL(\"/foo/bar.txt\");\nconsole.log(url); // \"file:///foo/bar.txt\"\n```\n\n<!-- Bun.hash; -->\n\n## `Bun.gzipSync()`\n\nCompresses a `Uint8Array` using zlib's GZIP algorithm.\n\n```ts\nconst buf = Buffer.from(\"hello\".repeat(100)); // Buffer extends Uint8Array\nconst compressed = Bun.gzipSync(buf);\n\nbuf; // => Uint8Array(500)\ncompressed; // => Uint8Array(30)\n```\n\nOptionally, pass a parameters object as the second argument:\n\n{% details summary=\"zlib compression options\"%}\n\n```ts\nexport type ZlibCompressionOptions = {\n  /**\n   * The compression level to use. Must be between `-1` and `9`.\n   * - A value of `-1` uses the default compression level (Currently `6`)\n   * - A value of `0` gives no compression\n   * - A value of `1` gives least compression, fastest speed\n   * - A value of `9` gives best compression, slowest speed\n   */\n  level?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\n  /**\n   * How much memory should be allocated for the internal compression state.\n   *\n   * A value of `1` uses minimum memory but is slow and reduces compression ratio.\n   *\n   * A value of `9` uses maximum memory for optimal speed. The default is `8`.\n   */\n  memLevel?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\n  /**\n   * The base 2 logarithm of the window size (the size of the history buffer).\n   *\n   * Larger values of this parameter result in better compression at the expense of memory usage.\n   *\n   * The following value ranges are supported:\n   * - `9..15`: The output will have a zlib header and footer (Deflate)\n   * - `-9..-15`: The output will **not** have a zlib header or footer (Raw Deflate)\n   * - `25..31` (16+`9..15`): The output will have a gzip header and footer (gzip)\n   *\n   * The gzip header will have no file name, no extra data, no comment, no modification time (set to zero) and no header CRC.\n   */\n  windowBits?:\n    | -9\n    | -10\n    | -11\n    | -12\n    | -13\n    | -14\n    | -15\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 25\n    | 26\n    | 27\n    | 28\n    | 29\n    | 30\n    | 31;\n  /**\n   * Tunes the compression algorithm.\n   *\n   * - `Z_DEFAULT_STRATEGY`: For normal data **(Default)**\n   * - `Z_FILTERED`: For data produced by a filter or predictor\n   * - `Z_HUFFMAN_ONLY`: Force Huffman encoding only (no string match)\n   * - `Z_RLE`: Limit match distances to one (run-length encoding)\n   * - `Z_FIXED` prevents the use of dynamic Huffman codes\n   *\n   * `Z_RLE` is designed to be almost as fast as `Z_HUFFMAN_ONLY`, but give better compression for PNG image data.\n   *\n   * `Z_FILTERED` forces more Huffman coding and less string matching, it is\n   * somewhat intermediate between `Z_DEFAULT_STRATEGY` and `Z_HUFFMAN_ONLY`.\n   * Filtered data consists mostly of small values with a somewhat random distribution.\n   */\n  strategy?: number;\n};\n```\n\n{% /details %}\n\n## `Bun.gunzipSync()`\n\nDecompresses a `Uint8Array` using zlib's GUNZIP algorithm.\n\n```ts\nconst buf = Buffer.from(\"hello\".repeat(100)); // Buffer extends Uint8Array\nconst compressed = Bun.gunzipSync(buf);\n\nconst dec = new TextDecoder();\nconst uncompressed = Bun.inflateSync(compressed);\ndec.decode(uncompressed);\n// => \"hellohellohello...\"\n```\n\n## `Bun.deflateSync()`\n\nCompresses a `Uint8Array` using zlib's DEFLATE algorithm.\n\n```ts\nconst buf = Buffer.from(\"hello\".repeat(100));\nconst compressed = Bun.deflateSync(buf);\n\nbuf; // => Uint8Array(25)\ncompressed; // => Uint8Array(10)\n```\n\nThe second argument supports the same set of configuration options as [`Bun.gzipSync`](#bun.gzipSync).\n\n## `Bun.inflateSync()`\n\nDecompresses a `Uint8Array` using zlib's INFLATE algorithm.\n\n```ts\nconst buf = Buffer.from(\"hello\".repeat(100));\nconst compressed = Bun.deflateSync(buf);\n\nconst dec = new TextDecoder();\nconst decompressed = Bun.inflateSync(compressed);\ndec.decode(decompressed);\n// => \"hellohellohello...\"\n```\n\n## `Bun.inspect()`\n\nSerializes an object to a `string` exactly as it would be printed by `console.log`.\n\n```ts\nconst obj = { foo: \"bar\" };\nconst str = Bun.inspect(obj);\n// => '{\\nfoo: \"bar\" \\n}'\n\nconst arr = new Uint8Array([1, 2, 3]);\nconst str = Bun.inspect(arr);\n// => \"Uint8Array(3) [ 1, 2, 3 ]\"\n```\n\n## `Bun.inspect.custom`\n\nThis is the symbol that Bun uses to implement `Bun.inspect`. You can override this to customize how your objects are printed. It is identical to `util.inspect.custom` in Node.js.\n\n```ts\nclass Foo {\n  [Bun.inspect.custom]() {\n    return \"foo\";\n  }\n}\n\nconst foo = new Foo();\nconsole.log(foo); // => \"foo\"\n```\n\n## `Bun.nanoseconds()`\n\nReturns the number of nanoseconds since the current `bun` process started, as a `number`. Useful for high-precision timing and benchmarking.\n\n```ts\nBun.nanoseconds();\n// => 7288958\n```\n\n## `Bun.readableStreamTo*()`\n\nBun implements a set of convenience functions for asynchronously consuming the body of a `ReadableStream` and converting it to various binary formats.\n\n```ts\nconst stream = (await fetch(\"https://bun.sh\")).body;\nstream; // => ReadableStream\n\nawait Bun.readableStreamToArrayBuffer(stream);\n// => ArrayBuffer\n\nawait Bun.readableStreamToBlob(stream);\n// => Blob\n\nawait Bun.readableStreamToJSON(stream);\n// => object\n\nawait Bun.readableStreamToText(stream);\n// => string\n\n// returns all chunks as an array\nawait Bun.readableStreamToArray(stream);\n// => unknown[]\n\n// returns all chunks as a FormData object (encoded as x-www-form-urlencoded)\nawait Bun.readableStreamToFormData(stream);\n\n// returns all chunks as a FormData object (encoded as multipart/form-data)\nawait Bun.readableStreamToFormData(stream, multipartFormBoundary);\n```\n\n## `Bun.resolveSync()`\n\nResolves a file path or module specifier using Bun's internal module resolution algorithm. The first argument is the path to resolve, and the second argument is the \"root\". If no match is found, an `Error` is thrown.\n\n```ts\nBun.resolveSync(\"./foo.ts\", \"/path/to/project\");\n// => \"/path/to/project/foo.ts\"\n\nBun.resolveSync(\"zod\", \"/path/to/project\");\n// => \"/path/to/project/node_modules/zod/index.ts\"\n```\n\nTo resolve relative to the current working directory, pass `process.cwd` or `\".\"` as the root.\n\n```ts\nBun.resolveSync(\"./foo.ts\", process.cwd());\nBun.resolveSync(\"./foo.ts\", \"/path/to/project\");\n```\n\nTo resolve relative to the directory containing the current file, pass `import.meta.dir`.\n\n```ts\nBun.resolveSync(\"./foo.ts\", import.meta.dir);\n```\n\n## `serialize` & `deserialize` in `bun:jsc`\n\nTo save a JavaScript value into an ArrayBuffer & back, use `serialize` and `deserialize` from the `\"bun:jsc\"` module.\n\n```js\nimport { serialize, deserialize } from \"bun:jsc\";\n\nconst buf = serialize({ foo: \"bar\" });\nconst obj = deserialize(buf);\nconsole.log(obj); // => { foo: \"bar\" }\n```\n\nInternally, [`structuredClone`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) and [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) serialize and deserialize the same way. This exposes the underlying [HTML Structured Clone Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) to JavaScript as an ArrayBuffer.\n"}
{"filename": "docs/api/websockets.md", "content": "`Bun.serve()` supports server-side WebSockets, with on-the-fly compression, TLS support, and a Bun-native publish-subscribe API.\n\n{% callout %}\n\n**\u26a1\ufe0f 7x more throughput** \u2014 Bun's WebSockets are fast. For a [simple chatroom](https://github.com/oven-sh/bun/tree/main/bench/websocket-server/README.md) on Linux x64, Bun can handle 7x more requests per second than Node.js + [`\"ws\"`](https://github.com/websockets/ws).\n\n| Messages sent per second | Runtime                        | Clients |\n| ------------------------ | ------------------------------ | ------- |\n| ~700,000                 | (`Bun.serve`) Bun v0.2.1 (x64) | 16      |\n| ~100,000                 | (`ws`) Node v18.10.0 (x64)     | 16      |\n\nInternally Bun's WebSocket implementation is built on [uWebSockets](https://github.com/uNetworking/uWebSockets).\n{% /callout %}\n\n## Start a WebSocket server\n\nBelow is a simple WebSocket server built with `Bun.serve`, in which all incoming requests are [upgraded](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism) to WebSocket connections in the `fetch` handler. The socket handlers are declared in the `websocket` parameter.\n\n```ts\nBun.serve({\n  fetch(req, server) {\n    // upgrade the request to a WebSocket\n    if (server.upgrade(req)) {\n      return; // do not return a Response\n    }\n    return new Response(\"Upgrade failed :(\", { status: 500 });\n  },\n  websocket: {}, // handlers\n});\n```\n\nThe following WebSocket event handlers are supported:\n\n```ts\nBun.serve({\n  fetch(req, server) {}, // upgrade logic\n  websocket: {\n    message(ws, message) {}, // a message is received\n    open(ws) {}, // a socket is opened\n    close(ws, code, message) {}, // a socket is closed\n    drain(ws) {}, // the socket is ready to receive more data\n  },\n});\n```\n\n{% details summary=\"An API designed for speed\" %}\n\nIn Bun, handlers are declared once per server, instead of per socket.\n\n`ServerWebSocket` expects you to pass a `WebSocketHandler` object to the `Bun.serve()` method which has methods for `open`, `message`, `close`, `drain`, and `error`. This is different than the client-side `WebSocket` class which extends `EventTarget` (onmessage, onopen, onclose),\n\nClients tend to not have many socket connections open so an event-based API makes sense.\n\nBut servers tend to have **many** socket connections open, which means:\n\n- Time spent adding/removing event listeners for each connection adds up\n- Extra memory spent on storing references to callbacks function for each connection\n- Usually, people create new functions for each connection, which also means more memory\n\nSo, instead of using an event-based API, `ServerWebSocket` expects you to pass a single object with methods for each event in `Bun.serve()` and it is reused for each connection.\n\nThis leads to less memory usage and less time spent adding/removing event listeners.\n{% /details %}\n\nThe first argument to each handler is the instance of `ServerWebSocket` handling the event. The `ServerWebSocket` class is a fast, Bun-native implementation of [`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) with some additional features.\n\n```ts\nBun.serve({\n  fetch(req, server) {}, // upgrade logic\n  websocket: {\n    message(ws, message) {\n      ws.send(message); // echo back the message\n    },\n  },\n});\n```\n\n### Sending messages\n\nEach `ServerWebSocket` instance has a `.send()` method for sending messages to the client. It supports a range of input types.\n\n```ts\nws.send(\"Hello world\"); // string\nws.send(response.arrayBuffer()); // ArrayBuffer\nws.send(new Uint8Array([1, 2, 3])); // TypedArray | DataView\n```\n\n### Headers\n\nOnce the upgrade succeeds, Bun will send a `101 Switching Protocols` response per the [spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism). Additional `headers` can be attched to this `Response` in the call to `server.upgrade()`.\n\n```ts\nBun.serve({\n  fetch(req, server) {\n    const sessionId = await generateSessionId();\n    server.upgrade(req, {\n      headers: {\n        \"Set-Cookie\": `SessionId=${sessionId}`,\n      },\n    });\n  },\n  websocket: {}, // handlers\n});\n```\n\n### Contextual data\n\nContextual `data` can be attached to a new WebSocket in the `.upgrade()` call. This data is made available on the `ws.data` property inside the WebSocket handlers.\n\n```ts\ntype WebSocketData = {\n  createdAt: number;\n  channelId: string;\n  authToken: string;\n};\n\n// TypeScript: specify the type of `data`\nBun.serve<WebSocketData>({\n  fetch(req, server) {\n    // use a library to parse cookies\n    const cookies = parseCookies(req.headers.get(\"Cookie\"));\n    server.upgrade(req, {\n      // this object must conform to WebSocketData\n      data: {\n        createdAt: Date.now(),\n        channelId: new URL(req.url).searchParams.get(\"channelId\"),\n        authToken: cookies[\"X-Token\"],\n      },\n    });\n\n    return undefined;\n  },\n  websocket: {\n    // handler called when a message is received\n    async message(ws, message) {\n      const user = getUserFromToken(ws.data.authToken);\n\n      await saveMessageToDatabase({\n        channel: ws.data.channelId,\n        message: String(message),\n        userId: user.id,\n      });\n    },\n  },\n});\n```\n\nTo connect to this server from the browser, create a new `WebSocket`.\n\n```ts#browser.js\nconst socket = new WebSocket(\"ws://localhost:3000/chat\");\n\nsocket.addEventListener(\"message\", event => {\n  console.log(event.data);\n})\n```\n\n{% callout %}\n**Identifying users** \u2014\u00a0The cookies that are currently set on the page will be sent with the WebSocket upgrade request and available on `req.headers` in the `fetch` handler. Parse these cookies to determine the identity of the connecting user and set the value of `data` accordingly.\n{% /callout %}\n\n### Pub/Sub\n\nBun's `ServerWebSocket` implementation implements a native publish-subscribe API for topic-based broadcasting. Individual sockets can `.subscribe()` to a topic (specified with a string identifier) and `.publish()` messages to all other subscribers to that topic. This topic-based broadcast API is similar to [MQTT](https://en.wikipedia.org/wiki/MQTT) and [Redis Pub/Sub](https://redis.io/topics/pubsub).\n\n```ts\nconst server = Bun.serve<{ username: string }>({\n  fetch(req, server) {\n    const url = new URL(req.url);\n    if (url.pathname === \"/chat\") {\n      console.log(`upgrade!`);\n      const username = getUsernameFromReq(req);\n      const success = server.upgrade(req, { data: { username } });\n      return success\n        ? undefined\n        : new Response(\"WebSocket upgrade error\", { status: 400 });\n    }\n\n    return new Response(\"Hello world\");\n  },\n  websocket: {\n    open(ws) {\n      const msg = `${ws.data.username} has entered the chat`;\n      ws.subscribe(\"the-group-chat\");\n      ws.publish(\"the-group-chat\", msg);\n    },\n    message(ws, message) {\n      // this is a group chat\n      // so the server re-broadcasts incoming message to everyone\n      ws.publish(\"the-group-chat\", `${ws.data.username}: ${message}`);\n    },\n    close(ws) {\n      const msg = `${ws.data.username} has left the chat`;\n      ws.unsubscribe(\"the-group-chat\");\n      ws.publish(\"the-group-chat\", msg);\n    },\n  },\n});\n\nconsole.log(`Listening on ${server.hostname}:${server.port}`);\n```\n\nCalling `.publish(data)` will send the message to all subscribers of a topic _except_ the socket that called `.publish()`.\n\n### Compression\n\nPer-message [compression](https://websockets.readthedocs.io/en/stable/topics/compression.html) can be enabled with the `perMessageDeflate` parameter.\n\n```ts\nBun.serve({\n  fetch(req, server) {}, // upgrade logic\n  websocket: {\n    // enable compression and decompression\n    perMessageDeflate: true,\n  },\n});\n```\n\nCompression can be enabled for individual messages by passing a `boolean` as the second argument to `.send()`.\n\n```ts\nws.send(\"Hello world\", true);\n```\n\nFor fine-grained control over compression characteristics, refer to the [Reference](#reference).\n\n### Backpressure\n\nThe `.send(message)` method of `ServerWebSocket` returns a `number` indicating the result of the operation.\n\n- `-1` \u2014 The message was enqueued but there is backpressure\n- `0` \u2014 The message was dropped due to a connection issue\n- `1+` \u2014 The number of bytes sent\n\nThis gives you better control over backpressure in your server.\n\n## Connect to a `Websocket` server\n\nTo connect to an external socket server, either from a browser or from Bun, create an instance of `WebSocket` with the constructor.\n\n```ts\nconst socket = new WebSocket(\"ws://localhost:3000\");\n```\n\nIn browsers, the cookies that are currently set on the page will be sent with the WebSocket upgrade request. This is a standard feature of the `WebSocket` API.\n\nFor convenience, Bun lets you setting custom headers directly in the constructor. This is a Bun-specific extension of the `WebSocket` standard. _This will not work in browsers._\n\n```ts\nconst socket = new WebSocket(\"ws://localhost:3000\", {\n  headers: {\n    // custom headers\n  },\n});\n```\n\nTo add event listeners to the socket:\n\n```ts\n// message is received\nsocket.addEventListener(\"message\", event => {});\n\n// socket opened\nsocket.addEventListener(\"open\", event => {});\n\n// socket closed\nsocket.addEventListener(\"close\", event => {});\n\n// error handler\nsocket.addEventListener(\"error\", event => {});\n```\n\n## Reference\n\n```ts\nnamespace Bun {\n  export function serve(params: {\n    fetch: (req: Request, server: Server) => Response | Promise<Response>;\n    websocket?: {\n      message: (\n        ws: ServerWebSocket,\n        message: string | ArrayBuffer | Uint8Array,\n      ) => void;\n      open?: (ws: ServerWebSocket) => void;\n      close?: (ws: ServerWebSocket) => void;\n      error?: (ws: ServerWebSocket, error: Error) => void;\n      drain?: (ws: ServerWebSocket) => void;\n      perMessageDeflate?:\n        | boolean\n        | {\n            compress?: boolean | Compressor;\n            decompress?: boolean | Compressor;\n          };\n    };\n  }): Server;\n}\n\ntype Compressor =\n  | `\"disable\"`\n  | `\"shared\"`\n  | `\"dedicated\"`\n  | `\"3KB\"`\n  | `\"4KB\"`\n  | `\"8KB\"`\n  | `\"16KB\"`\n  | `\"32KB\"`\n  | `\"64KB\"`\n  | `\"128KB\"`\n  | `\"256KB\"`;\n\ninterface Server {\n  pendingWebsockets: number;\n  publish(\n    topic: string,\n    data: string | ArrayBufferView | ArrayBuffer,\n    compress?: boolean,\n  ): number;\n  upgrade(\n    req: Request,\n    options?: {\n      headers?: HeadersInit;\n      data?: any;\n    },\n  ): boolean;\n}\n\ninterface ServerWebSocket {\n  readonly data: any;\n  readonly readyState: number;\n  readonly remoteAddress: string;\n  send(message: string | ArrayBuffer | Uint8Array, compress?: boolean): number;\n  close(code?: number, reason?: string): void;\n  subscribe(topic: string): void;\n  unsubscribe(topic: string): void;\n  publish(topic: string, message: string | ArrayBuffer | Uint8Array): void;\n  isSubscribed(topic: string): boolean;\n  cork(cb: (ws: ServerWebSocket) => void): void;\n}\n```\n\n<!--\n### `Bun.serve(params)`\n\n{% param name=\"params\" %}\nConfiguration object for WebSocket server\n{% /param %}\n\n{% param name=\" fetch\" %}\n`(req: Request, server: Server) => Response | Promise<Response>`\n\nCall `server.upgrade(req)` to upgrade the request to a WebSocket connection. This method returns `true` if the upgrade succeeds, or `false` if the upgrade fails.\n{% /param %}\n\n{% param name=\" websocket\" %}\nConfiguration object for WebSocket server\n{% /param %}\n\n{% param name=\"  message\" %}\n`(ws: ServerWebSocket, message: string | ArrayBuffer | Uint8Array) => void`\n\nThis handler is called when a `WebSocket` receives a message.\n{% /param %}\n\n{% param name=\"  open\" %}\n`(ws: ServerWebSocket) => void`\n\nThis handler is called when a `WebSocket` is opened.\n{% /param %}\n\n{% param name=\"  close\" %}\n`(ws: ServerWebSocket, code: number, message: string) => void`\n\nThis handler is called when a `WebSocket` is closed.\n{% /param %}\n\n{% param name=\"  drain\" %}\n`(ws: ServerWebSocket) => void`\n\nThis handler is called when a `WebSocket` is ready to receive more data.\n{% /param %}\n\n{% param name=\"  perMessageDeflate\" %}\n`boolean | {\\n  compress?: boolean | Compressor;\\n  decompress?: boolean | Compressor \\n}`\n\nEnable per-message compression and decompression. This is a boolean value or an object with `compress` and `decompress` properties. Each property can be a boolean value or one of the following `Compressor` types:\n\n- `\"disable\"`\n- `\"shared\"`\n- `\"dedicated\"`\n- `\"3KB\"`\n- `\"4KB\"`\n- `\"8KB\"`\n- `\"16KB\"`\n- `\"32KB\"`\n- `\"64KB\"`\n- `\"128KB\"`\n- `\"256KB\"`\n\n{% /param %}\n\n### `ServerWebSocket`\n\n{% param name=\"readyState\" %}\n`number`\n\nThe current state of the `WebSocket` connection. This is one of the following values:\n\n- `0` `CONNECTING`\n- `1` `OPEN`\n- `2` `CLOSING`\n- `3` `CLOSED`\n\n{% /param %}\n\n{% param name=\"remoteAddress\" %}\n\n`string`\n\nThe remote address of the `WebSocket` connection\n{% /param %}\n\n{% param name=\"data\" %}\nThe data associated with the `WebSocket` connection. This is set in the `server.upgrade()` call.\n{% /param %}\n\n{% param name=\".send()\" %}\n`send(message: string | ArrayBuffer | Uint8Array, compress?: boolean): number`\n\nSend a message to the client. Returns a `number` indicating the result of the operation.\n\n- `-1`: the message was enqueued but there is backpressure\n- `0`: the message was dropped due to a connection issue\n- `1+`: the number of bytes sent\n\nThe `compress` argument will enable compression for this message, even if the `perMessageDeflate` option is disabled.\n{% /param %}\n\n{% param name=\".subscribe()\" %}\n`subscribe(topic: string): void`\n\nSubscribe to a topic\n{% /param %}\n\n{% param name=\".unsubscribe()\" %}\n`unsubscribe(topic: string): void`\n\nUnsubscribe from a topic\n{% /param %}\n\n{% param name=\".publish()\" %}\n`publish(topic: string, data: string | ArrayBufferView | ArrayBuffer, compress?: boolean): number;`\n\nSend a message to all subscribers of a topic\n{% /param %}\n\n{% param name=\".isSubscribed()\" %}\n`isSubscribed(topic: string): boolean`\n\nCheck if the `WebSocket` is subscribed to a topic\n{% /param %}\n{% param name=\".cork()\" %}\n`cork(cb: (ws: ServerWebSocket) => void): void;`\n\nBatch a set of operations on a `WebSocket` connection. The `message`, `open`, and `drain` callbacks are automatically corked, so\nyou only need to call this if you are sending messages outside of those\ncallbacks or in async functions.\n\n```ts\nws.cork((ws) => {\n  ws.send(\"first\");\n  ws.send(\"second\");\n  ws.send(\"third\");\n});\n```\n\n{% /param %}\n\n{% param name=\".close()\" %}\n`close(code?: number, message?: string): void`\n\nClose the `WebSocket` connection\n{% /param %}\n\n### `Server`\n\n{% param name=\"pendingWebsockets\" %}\nNumber of in-flight `WebSocket` messages\n{% /param %}\n\n{% param name=\".publish()\" %}\n`publish(topic: string, data: string | ArrayBufferView | ArrayBuffer, compress?: boolean): number;`\n\nSend a message to all subscribers of a topic\n{% /param %}\n\n{% param name=\".upgrade()\" %}\n`upgrade(req: Request): boolean`\n\nUpgrade a request to a `WebSocket` connection. Returns `true` if the upgrade succeeds, or `false` if the upgrade fails.\n{% /param %} -->\n"}
{"filename": "docs/api/workers.md", "content": "{% callout %}\n`Worker` support was added in Bun v0.7.0.\n{% /callout %}\n\n[`Worker`](https://developer.mozilla.org/en-US/docs/Web/API/Worker) lets you start and communicate with a new JavaScript instance running on a separate thread while sharing I/O resources with the main thread.\n\nBun implements a minimal version of the [Web Workers API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) with extensions that make it work better for server-side use cases. Like the rest of Bun, `Worker` in Bun support CommonJS, ES Modules, TypeScript, JSX, TSX and more out of the box. No extra build steps are necessary.\n\n## Creating a `Worker`\n\nLike in browsers, [`Worker`](https://developer.mozilla.org/en-US/docs/Web/API/Worker) is a global. Use it to create a new worker thread.\n\nFrom the main thread:\n\n```js#Main_thread\nconst workerURL = new URL(\"worker.ts\", import.meta.url).href;\nconst worker = new Worker(workerURL);\n\nworker.postMessage(\"hello\");\nworker.onmessage = event => {\n  console.log(event.data);\n};\n```\n\nWorker thread:\n\n```ts#worker.ts_(Worker_thread)\nself.onmessage = (event: MessageEvent) => {\n  console.log(event.data);\n  postMessage(\"world\");\n};\n```\n\nYou can use `import`/`export` syntax in your worker code. Unlike in browsers, there's no need to specify `{type: \"module\"}` to use ES Modules.\n\nTo simplify error handling, the initial script to load is resolved at the time `new Worker(url)` is called.\n\n```js\nconst worker = new Worker(\"/not-found.js\");\n// throws an error immediately\n```\n\nThe specifier passed to `Worker` is resolved relative to the project root (like typing `bun ./path/to/file.js`).\n\n### `\"open\"`\n\nThe `\"open\"` event is emitted when a worker is created and ready to receive messages. This can be used to send an initial message to a worker once it's ready. (This event does not exist in browsers.)\n\n```ts\nconst worker = new Worker(new URL(\"worker.ts\", import.meta.url).href);\n\nworker.addEventListener(\"open\", () => {\n  console.log(\"worker is ready\");\n});\n```\n\nMessages are automatically enqueued until the worker is ready, so there is no need to wait for the `\"open\"` event to send messages.\n\n## Messages with `postMessage`\n\nTo send messages, use [`worker.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage) and [`self.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage). This leverages the [HTML Structured Clone Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n\n```js\n// On the worker thread, `postMessage` is automatically \"routed\" to the parent thread.\npostMessage({ hello: \"world\" });\n\n// On the main thread\nworker.postMessage({ hello: \"world\" });\n```\n\nTo receive messages, use the [`message` event handler](https://developer.mozilla.org/en-US/docs/Web/API/Worker/message_event) on the worker and main thread.\n\n```js\n// Worker thread:\nself.addEventListener(\"message\", event => {\n  console.log(event.data);\n});\n// or use the setter:\n// self.onmessage = fn\n\n// if on the main thread\nworker.addEventListener(\"message\", event => {\n  console.log(event.data);\n});\n// or use the setter:\n// worker.onmessage = fn\n```\n\n## Terminating a worker\n\nA `Worker` instance terminates automatically once it's event loop has no work left to do. Attaching a `\"message\"` listener on the global or any `MessagePort`s will keep the event loop alive. To forcefully terminate a `Worker`, call `worker.terminate()`.\n\n```ts\nconst worker = new Worker(new URL(\"worker.ts\", import.meta.url).href);\n\n// ...some time later\nworker.terminate();\n```\n\nThis will cause the worker's to exit as soon as possible.\n\n### `process.exit()`\n\nA worker can terminate itself with `process.exit()`. This does not terminate the main process. Like in Node.js, `process.on('beforeExit', callback)` and `process.on('exit', callback)` are emitted on the worker thread (and not on the main thread), and the exit code is passed to the `\"close\"` event.\n\n### `\"close\"`\n\nThe `\"close\"` event is emitted when a worker has been terminated. It can take some time for the worker to actually terminate, so this event is emitted when the worker has been marked as terminated. The `CloseEvent` will contain the exit code passed to `process.exit()`, or 0 if closed for other reasons.\n\n```ts\nconst worker = new Worker(new URL(\"worker.ts\", import.meta.url).href);\n\nworker.addEventListener(\"close\", event => {\n  console.log(\"worker is being closed\");\n});\n```\n\nThis event does not exist in browsers.\n\n## Managing lifetime\n\nBy default, an active `Worker` will keep the main (spawning) process alive, so async tasks like `setTimeout` and promises will keep the process alive. Attaching `message` listeners will also keep the `Worker` alive.\n\n### `worker.unref()`\n\nTo stop a running worker from keeping the process alive, call `worker.unref()`. This decouples the lifetime of the worker to the lifetime of the main process, and is equivlent to what Node.js' `worker_threads` does.\n\n```ts\nconst worker = new Worker(new URL(\"worker.ts\", import.meta.url).href);\nworker.unref();\n```\n\nNote: `worker.unref()` is not available in browers.\n\n### `worker.ref()`\n\nTo keep the process alive until the `Worker` terminates, call `worker.ref()`. A ref'd worker is the default behavior, and still needs something going on in the event loop (such as a `\"message\"` listener) for the worker to continue running.\n\n```ts\nconst worker = new Worker(new URL(\"worker.ts\", import.meta.url).href);\nworker.unref();\n// later...\nworker.ref();\n```\n\nAlternatively, you can also pass an `options` object to `Worker`:\n\n```ts\nconst worker = new Worker(new URL(\"worker.ts\", import.meta.url).href, {\n  ref: false,\n});\n```\n\nNote: `worker.ref()` is not available in browers.\n\n## Memory usage with `smol`\n\nJavaScript instances can use a lot of memory. Bun's `Worker` supports a `smol` mode that reduces memory usage, at a cost of performance. To enable `smol` mode, pass `smol: true` to the `options` object in the `Worker` constructor.\n\n```js\nconst worker = new Worker(\"./i-am-smol.ts\", {\n  smol: true,\n});\n```\n\n{% details summary=\"What does `smol` mode actually do?\" %}\nSetting `smol: true` sets `JSC::HeapSize` to be `Small` instead of the default `Large`.\n{% /details %}\n"}
{"filename": "docs/benchmarks.md", "content": "Bun.js focuses on performance, developer experience, and compatibility with the JavaScript ecosystem.\n\n## HTTP Requests\n\n```ts\n// http.ts\nexport default {\n  port: 3000,\n  fetch(request: Request) {\n    return new Response(\"Hello World\");\n  },\n};\n\n// bun ./http.ts\n```\n\n| Requests per second                                                    | OS    | CPU                            | Bun version |\n| ---------------------------------------------------------------------- | ----- | ------------------------------ | ----------- |\n| [260,000](https://twitter.com/jarredsumner/status/1512040623200616449) | macOS | Apple Silicon M1 Max           | 0.0.76      |\n| [160,000](https://twitter.com/jarredsumner/status/1511988933587976192) | Linux | AMD Ryzen 5 3600 6-Core 2.2ghz | 0.0.76      |\n\n{% details summary=\"See benchmark details\" %}\nMeasured with [`http_load_test`](https://github.com/uNetworking/uSockets/blob/master/examples/http_load_test.c) by running:\n\n```bash\n$ ./http_load_test  20 127.0.0.1 3000\n```\n\n{% /details %}\n\n## File System\n\n`cat` clone that runs [2x faster than GNU cat](https://twitter.com/jarredsumner/status/1511707890708586496) for large files on Linux\n\n```js\n// cat.js\nimport { resolve } from \"path\";\nimport { write, stdout, file, argv } from \"bun\";\n\nconst path = resolve(argv.at(-1));\n\nawait write(\n  // stdout is a Blob\n  stdout,\n  // file(path) returns a Blob - https://developer.mozilla.org/en-US/docs/Web/API/Blob\n  file(path),\n);\n```\n\nRun this with `bun cat.js /path/to/big/file`.\n\n## Reading from standard input\n\n```ts\n// As of Bun v0.3.0, console is an AsyncIterable\nfor await (const line of console) {\n  // line of text from stdin\n  console.log(line);\n}\n```\n\n## React SSR\n\n```js\nimport { renderToReadableStream } from \"react-dom/server\";\n\nconst dt = new Intl.DateTimeFormat();\n\nexport default {\n  port: 3000,\n  async fetch(request: Request) {\n    return new Response(\n      await renderToReadableStream(\n        <html>\n          <head>\n            <title>Hello World</title>\n          </head>\n          <body>\n            <h1>Hello from React!</h1>\n            <p>The date is {dt.format(new Date())}</p>\n          </body>\n        </html>,\n      ),\n    );\n  },\n};\n```\n\nWrite to stdout with `console.write`:\n\n```js\n// no trailing newline\n// works with strings and typed arrays\nconsole.write(\"Hello World!\");\n```\n\nThere are some more examples in the [examples](./examples) folder.\n\nPRs adding more examples are very welcome!\n\n## Fast paths for Web APIs\n\nBun.js has fast paths for common use cases that make Web APIs live up to the performance demands of servers and CLIs.\n\n`Bun.file(path)` returns a [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) that represents a lazily-loaded file.\n\nWhen you pass a file blob to `Bun.write`, Bun automatically uses a faster system call:\n\n```js\nconst blob = Bun.file(\"input.txt\");\nawait Bun.write(\"output.txt\", blob);\n```\n\nOn Linux, this uses the [`copy_file_range`](https://man7.org/linux/man-pages/man2/copy_file_range.2.html) syscall and on macOS, this becomes `clonefile` (or [`fcopyfile`](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/copyfile.3.html)).\n\n`Bun.write` also supports [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) objects. It automatically converts to a [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n\n```js\n// Eventually, this will stream the response to disk but today it buffers\nawait Bun.write(\"index.html\", await fetch(\"https://example.com\"));\n```\n"}
{"filename": "docs/bun-flavored-toml.md", "content": "[TOML](https://toml.io/) is a minimal configuration file format designed to be easy for humans to read.\n\nBun implements a TOML parser with a few tweaks designed for better interoperability with INI files and with JavaScript.\n\n### ; and # are comments\n\nIn Bun-flavored TOML, comments start with `#` or `;`\n\n```ini\n# This is a comment\n; This is also a comment\n```\n\nThis matches the behavior of INI files.\n\nIn TOML, comments start with `#`\n\n```toml\n# This is a comment\n```\n\n### String escape characters\n\nBun-flavored adds a few more escape sequences to TOML to work better with JavaScript strings.\n\n```\n# Bun-flavored TOML extras\n\\x{XX}     - ASCII           (U+00XX)\n\\u{x+}     - unicode         (U+0000000X) - (U+XXXXXXXX)\n\\v         - vertical tab\n\n# Regular TOML\n\\b         - backspace       (U+0008)\n\\t         - tab             (U+0009)\n\\n         - linefeed        (U+000A)\n\\f         - form feed       (U+000C)\n\\r         - carriage return (U+000D)\n\\\"         - quote           (U+0022)\n\\\\         - backslash       (U+005C)\n\\uXXXX     - unicode         (U+XXXX)\n\\UXXXXXXXX - unicode         (U+XXXXXXXX)\n```\n"}
{"filename": "docs/bundler/executables.md", "content": "Bun's bundler implements a `--compile` flag for generating a standalone binary from a TypeScript or JavaScript file.\n\n{% codetabs %}\n\n```bash\n$ bun build ./cli.ts --compile --outfile mycli\n```\n\n```ts#cli.ts\nconsole.log(\"Hello world!\");\n```\n\n{% /codetabs %}\n\nThis bundles `cli.ts` into an executable that can be executed directly:\n\n```\n$ ./mycli\nHello world!\n```\n\nAll imported files and packages are bundled into the executable, along with a copy of the Bun runtime. All built-in Bun and Node.js APIs are supported.\n\n{% callout %}\n\n**Note** \u2014 Currently, the `--compile` flag can only accept a single entrypoint at a time and does not support the following flags:\n\n- `--outdir` \u2014 use `outfile` instead.\n- `--external`\n- `--splitting`\n- `--publicPath`\n\n{% /callout %}\n\n## Embedding files\n\nStandalone executables support embedding files.\n\nTo embed files into an executable with `bun build --compile`, import the file in your code\n\n```js\n// this becomes an internal file path\nimport icon from \"./icon.png\";\n\nimport { file } from \"bun\";\n\nexport default {\n  fetch(req) {\n    return new Response(file(icon));\n  },\n};\n```\n\nYou may need to specify a `--loader` for it to be treated as a `\"file\"` loader (so you get back a file path).\n\nEmbedded files can be read using `Bun.file`'s functions or the Node.js `fs.readFile` function (in `\"node:fs\"`).\n\n## Minification\n\nTo trim down the size of the executable a little, pass `--minify` to `bun build --compile`. This uses Bun's minifier to reduce the code size. Overall though, Bun's binary is still way too big and we need to make it smaller.\n"}
{"filename": "docs/bundler/index.md", "content": "Bun's fast native bundler is now in beta. It can be used via the `bun build` CLI command or the `Bun.build()` JavaScript API.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './build',\n});\n```\n\n```sh#CLI\n$ bun build ./index.tsx --outdir ./build\n```\n\n{% /codetabs %}\n\nIt's fast. The numbers below represent performance on esbuild's [three.js benchmark](https://github.com/oven-sh/bun/tree/main/bench/bundle).\n\n{% image src=\"/images/bundler-speed.png\" caption=\"Bundling 10 copies of three.js from scratch, with sourcemaps and minification\" /%}\n\n## Why bundle?\n\nThe bundler is a key piece of infrastructure in the JavaScript ecosystem. As a brief overview of why bundling is so important:\n\n- **Reducing HTTP requests.** A single package in `node_modules` may consist of hundreds of files, and large applications may have dozens of such dependencies. Loading each of these files with a separate HTTP request becomes untenable very quickly, so bundlers are used to convert our application source code into a smaller number of self-contained \"bundles\" that can be loaded with a single request.\n- **Code transforms.** Modern apps are commonly built with languages or tools like TypeScript, JSX, and CSS modules, all of which must be converted into plain JavaScript and CSS before they can be consumed by a browser. The bundler is the natural place to configure these transformations.\n- **Framework features.** Frameworks rely on bundler plugins & code transformations to implement common patterns like file-system routing, client-server code co-location (think `getServerSideProps` or Remix loaders), and server components.\n\nLet's jump into the bundler API.\n\n## Basic example\n\nLet's build our first bundle. You have the following two files, which implement a simple client-side rendered React app.\n\n{% codetabs %}\n\n```tsx#./index.tsx\nimport * as ReactDOM from 'react-dom/client';\nimport {Component} from \"./Component\"\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Component message=\"Sup!\" />)\n```\n\n```tsx#./Component.tsx\nexport function Component(props: {message: string}) {\n  return <p>{props.message}</p>\n}\n```\n\n{% /codetabs %}\n\nHere, `index.tsx` is the \"entrypoint\" to our application. Commonly, this will be a script that performs some _side effect_, like starting a server or\u2014in this case\u2014initializing a React root. Because we're using TypeScript & JSX, we need to bundle our code before it can be sent to the browser.\n\nTo create our bundle:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out\n```\n\n{% /codetabs %}\n\nFor each file specified in `entrypoints`, Bun will generate a new bundle. This bundle will be written to disk in the `./out` directory (as resolved from the current working directory). After running the build, the file system looks like this:\n\n```ts\n.\n\u251c\u2500\u2500 index.tsx\n\u251c\u2500\u2500 Component.tsx\n\u2514\u2500\u2500 out\n    \u2514\u2500\u2500 index.js\n```\n\nThe contents of `out/index.js` will look something like this:\n\n```js#out/index.js\n// ...\n// ~20k lines of code\n// including the contents of `react-dom/client` and all its dependencies\n// this is where the $jsxDEV and $createRoot functions are defined\n\n\n// Component.tsx\nfunction Component(props) {\n  return $jsxDEV(\"p\", {\n    children: props.message\n  }, undefined, false, undefined, this);\n}\n\n// index.tsx\nvar rootNode = document.getElementById(\"root\");\nvar root = $createRoot(rootNode);\nroot.render($jsxDEV(Component, {\n  message: \"Sup!\"\n}, undefined, false, undefined, this));\n```\n\n{% details summary=\"Tutorial: Run this file in your browser\" %}\nWe can load this file in the browser to see our app in action. Create an `index.html` file in the `out` directory:\n\n```bash\n$ touch out/index.html\n```\n\nThen paste the following contents into it:\n\n```html\n<html>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/index.js\"></script>\n  </body>\n</html>\n```\n\nThen spin up a static file server serving the `out` directory:\n\n```bash\n$ bunx serve out\n```\n\nVisit `http://localhost:5000` to see your bundled app in action.\n\n{% /details %}\n\n## Content types\n\nLike the Bun runtime, the bundler supports an array of file types out of the box. The following table breaks down the bundler's set of standard \"loaders\". Refer to [Bundler > File types](/docs/runtime/loaders) for full documentation.\n\n{% table %}\n\n- Extensions\n- Details\n\n---\n\n- `.js` `.cjs` `.mjs` `.mts` `.cts` `.ts` `.tsx`\n- Uses Bun's built-in transpiler to parse the file and transpile TypeScript/JSX syntax to vanilla JavaScript. The bundler executes a set of default transforms, including dead code elimination, tree shaking, and environment variable inlining. At the moment Bun does not attempt to down-convert syntax; if you use recently ECMAScript syntax, that will be reflected in the bundled code.\n\n---\n\n- `.json`\n- JSON files are parsed and inlined into the bundle as a JavaScript object.\n\n  ```ts\n  import pkg from \"./package.json\";\n  pkg.name; // => \"my-package\"\n  ```\n\n---\n\n- `.toml`\n- TOML files are parsed and inlined into the bundle as a JavaScript object.\n\n  ```ts\n  import config from \"./bunfig.toml\";\n  config.logLevel; // => \"debug\"\n  ```\n\n---\n\n- `.txt`\n- The contents of the text file are read and inlined into the bundle as a string.\n\n  ```ts\n  import contents from \"./file.txt\";\n  console.log(contents); // => \"Hello, world!\"\n  ```\n\n---\n\n- `.node` `.wasm`\n- These files are supported by the Bun runtime, but during bundling they are treated as [assets](#assets).\n\n{% /table %}\n\n### Assets\n\nIf the bundler encounters an import with an unrecognized extension, it treats the imported file as an _external file_. The referenced file is copied as-is into `outdir`, and the import is resolved as a _path_ to the file.\n\n{% codetabs %}\n\n```ts#Input\n// bundle entrypoint\nimport logo from \"./logo.svg\";\nconsole.log(logo);\n```\n\n```ts#Output\n// bundled output\nvar logo = \"./logo-ab237dfe.svg\";\nconsole.log(logo);\n```\n\n{% /codetabs %}\n\n{% callout %}\nThe exact behavior of the file loader is also impacted by [`naming`](#naming) and [`publicPath`](#publicpath).\n{% /callout %}\n\nRefer to the [Bundler > Loaders](/docs/bundler/loaders#file) page for more complete documentation on the file loader.\n\n### Plugins\n\nThe behavior described in this table can be overridden or extended with [plugins](/docs/bundler/plugins). Refer to the [Bundler > Loaders](/docs/bundler/plugins) page for complete documentation.\n\n## API\n\n### `entrypoints`\n\n**Required.** An array of paths corresponding to the entrypoints of our application. One bundle will be generated for each entrypoint.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nconst result = await Bun.build({\n  entrypoints: [\"./index.ts\"],\n});\n// => { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }\n```\n\n```bash#CLI\n$ bun build --entrypoints ./index.ts\n# the bundle will be printed to stdout\n# <bundled code>\n```\n\n{% /codetabs %}\n\n### `outdir`\n\nThe directory where output files will be written.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nconst result = await Bun.build({\n  entrypoints: ['./index.ts'],\n  outdir: './out'\n});\n// => { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }\n```\n\n```bash#CLI\n$ bun build --entrypoints ./index.ts --outdir ./out\n# a summary of bundled files will be printed to stdout\n```\n\n{% /codetabs %}\n\nIf `outdir` is not passed to the JavaScript API, bundled code will not be written to disk. Bundled files are returned in an array of `BuildArtifact` objects. These objects are Blobs with extra properties; see [Outputs](#outputs) for complete documentation.\n\n```ts\nconst result = await Bun.build({\n  entrypoints: [\"./index.ts\"],\n});\n\nfor (const result of result.outputs) {\n  // Can be consumed as blobs\n  await result.text();\n\n  // Bun will set Content-Type and Etag headers\n  new Response(result);\n\n  // Can be written manually, but you should use `outdir` in this case.\n  Bun.write(path.join(\"out\", result.path), result);\n}\n```\n\nWhen `outdir` is set, the `path` property on a `BuildArtifact` will be the absolute path to where it was written to.\n\n### `target`\n\nThe intended execution environment for the bundle.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.ts'],\n  outdir: './out',\n  target: 'browser', // default\n})\n```\n\n```bash#CLI\n$ bun build --entrypoints ./index.ts --outdir ./out --target browser\n```\n\n{% /codetabs %}\n\nDepending on the target, Bun will apply different module resolution rules and optimizations.\n\n<!-- - Module resolution. For example, when bundling for the browser, Bun will prioritize the `\"browser\"` export condition when resolving imports. An error will be thrown if any Node.js or Bun built-ins are imported or used, e.g. `node:fs` or `Bun.serve`. -->\n\n{% table %}\n\n---\n\n- `browser`\n- _Default._ For generating bundles that are intended for execution by a browser. Prioritizes the `\"browser\"` export condition when resolving imports. Importing any built-in modules, like `node:events` or `node:path` will work, but calling some functions, like `fs.readFile` will not work.\n\n---\n\n- `bun`\n- For generating bundles that are intended to be run by the Bun runtime. In many cases, it isn't necessary to bundle server-side code; you can directly execute the source code without modification. However, bundling your server code can reduce startup times and improve running performance.\n\n  All bundles generated with `target: \"bun\"` are marked with a special `// @bun` pragma, which indicates to the Bun runtime that there's no need to re-transpile the file before execution.\n\n  If any entrypoints contains a Bun shebang (`#!/usr/bin/env bun`) the bundler will default to `target: \"bun\"` instead of `\"browser`.\n\n---\n\n- `node`\n- For generating bundles that are intended to be run by Node.js. Prioritizes the `\"node\"` export condition when resolving imports, and outputs `.mjs`. In the future, this will automatically polyfill the `Bun` global and other built-in `bun:*` modules, though this is not yet implemented.\n\n{% /table %}\n\n{% callout %}\n\n{% /callout %}\n\n### `format`\n\nSpecifies the module format to be used in the generated bundles.\n\nCurrently the bundler only supports one module format: `\"esm\"`. Support for `\"cjs\"` and `\"iife\"` are planned.\n\n{% codetabs %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  format: \"esm\",\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --format esm\n```\n\n{% /codetabs %}\n\n<!-- ### `bundling`\n\nWhether to enable bundling.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  bundling: true, // default\n})\n```\n\n```bash#CLI\n# bundling is enabled by default\n$ bun build ./index.tsx --outdir ./out\n```\n\n{% /codetabs %}\n\nSet to `false` to disable bundling. Instead, files will be transpiled and individually written to `outdir`.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  bundling: false,\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --no-bundling\n```\n\n{% /codetabs %} -->\n\n### `splitting`\n\nWhether to enable code splitting.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  splitting: false, // default\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --splitting\n```\n\n{% /codetabs %}\n\nWhen `true`, the bundler will enable _code splitting_. When multiple entrypoints both import the same file, module, or set of files/modules, it's often useful to split the shared code into a separate bundle. This shared bundle is known as a _chunk_. Consider the following files:\n\n{% codetabs %}\n\n```ts#entry-a.ts\nimport { shared } from './shared.ts';\n```\n\n```ts#entry-b.ts\nimport { shared } from './shared.ts';\n```\n\n```ts#shared.ts\nexport const shared = 'shared';\n```\n\n{% /codetabs %}\n\nTo bundle `entry-a.ts` and `entry-b.ts` with code-splitting enabled:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./entry-a.ts', './entry-b.ts'],\n  outdir: './out',\n  splitting: true,\n})\n```\n\n```bash#CLI\n$ bun build ./entry-a.ts ./entry-b.ts --outdir ./out --splitting\n```\n\n{% /codetabs %}\n\nRunning this build will result in the following files:\n\n```txt\n.\n\u251c\u2500\u2500 entry-a.tsx\n\u251c\u2500\u2500 entry-b.tsx\n\u251c\u2500\u2500 shared.tsx\n\u2514\u2500\u2500 out\n    \u251c\u2500\u2500 entry-a.js\n    \u251c\u2500\u2500 entry-b.js\n    \u2514\u2500\u2500 chunk-2fce6291bf86559d.js\n\n```\n\nThe generated `chunk-2fce6291bf86559d.js` file contains the shared code. To avoid collisions, the file name automatically includes a content hash by default. This can be customized with [`naming`](#naming).\n\n### `plugins`\n\nA list of plugins to use during bundling.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  plugins: [/* ... */],\n})\n```\n\n```bash#CLI\nn/a\n```\n\n{% /codetabs %}\n\nBun implements a universal plugin system for both Bun's runtime and bundler. Refer to the [plugin documentation](/docs/bundler/plugins) for complete documentation.\n\n<!-- ### `manifest`\n\nWhether to return a build manifest in the result of `Bun.build`.\n\n```ts\nconst result = await Bun.build({\n  entrypoints: [\"./index.tsx\"],\n  outdir: \"./out\",\n  manifest: true, // default is true\n});\n\nconsole.log(result.manifest);\n```\n\n{% details summary=\"Manifest structure\" %}\n\nThe manifest has the following form:\n\n```ts\nexport type BuildManifest = {\n  inputs: {\n    [path: string]: {\n      output: {\n        path: string;\n      };\n      imports: {\n        path: string;\n        kind: ImportKind;\n        external?: boolean;\n      }[];\n    };\n  };\n  outputs: {\n    [path: string]: {\n      type: \"chunk\" | \"entry-point\" | \"asset\";\n      inputs: { path: string }[];\n      imports: {\n        path: string;\n        kind: ImportKind;\n        external?: boolean;\n        asset?: boolean;\n      }[];\n      exports: string[];\n    };\n  };\n};\n\nexport type ImportKind =\n  | \"entry-point\"\n  | \"import-statement\"\n  | \"require-call\"\n  | \"dynamic-import\"\n  | \"require-resolve\"\n  | \"import-rule\"\n  | \"url-token\";\n```\n\n{% /details %}\n\nBy design, the manifest is a simple JSON object that can easily be serialized or written to disk. It is also compatible with esbuild's [`metafile`](https://esbuild.github.io/api/#metafile) format. -->\n\n### `sourcemap`\n\nSpecifies the type of sourcemap to generate.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  sourcemap: \"external\", // default \"none\"\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --sourcemap=external\n```\n\n{% /codetabs %}\n\n{% table %}\n\n---\n\n- `\"none\"`\n- _Default._ No sourcemap is generated.\n\n---\n\n- `\"inline\"`\n- A sourcemap is generated and appended to the end of the generated bundle as a base64 payload.\n\n  ```ts\n  // <bundled code here>\n\n  //# sourceMappingURL=data:application/json;base64,<encoded sourcemap here>\n  ```\n\n---\n\n- `\"external\"`\n- A separate `*.js.map` file is created alongside each `*.js` bundle.\n\n{% /table %}\n\n{% callout %}\n\nGenerated bundles contain a [debug id](https://sentry.engineering/blog/the-case-for-debug-ids) that can be used to associate a bundle with its corresponding sourcemap. This `debugId` is added as a comment at the bottom of the file.\n\n```ts\n// <generated bundle code>\n\n//# debugId=<DEBUG ID>\n```\n\nThe associated `*.js.map` sourcemap will be a JSON file containing an equivalent `debugId` property.\n\n{% /callout %}\n\n### `minify`\n\nWhether to enable minification. Default `false`.\n\n{% callout %}\nWhen targeting `bun`, identifiers will be minified by default.\n{% /callout %}\n\nTo enable all minification options:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  minify: true, // default false\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --minify\n```\n\n{% /codetabs %}\n\nTo granularly enable certain minifications:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  minify: {\n    whitespace: true,\n    identifiers: true,\n    syntax: true,\n  },\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --minify-whitespace --minify-identifiers --minify-syntax\n```\n\n{% /codetabs %}\n\n<!-- ### `treeshaking`\n\nboolean; -->\n\n### `external`\n\nA list of import paths to consider _external_. Defaults to `[]`.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  external: [\"lodash\", \"react\"], // default: []\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --external lodash --external react\n```\n\n{% /codetabs %}\n\nAn external import is one that will not be included in the final bundle. Instead, the `import` statement will be left as-is, to be resolved at runtime.\n\nFor instance, consider the following entrypoint file:\n\n```ts#index.tsx\nimport _ from \"lodash\";\nimport {z} from \"zod\";\n\nconst value = z.string().parse(\"Hello world!\")\nconsole.log(_.upperCase(value));\n```\n\nNormally, bundling `index.tsx` would generate a bundle containing the entire source code of the `\"zod\"` package. If instead, we want to leave the `import` statement as-is, we can mark it as external:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  external: ['zod'],\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --external zod\n```\n\n{% /codetabs %}\n\nThe generated bundle will look something like this:\n\n```js#out/index.js\nimport {z} from \"zod\";\n\n// ...\n// the contents of the \"lodash\" package\n// including the `_.upperCase` function\n\nvar value = z.string().parse(\"Hello world!\")\nconsole.log(_.upperCase(value));\n```\n\nTo mark all imports as external, use the wildcard `*`:\n\n{% codetabs %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  external: ['*'],\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --external '*'\n```\n\n{% /codetabs %}\n\n### `naming`\n\nCustomizes the generated file names. Defaults to `./[dir]/[name].[ext]`.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  naming: \"[dir]/[name].[ext]\", // default\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --entry-naming [dir]/[name].[ext]\n```\n\n{% /codetabs %}\n\nBy default, the names of the generated bundles are based on the name of the associated entrypoint.\n\n```txt\n.\n\u251c\u2500\u2500 index.tsx\n\u2514\u2500\u2500 out\n    \u2514\u2500\u2500 index.js\n```\n\nWith multiple entrypoints, the generated file hierarchy will reflect the directory structure of the entrypoints.\n\n```txt\n.\n\u251c\u2500\u2500 index.tsx\n\u2514\u2500\u2500 nested\n    \u2514\u2500\u2500 index.tsx\n\u2514\u2500\u2500 out\n    \u251c\u2500\u2500 index.js\n    \u2514\u2500\u2500 nested\n        \u2514\u2500\u2500 index.js\n```\n\nThe names and locations of the generated files can be customized with the `naming` field. This field accepts a template string that is used to generate the filenames for all bundles corresponding to entrypoints. where the following tokens are replaced with their corresponding values:\n\n- `[name]` - The name of the entrypoint file, without the extension.\n- `[ext]` - The extension of the generated bundle.\n- `[hash]` - A hash of the bundle contents.\n- `[dir]` - The relative path from the build root to the parent directory of the file.\n\nFor example:\n\n{% table %}\n\n- Token\n- `[name]`\n- `[ext]`\n- `[hash]`\n- `[dir]`\n\n---\n\n- `./index.tsx`\n- `index`\n- `js`\n- `a1b2c3d4`\n- `\"\"` (empty string)\n\n---\n\n- `./nested/entry.ts`\n- `entry`\n- `js`\n- `c3d4e5f6`\n- `\"nested\"`\n\n{% /table %}\n\nWe can combine these tokens to create a template string. For instance, to include the hash in the generated bundle names:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  naming: 'files/[dir]/[name]-[hash].[ext]',\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --entry-naming [name]-[hash].[ext]\n```\n\n{% /codetabs %}\n\nThis build would result in the following file structure:\n\n```txt\n.\n\u251c\u2500\u2500 index.tsx\n\u2514\u2500\u2500 out\n    \u2514\u2500\u2500 files\n        \u2514\u2500\u2500 index-a1b2c3d4.js\n```\n\nWhen a `string` is provided for the `naming` field, it is used only for bundles _that correspond to entrypoints_. The names of [chunks](#splitting) and copied assets are not affected. Using the JavaScript API, separate template strings can be specified for each type of generated file.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  naming: {\n    // default values\n    entry: '[dir]/[name].[ext]',\n    chunk: '[name]-[hash].[ext]',\n    asset: '[name]-[hash].[ext]',\n  },\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --entry-naming \"[dir]/[name].[ext]\" --chunk-naming \"[name]-[hash].[ext]\" --asset-naming \"[name]-[hash].[ext]\"\n```\n\n{% /codetabs %}\n\n### `root`\n\nThe root directory of the project.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./pages/a.tsx', './pages/b.tsx'],\n  outdir: './out',\n  root: '.',\n})\n```\n\n```bash#CLI\nn/a\n```\n\n{% /codetabs %}\n\nIf unspecified, it is computed to be the first common ancestor of all entrypoint files. Consider the following file structure:\n\n```txt\n.\n\u2514\u2500\u2500 pages\n  \u2514\u2500\u2500 index.tsx\n  \u2514\u2500\u2500 settings.tsx\n```\n\nWe can build both entrypoints in the `pages` directory:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./pages/index.tsx', './pages/settings.tsx'],\n  outdir: './out',\n})\n```\n\n```bash#CLI\n$ bun build ./pages/index.tsx ./pages/settings.tsx --outdir ./out\n```\n\n{% /codetabs %}\n\nThis would result in a file structure like this:\n\n```txt\n.\n\u2514\u2500\u2500 pages\n  \u2514\u2500\u2500 index.tsx\n  \u2514\u2500\u2500 settings.tsx\n\u2514\u2500\u2500 out\n  \u2514\u2500\u2500 index.js\n  \u2514\u2500\u2500 settings.js\n```\n\nSince the `pages` directory is the first common ancestor of the entrypoint files, it is considered the project root. This means that the generated bundles live at the top level of the `out` directory; there is no `out/pages` directory.\n\nThis behavior can be overridden by specifying the `root` option:\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./pages/index.tsx', './pages/settings.tsx'],\n  outdir: './out',\n  root: '.',\n})\n```\n\n```bash#CLI\n$ bun build ./pages/index.tsx ./pages/settings.tsx --outdir ./out --root .\n```\n\n{% /codetabs %}\n\nBy specifying `.` as `root`, the generated file structure will look like this:\n\n```txt\n.\n\u2514\u2500\u2500 pages\n  \u2514\u2500\u2500 index.tsx\n  \u2514\u2500\u2500 settings.tsx\n\u2514\u2500\u2500 out\n  \u2514\u2500\u2500 pages\n    \u2514\u2500\u2500 index.js\n    \u2514\u2500\u2500 settings.js\n```\n\n### `publicPath`\n\nA prefix to be appended to any import paths in bundled code.\n\n<!-- $ bun build ./index.tsx --outdir ./out --publicPath https://cdn.example.com -->\n\nIn many cases, generated bundles will contain no `import` statements. After all, the goal of bundling is to combine all of the code into a single file. However there are a number of cases with the generated bundles will contain `import` statements.\n\n- **Asset imports** \u2014 When importing an unrecognized file type like `*.svg`, the bundler defers to the [`file` loader](/docs/bundler/loaders#file), which copies the file into `outdir` as is. The import is converted into a variable\n- **External modules** \u2014 Files and modules can be marked as [`external`](#external), in which case they will not be included in the bundle. Instead, the `import` statement will be left in the final bundle.\n- **Chunking**. When [`splitting`](#splitting) is enabled, the bundler may generate separate \"chunk\" files that represent code that is shared among multiple entrypoints.\n\nIn any of these cases, the final bundles may contain paths to other files. By default these imports are _relative_. Here is an example of a simple asset import:\n\n{% codetabs %}\n\n```ts#Input\nimport logo from './logo.svg';\nconsole.log(logo);\n```\n\n```ts#Output\n// logo.svg is copied into <outdir>\n// and hash is added to the filename to prevent collisions\nvar logo = './logo-a7305bdef.svg';\nconsole.log(logo);\n```\n\n{% /codetabs %}\n\nSetting `publicPath` will prefix all file paths with the specified value.\n\n{% codetabs group=\"a\" %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  publicPath: 'https://cdn.example.com/', // default is undefined\n})\n```\n\n```bash#CLI\nn/a\n```\n\n{% /codetabs %}\n\nThe output file would now look something like this.\n\n```ts-diff#Output\n- var logo = './logo-a7305bdef.svg';\n+ var logo = 'https://cdn.example.com/logo-a7305bdef.svg';\n```\n\n### `define`\n\nA map of global identifiers to be replaced at build time. Keys of this object are identifier names, and values are JSON strings that will be inlined.\n\n{% callout }\nThis is not needed to inline `process.env.NODE_ENV`, as Bun does this automatically.\n{% /callout %}\n\n{% codetabs %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  define: {\n    STRING: JSON.stringify(\"value\"),\n    \"nested.boolean\": \"true\",\n  },\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --define 'STRING=\"value\"' --define \"nested.boolean=true\"\n```\n\n{% /codetabs %}\n\n### `loader`\n\nA map of file extensions to [built-in loader names](https://bun.sh/docs/bundler/loaders#built-in-loaders). This can be used to quickly customize how certain file files are loaded.\n\n{% codetabs %}\n\n```ts#JavaScript\nawait Bun.build({\n  entrypoints: ['./index.tsx'],\n  outdir: './out',\n  loader: {\n    \".png\": \"dataurl\",\n    \".txt\": \"file\",\n  },\n})\n```\n\n```bash#CLI\n$ bun build ./index.tsx --outdir ./out --loader .png:dataurl --loader .txt:file\n```\n\n{% /codetabs %}\n\n## Outputs\n\nThe `Bun.build` function returns a `Promise<BuildOutput>`, defined as:\n\n```ts\ninterface BuildOutput {\n  outputs: BuildArtifact[];\n  success: boolean;\n  logs: Array<object>; // see docs for details\n}\n\ninterface BuildArtifact extends Blob {\n  kind: \"entry-point\" | \"chunk\" | \"asset\" | \"sourcemap\";\n  path: string;\n  loader: Loader;\n  hash: string | null;\n  sourcemap: BuildArtifact | null;\n}\n```\n\nThe `outputs` array contains all the files that were generated by the build. Each artifact implements the `Blob` interface.\n\n```ts\nconst build = Bun.build({\n  /* */\n});\n\nfor (const output of build.outputs) {\n  await output.arrayBuffer(); // => ArrayBuffer\n  await output.text(); // string\n}\n```\n\nEach artifact also contains the following properties:\n\n{% table %}\n\n---\n\n- `kind`\n- What kind of build output this file is. A build generates bundled entrypoints, code-split \"chunks\", sourcemaps, and copied assets (like images).\n\n---\n\n- `path`\n- Absolute path to the file on disk\n\n---\n\n- `loader`\n- The loader was used to interpret the file. See [Bundler > Loaders](/docs/bundler/loaders) to see how Bun maps file extensions to the appropriate built-in loader.\n\n---\n\n- `hash`\n- The hash of the file contents. Always defined for assets.\n\n---\n\n- `sourcemap`\n- The sourcemap file corresponding to this file, if generated. Only defined for entrypoints and chunks.\n\n{% /table %}\n\nSimilar to `BunFile`, `BuildArtifact` objects can be passed directly into `new Response()`.\n\n```ts\nconst build = Bun.build({\n  /* */\n});\n\nconst artifact = build.outputs[0];\n\n// Content-Type header is automatically set\nreturn new Response(artifact);\n```\n\nThe Bun runtime implements special pretty-printing of `BuildArtifact` object to make debugging easier.\n\n{% codetabs %}\n\n```ts#Build_script\n// build.ts\nconst build = Bun.build({/* */});\n\nconst artifact = build.outputs[0];\nconsole.log(artifact);\n```\n\n```sh#Shell_output\n$ bun run build.ts\nBuildArtifact (entry-point) {\n  path: \"./index.js\",\n  loader: \"tsx\",\n  kind: \"entry-point\",\n  hash: \"824a039620219640\",\n  Blob (114 bytes) {\n    type: \"text/javascript;charset=utf-8\"\n  },\n  sourcemap: null\n}\n```\n\n{% /codetabs %}\n\n### Executables\n\nBun supports \"compiling\" a JavaScript/TypeScript entrypoint into a standalone executable. This executable contains a copy of the Bun binary.\n\n```sh\n$ bun build ./cli.tsx --outfile mycli --compile\n$ ./mycli\n```\n\nRefer to [Bundler > Executables](/docs/bundler/executables) for complete documentation.\n\n## Logs and errors\n\n`Bun.build` only throws if invalid options are provided. Read the `success` property to determine if the build was successful; the `logs` property will contain additional details.\n\n```ts\nconst result = await Bun.build({\n  entrypoints: [\"./index.tsx\"],\n  outdir: \"./out\",\n});\n\nif (!result.success) {\n  console.error(\"Build failed\");\n  for (const message of result.logs) {\n    // Bun will pretty print the message object\n    console.error(message);\n  }\n}\n```\n\nEach message is either a `BuildMessage` or `ResolveMessage` object, which can be used to trace what problems happened in the build.\n\n```ts\nclass BuildMessage {\n  name: string;\n  position?: Position;\n  message: string;\n  level: \"error\" | \"warning\" | \"info\" | \"debug\" | \"verbose\";\n}\n\nclass ResolveMessage extends BuildMessage {\n  code: string;\n  referrer: string;\n  specifier: string;\n  importKind: ImportKind;\n}\n```\n\nIf you want to throw an error from a failed build, consider passing the logs to an `AggregateError`. If uncaught, Bun will pretty-print the contained messages nicely.\n\n```ts\nif (!result.success) {\n  throw new AggregateError(result.logs, \"Build failed\");\n}\n```\n\n## Reference\n\n```ts\ninterface Bun {\n  build(options: BuildOptions): Promise<BuildOutput>;\n}\n\ninterface BuildOptions {\n  entrypoints: string[]; // required\n  outdir?: string; // default: no write (in-memory only)\n  format?: \"esm\"; // later: \"cjs\" | \"iife\"\n  target?: \"browser\" | \"bun\" | \"node\"; // \"browser\"\n  splitting?: boolean; // true\n  plugins?: BunPlugin[]; // [] // See https://bun.sh/docs/bundler/plugins\n  loader?: { [k in string]: Loader }; // See https://bun.sh/docs/bundler/loaders\n  manifest?: boolean; // false\n  external?: string[]; // []\n  sourcemap?: \"none\" | \"inline\" | \"external\"; // \"none\"\n  root?: string; // computed from entrypoints\n  naming?:\n    | string\n    | {\n        entry?: string; // '[dir]/[name].[ext]'\n        chunk?: string; // '[name]-[hash].[ext]'\n        asset?: string; // '[name]-[hash].[ext]'\n      };\n  publicPath?: string; // e.g. http://mydomain.com/\n  minify?:\n    | boolean // false\n    | {\n        identifiers?: boolean;\n        whitespace?: boolean;\n        syntax?: boolean;\n      };\n}\n\ninterface BuildOutput {\n  outputs: BuildArtifact[];\n  success: boolean;\n  logs: Array<BuildMessage | ResolveMessage>;\n}\n\ninterface BuildArtifact extends Blob {\n  path: string;\n  loader: Loader;\n  hash?: string;\n  kind: \"entry-point\" | \"chunk\" | \"asset\" | \"sourcemap\";\n  sourcemap?: BuildArtifact;\n}\n\ntype Loader =\n  | \"js\"\n  | \"jsx\"\n  | \"ts\"\n  | \"tsx\"\n  | \"json\"\n  | \"toml\"\n  | \"file\"\n  | \"napi\"\n  | \"wasm\"\n  | \"text\";\n\ninterface BuildOutput {\n  outputs: BuildArtifact[];\n  success: boolean;\n  logs: Array<BuildMessage | ResolveMessage>;\n}\n\ndeclare class ResolveMessage {\n  readonly name: \"ResolveMessage\";\n  readonly position: Position | null;\n  readonly code: string;\n  readonly message: string;\n  readonly referrer: string;\n  readonly specifier: string;\n  readonly importKind:\n    | \"entry_point\"\n    | \"stmt\"\n    | \"require\"\n    | \"import\"\n    | \"dynamic\"\n    | \"require_resolve\"\n    | \"at\"\n    | \"at_conditional\"\n    | \"url\"\n    | \"internal\";\n  readonly level: \"error\" | \"warning\" | \"info\" | \"debug\" | \"verbose\";\n\n  toString(): string;\n}\n```\n\n<!--\ninterface BuildManifest {\n  inputs: {\n    [path: string]: {\n      output: {\n        path: string;\n      };\n      imports: {\n        path: string;\n        kind: ImportKind;\n        external?: boolean;\n        asset?: boolean; // whether the import defaulted to \"file\" loader\n      }[];\n    };\n  };\n  outputs: {\n    [path: string]: {\n      type: \"chunk\" | \"entrypoint\" | \"asset\";\n      inputs: { path: string }[];\n      imports: {\n        path: string;\n        kind: ImportKind;\n        external?: boolean;\n      }[];\n      exports: string[];\n    };\n  };\n} -->\n"}
{"filename": "docs/bundler/intro.md", "content": "<!-- This document is a work in progress. It's not currently included in the actual docs. -->\n\nThe goal of this document is to break down why bundling is necessary, how it works, and how the bundler became such a key part of modern JavaScript development. The content is not specific to Bun's bundler, but is rather aimed at anyone looking for a greater understanding of how bundlers work and, by extension, how most modern frameworks are implemented.\n\n## What is bundling\n\nWith the adoption of ECMAScript modules (ESM), browsers can now resolve `import`/`export` statements in JavaScript files loaded via `<script>` tags.\n\n{% codetabs %}\n\n```html#index.html\n<html>\n  <head>\n    <script type=\"module\" src=\"/index.js\" ></script>\n  </head>\n</html>\n```\n\n```js#index.js\nimport {sayHello} from \"./hello.js\";\n\nsayHello();\n```\n\n```js#hello.js\nexport function sayHello() {\n  console.log(\"Hello, world!\");\n}\n```\n\n{% /codetabs %}\n\nWhen a user visits this website, the files are loaded in the following order:\n\n{% image src=\"/images/module_loading_unbundled.png\" /%}\n\n{% callout %}\n**Relative imports** \u2014 Relative imports are resolved relative to the URL of the importing file. Because we're importing `./hello.js` from `/index.js`, the browser resolves it to `/hello.js`. If instead we'd imported `./hello.js` from `/src/index.js`, the browser would have resolved it to `/src/hello.js`.\n{% /callout %}\n\nThis approach works, it requires three round-trip HTTP requests before the browser is ready to render the page. On slow internet connections, this may add up to a non-trivial delay.\n\nThis example is extremely simplistic. A modern app may be loading dozens of modules from `node_modules`, each consisting of hundrends of files. Loading each of these files with a separate HTTP request becomes untenable very quickly. While most of these requests will be running in parallel, the number of round-trip requests can still be very high; plus, there are limits on how many simultaneous requests a browser can make.\n\n{% callout %}\nSome recent advances like modulepreload and HTTP/3 are intended to solve some of these problems, but at the moment bundling is still the most performant approach.\n{% /callout %}\n\nThe answer: bundling.\n\n## Entrypoints\n\nA bundler accepts an \"entrypoint\" to your source code (in this case, `/index.js`) and outputs a single file containing all of the code needed to run your app. If does so by parsing your source code, reading the `import`/`export` statements, and building a \"module graph\" of your app's dependencies.\n\n{% image src=\"/images/bundling.png\" /%}\n\nWe can now load `/bundle.js` from our `index.html` file and eliminate a round trip request, decreasing load times for our app.\n\n{% image src=\"/images/module_loading_bundled.png\" /%}\n\n## Loaders\n\nBundlers typically have some set of built-in \"loaders\".\n\n## Transpilation\n\nThe JavaScript files above are just that: plain JavaScript. They can be directly executed by any modern browser.\n\nBut modern tooling goes far beyond HTML, JavaScript, and CSS. JSX, TypeScript, and PostCSS/CSS-in-JS are all popular technologies that involve non-standard syntax that must be converted into vanilla JavaScript and CSS before if can be consumed by a browser.\n\n## Chunking\n\n## Module resolution\n\n## Plugins\n"}
{"filename": "docs/bundler/loaders.md", "content": "The Bun bundler implements a set of default loaders out of the box. As a rule of thumb, the bundler and the runtime both support the same set of file types out of the box.\n\n`.js` `.cjs` `.mjs` `.mts` `.cts` `.ts` `.tsx` `.jsx` `.toml` `.json` `.txt` `.wasm` `.node`\n\nBun uses the file extension to determine which built-in _loader_ should be used to parse the file. Every loader has a name, such as `js`, `tsx`, or `json`. These names are used when building [plugins](/docs/bundler/plugins) that extend Bun with custom loaders.\n\n## Built-in loaders\n\n### `js`\n\n**JavaScript**. Default for `.cjs` and `.mjs`.\n\nParses the code and applies a set of default transforms, like dead-code elimination, tree shaking, and environment variable inlining. Note that Bun does not attempt to down-convert syntax at the moment.\n\n### `jsx`\n\n**JavaScript + JSX.**. Default for `.js` and `.jsx`.\n\nSame as the `js` loader, but JSX syntax is supported. By default, JSX is downconverted to plain JavaScript; the details of how this is done depends on the `jsx*` compiler options in your `tsconfig.json`. Refer to the TypeScript documentation [on JSX](https://www.typescriptlang.org/docs/handbook/jsx.html) for more information.\n\n### `ts`\n\n**TypeScript loader**. Default for `.ts`, `.mts`, and `.cts`.\n\nStrips out all TypeScript syntax, then behaves identically to the `js` loader. Bun does not perform typechecking.\n\n### `tsx`\n\n**TypeScript + JSX loader**. Default for `.tsx`. Transpiles both TypeScript and JSX to vanilla JavaScript.\n\n### `json`\n\n**JSON loader**. Default for `.json`.\n\nJSON files can be directly imported.\n\n```ts\nimport pkg from \"./package.json\";\npkg.name; // => \"my-package\"\n```\n\nDuring bundling, the parsed JSON is inlined into the bundle as a JavaScript object.\n\n```ts\nvar pkg = {\n  name: \"my-package\",\n  // ... other fields\n};\npkg.name;\n```\n\nIf a `.json` file is passed as an entrypoint to the bundler, it will be converted to a `.js` module that `export default`s the parsed object.\n\n{% codetabs %}\n\n```json#Input\n{\n  \"name\": \"John Doe\",\n  \"age\": 35,\n  \"email\": \"johndoe@example.com\"\n}\n```\n\n```js#Output\nexport default {\n  name: \"John Doe\",\n  age: 35,\n  email: \"johndoe@example.com\"\n}\n```\n\n{% /codetabs %}\n\n### `toml`\n\n**TOML loader**. Default for `.toml`.\n\nTOML files can be directly imported. Bun will parse them with its fast native TOML parser.\n\n```ts\nimport config from \"./bunfig.toml\";\nconfig.logLevel; // => \"debug\"\n```\n\nDuring bundling, the parsed TOML is inlined into the bundle as a JavaScript object.\n\n```ts\nvar config = {\n  logLevel: \"debug\",\n  // ...other fields\n};\nconfig.logLevel;\n```\n\nIf a `.toml` file is passed as an entrypoint, it will be converted to a `.js` module that `export default`s the parsed object.\n\n{% codetabs %}\n\n```toml#Input\nname = \"John Doe\"\nage = 35\nemail = \"johndoe@example.com\"\n```\n\n```js#Output\nexport default {\n  name: \"John Doe\",\n  age: 35,\n  email: \"johndoe@example.com\"\n}\n```\n\n{% /codetabs %}\n\n### `text`\n\n**Text loader**. Default for `.txt`.\n\nThe contents of the text file are read and inlined into the bundle as a string.\nText files can be directly imported. The file is read and returned as a string.\n\n```ts\nimport contents from \"./file.txt\";\nconsole.log(contents); // => \"Hello, world!\"\n```\n\nWhen referenced during a build, the contents are into the bundle as a string.\n\n```ts\nvar contents = `Hello, world!`;\nconsole.log(contents);\n```\n\nIf a `.txt` file is passed as an entrypoint, it will be converted to a `.js` module that `export default`s the file contents.\n\n{% codetabs %}\n\n```txt#Input\nHello, world!\n```\n\n```js#Output\nexport default \"Hello, world!\";\n```\n\n{% /codetabs %}\n\n### `wasm`\n\n**WebAssembly loader**. Default for `.wasm`.\n\nIn the runtime, WebAssembly files can be directly imported. The file is read and returned as a `WebAssembly.Module`.\n\n```ts\nimport wasm from \"./module.wasm\";\nconsole.log(wasm); // => WebAssembly.Module\n```\n\nIn the bundler, `.wasm` files are handled using the [`file`](#file) loader.\n\n### `napi`\n\n**Native addon loader**. Default for `.node`.\n\nIn the runtime, native addons can be directly imported.\n\n```ts\nimport addon from \"./addon.node\";\nconsole.log(addon);\n```\n\nIn the bundler, `.node` files are handled using the [`file`](#file) loader.\n\n### `file`\n\n**File loader**. Default for all unrecognized file types.\n\nThe file loader resolves the import as a _path/URL_ to the imported file. It's commonly used for referencing media or font assets.\n\n```ts#logo.ts\nimport logo from \"./logo.svg\";\nconsole.log(logo);\n```\n\n_In the runtime_, Bun checks that the `logo.svg` file exists and converts it to an absolute path to the location of `logo.svg` on disk.\n\n```bash\n$ bun run logo.ts\n/path/to/project/logo.svg\n```\n\n_In the bundler_, things are slightly different. The file is copied into `outdir` as-is, and the import is resolved as a relative path pointing to the copied file.\n\n```ts#Output\nvar logo = \"./logo.svg\";\nconsole.log(logo);\n```\n\nIf a value is specified for `publicPath`, the import will use value as a prefix to construct an absolute path/URL.\n\n{% table %}\n\n- Public path\n- Resolved import\n\n---\n\n- `\"\"` (default)\n- `/logo.svg`\n\n---\n\n- `\"/assets\"`\n- `/assets/logo.svg`\n\n---\n\n- `\"https://cdn.example.com/\"`\n- `https://cdn.example.com/logo.svg`\n\n{% /table %}\n\n{% callout %}\nThe location and file name of the copied file is determined by the value of [`naming.asset`](/docs/bundler#naming).\n{% /callout %}\nThis loader is copied into the `outdir` as-is. The name of the copied file is determined using the value of `naming.asset`.\n\n{% details summary=\"Fixing TypeScript import errors\" %}\nIf you're using TypeScript, you may get an error like this:\n\n```ts\n// TypeScript error\n// Cannot find module './logo.svg' or its corresponding type declarations.\n```\n\nThis can be fixed by creating `*.d.ts` file anywhere in your project (any name will work) with the following contents:\n\n```ts\ndeclare module \"*.svg\" {\n  const content: string;\n  export default content;\n}\n```\n\nThis tells TypeScript that any default imports from `.svg` should be treated as a string.\n{% /details %}\n"}
{"filename": "docs/bundler/macros.md", "content": "Macros are a mechanism for running JavaScript functions _at bundle-time_. The value returned from these functions are directly inlined into your bundle.\n\n<!-- embed the result in your (browser) bundle. This is useful for things like embedding the current Git commit hash in your code, making fetch requests to your API at build-time, dead code elimination, and more. -->\n\nAs a toy example, consider this simple function that returns a random number.\n\n```ts\nexport function random() {\n  return Math.random();\n}\n```\n\nThis is just a regular function in a regular file, but we can use it as a macro like so:\n\n```ts#cli.tsx\nimport { random } from './random.ts' with { type: 'macro' };\n\nconsole.log(`Your random number is ${random()}`);\n```\n\n{% callout %}\n**Note** \u2014 Macros are indicated using [_import attribute_](https://github.com/tc39/proposal-import-attributes) syntax. If you haven't seen this syntax before, it's a Stage 3 TC39 proposal that lets you attach additional metadata to `import` statements.\n{% /callout %}\n\nNow we'll bundle this file with `bun build`. The bundled file will be printed to stdout.\n\n```bash\n$ bun build ./cli.tsx\nconsole.log(`Your random number is ${0.6805550949689833}`);\n```\n\nAs you can see, the source code of the `random` function occurs nowhere in the bundle. Instead, it is executed _during bundling_ and function call (`random()`) is replaced with the result of the function. Since the source code will never be included in the bundle, macros can safely perform privileged operations like reading from a database.\n\n## When to use macros\n\nIf you have several build scripts for small things where you would otherwise have a one-off build script, bundle-time code execution can be easier to maintain. It lives with the rest of your code, it runs with the rest of the build, it is automatically parallelized, and if it fails, the build fails too.\n\nIf you find yourself running a lot of code at bundle-time though, consider running a server instead.\n\n## Import attributes\n\nBun Macros are import statements annotated using either:\n\n- `with { type: 'macro' }` \u2014 an [import attribute](https://github.com/tc39/proposal-import-attributes), a Stage 3 ECMA Scrd\n- `assert { type: 'macro' }` \u2014 an import assertion, an earlier incarnation of import attributes that has now been abandoned (but is [already supported](https://caniuse.com/mdn-javascript_statements_import_import_assertions) by a number of browsers and runtimes)\n\n## Security considerations\n\nMacros must explicitly be imported with `{ type: \"macro\" }` in order to be executed at bundle-time. These imports have no effect if they are not called, unlike regular JavaScript imports which may have side effects.\n\nYou can disable macros entirely by passing the `--no-macros` flag to Bun. It produces a build error like this:\n\n```js\nerror: Macros are disabled\n\nfoo();\n^\n./hello.js:3:1 53\n```\n\nTo reduce the potential attack surface for malicious packages, macros cannot be _invoked_ from inside `node_modules/**/*`. If a package attempts to invoke a macro, you'll see an error like this:\n\n```js\nerror: For security reasons, macros cannot be run from node_modules.\n\nbeEvil();\n^\nnode_modules/evil/index.js:3:1 50\n```\n\nYour application code can still import macros from `node_modules` and invoke them.\n\n```ts\nimport {macro} from \"some-package\" with { type: \"macro\" };\n\nmacro();\n```\n\n## Export condition `\"macro\"`\n\nWhen shipping a library containing a macro to `npm` or another package registry, use the `\"macro\"` [export condition](https://nodejs.org/api/packages.html#conditional-exports) to provide a special version of your package exclusively for the macro environment.\n\n```jsonc#package.json\n{\n  \"name\": \"my-package\",\n  \"exports\": {\n    \"import\": \"./index.js\",\n    \"require\": \"./index.js\",\n    \"default\": \"./index.js\",\n    \"macro\": \"./index.macro.js\"\n  }\n}\n```\n\nWith this configuration, users can consume your package at runtime or at bundle-time using the same import specifier:\n\n```ts\nimport pkg from \"my-package\";                            // runtime import\nimport {macro} from \"my-package\" with { type: \"macro\" }; // macro import\n```\n\nThe first import will resolve to `./node_modules/my-package/index.js`, while the second will be resolved by Bun's bundler to `./node_modules/my-package/index.macro.js`.\n\n## Execution\n\nWhen Bun's transpiler sees a macro import, it calls the function inside the transpiler using Bun's JavaScript runtime and converts the return value from JavaScript into an AST node. These JavaScript functions are called at bundle-time, not runtime.\n\nMacros are executed synchronously in the transpiler during the visiting phase\u2014before plugins and before the transpiler generates the AST. They are executed in the order they are imported. The transpiler will wait for the macro to finish executing before continuing. The transpiler will also `await` any `Promise` returned by a macro.\n\nBun's bundler is multi-threaded. As such, macros execute in parallel inside of multiple spawned JavaScript \"workers\".\n\n## Dead code elimination\n\nThe bundler performs dead code elimination _after_ running and inlining macros. So given the following macro:\n\n```ts#returnFalse.ts\nexport function returnFalse() {\n  return false;\n}\n```\n\n...then bundling the following file will produce an empty bundle.\n\n```ts\nimport {returnFalse} from './returnFalse.ts' with { type: 'macro' };\n\nif (returnFalse()) {\n  console.log(\"This code is eliminated\");\n}\n```\n\n## Serializablility\n\nBun's transpiler needs to be able to serialize the result of the macro so it can be inlined into the AST. All JSON-compatible data structures are supported:\n\n```ts#macro.ts\nexport function getObject() {\n  return {\n    foo: \"bar\",\n    baz: 123,\n    array: [ 1, 2, { nested: \"value\" }],\n  };\n}\n```\n\nMacros can be async, or return `Promise` instances. Bun's transpiler will automatically `await` the `Promise` and inline the result.\n\n```ts#macro.ts\nexport async function getText() {\n  return \"async value\";\n}\n```\n\nThe transpiler implements special logic for serializing common data formats like `Response`, `Blob`, `TypedArray`.\n\n- `TypedArray`: Resolves to a base64-encoded string.\n- `Response`: Bun will read the `Content-Type` and serialize accordingly; for instance, a `Response` with type `application/json` will be automatically parsed into an object and `text/plain` will be inlined as a string. Responses with an unrecognized or `undefined` `type` will be base-64 encoded.\n- `Blob`: As with `Response`, the serialization depends on the `type` property.\n\nThe result of `fetch` is `Promise<Response>`, so it can be directly returned.\n\n```ts#macro.ts\nexport function getObject() {\n  return fetch(\"https://bun.sh\")\n}\n```\n\nFunctions and instances of most classes (except those mentioned above) are not serializable.\n\n```ts\nexport function getText(url: string) {\n  // this doesn't work!\n  return () => {};\n}\n```\n\n## Arguments\n\nMacros can accept inputs, but only in limited cases. The value must be statically known. For example, the following is not allowed:\n\n```ts\nimport {getText} from './getText.ts' with { type: 'macro' };\n\nexport function howLong() {\n  // the value of `foo` cannot be statically known\n  const foo = Math.random() ? \"foo\" : \"bar\";\n\n  const text = getText(`https://example.com/${foo}`);\n  console.log(\"The page is \", text.length, \" characters long\");\n}\n```\n\nHowever, if the value of `foo` is known at bundle-time (say, if it's a constant or the result of another macro) then it's allowed:\n\n```ts\nimport {getText} from './getText.ts' with { type: 'macro' };\nimport {getFoo} from './getFoo.ts' with { type: 'macro' };\n\nexport function howLong() {\n  // this works because getFoo() is statically known\n  const foo = getFoo();\n  const text = getText(`https://example.com/${foo}`);\n  console.log(\"The page is\", text.length, \"characters long\");\n}\n```\n\nThis outputs:\n\n```ts\nfunction howLong() {\n  console.log(\"The page is\", 1322, \"characters long\");\n}\nexport { howLong };\n```\n\n## Examples\n\n### Embed latest git commit hash\n\n{% codetabs %}\n\n```ts#getGitCommitHash.ts\nexport function getGitCommitHash() {\n  const {stdout} = Bun.spawnSync({\n    cmd: [\"git\", \"rev-parse\", \"HEAD\"],\n    stdout: \"pipe\",\n  });\n\n  return stdout.toString();\n}\n```\n\n{% /codetabs %}\n\n<!-- --target=browser so they can clearly see it's for browsers -->\n\nWhen we build it, the `getGitCommitHash` is replaced with the result of calling the function:\n\n{% codetabs %}\n\n```ts#input\nimport { getGitCommitHash } from './getGitCommitHash.ts' with { type: 'macro' };\n\nconsole.log(`The current Git commit hash is ${getGitCommitHash()}`);\n```\n\n```bash#output\nconsole.log(`The current Git commit hash is 3ee3259104f`);\n```\n\n{% /codetabs %}\n\nYou're probably thinking \"Why not just use `process.env.GIT_COMMIT_HASH`?\" Well, you can do that too. But can you do this with an environment variable?\n\n### Make `fetch()` requests at bundle-time\n\nIn this example, we make an outgoing HTTP request using `fetch()`, parse the HTML response using `HTMLRewriter`, and return an object containing the title and meta tags\u2013all at bundle-time.\n\n```ts\nexport async function extractMetaTags(url: string) {\n  const response = await fetch(url);\n  const meta = {\n    title: \"\",\n  };\n  new HTMLRewriter()\n    .on(\"title\", {\n      text(element) {\n        meta.title += element.text;\n      },\n    })\n    .on(\"meta\", {\n      element(element) {\n        const name =\n          element.getAttribute(\"name\") || element.getAttribute(\"property\") || element.getAttribute(\"itemprop\");\n\n        if (name) meta[name] = element.getAttribute(\"content\");\n      },\n    })\n    .transform(response);\n\n  return meta;\n}\n```\n\n<!-- --target=browser so they can clearly see it's for browsers -->\n\nThe `extractMetaTags` function is erased at bundle-time and replaced with the result of the function call. This means that the `fetch` request happens at bundle-time, and the result is embedded in the bundle. Also, the branch throwing the error is eliminated since it's unreachable.\n\n{% codetabs %}\n\n```ts#input\nimport { extractMetaTags } from './meta.ts' with { type: 'macro' };\n\nexport const Head = () => {\n  const headTags = extractMetaTags(\"https://example.com\");\n\n  if (headTags.title !== \"Example Domain\") {\n    throw new Error(\"Expected title to be 'Example Domain'\");\n  }\n\n  return <head>\n    <title>{headTags.title}</title>\n    <meta name=\"viewport\" content={headTags.viewport} />\n  </head>;\n};\n```\n\n```ts#output\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nexport const Head = () => {\n  jsxs(\"head\", {\n    children: [\n      jsx(\"title\", {\n        children: \"Example Domain\",\n      }),\n      jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1\",\n      }),\n    ],\n  });\n};\n\nexport { Head };\n```\n\n{% /codetabs %}\n"}
{"filename": "docs/bundler/plugins.md", "content": "{% callout %}\n**Note** \u2014 Introduced in Bun v0.1.11.\n{% /callout %}\n\nBun provides a universal plugin API that can be used to extend both the _runtime_ and _bundler_.\n\nPlugins intercept imports and perform custom loading logic: reading files, transpiling code, etc. They can be used to add support for additional file types, like `.scss` or `.yaml`. In the context of Bun's bundler, plugins can be used to implement framework-level features like CSS extraction, macros, and client-server code co-location.\n\nFor more complete documentation of the Plugin API, see [Runtime > Plugins](/docs/runtime/plugins).\n\n## Usage\n\nA plugin is defined as simple JavaScript object containing a `name` property and a `setup` function. Register a plugin with Bun using the `plugin` function.\n\n```tsx#myPlugin.ts\nimport type { BunPlugin } from \"bun\";\n\nconst myPlugin: BunPlugin = {\n  name: \"Custom loader\",\n  setup(build) {\n    // implementation\n  },\n};\n```\n\nThis plugin can be passed into the `plugins` array when calling `Bun.build`.\n\n```ts\nBun.build({\n  entrypoints: [\"./app.ts\"],\n  outdir: \"./out\",\n  plugins: [myPlugin],\n});\n```\n"}
{"filename": "docs/bundler/vs-esbuild.md", "content": "{% callout %}\n**Note** \u2014 Available in Bun v0.6.0 and later.\n{% /callout %}\n\nBun's bundler API is inspired heavily by [esbuild](https://esbuild.github.io/). Migrating to Bun's bundler from esbuild should be relatively painless. This guide will briefly explain why you might consider migrating to Bun's bundler and provide a side-by-side API comparison reference for those who are already familiar with esbuild's API.\n\nThere are a few behavioral differences to note.\n\n- **Bundling by default**. Unlike esbuild, Bun _always bundles by default_. This is why the `--bundle` flag isn't necessary in the Bun example. To transpile each file individually, use [`Bun.Transpiler`](/docs/api/transpiler).\n- **It's just a bundler**. Unlike esbuild, Bun's bundler does not include a built-in development server or file watcher. It's just a bundler. The bundler is intended for use in conjunction with `Bun.serve` and other runtime APIs to achieve the same effect. As such, all options relating to HTTP/file watching are not applicable.\n\n## Performance\n\nWith an performance-minded API coupled with the extensively optimized Zig-based JS/TS parser, Bun's bundler is 1.75x faster than esbuild on esbuild's [three.js benchmark](https://github.com/oven-sh/bun/tree/main/bench/bundle).\n\n{% image src=\"/images/bundler-speed.png\" caption=\"Bundling 10 copies of three.js from scratch, with sourcemaps and minification\" /%}\n\n## CLI API\n\nBun and esbuild both provide a command-line interface.\n\n```bash\n$ esbuild <entrypoint> --outdir=out --bundle\n$ bun build <entrypoint> --outdir=out\n```\n\nIn Bun's CLI, simple boolean flags like `--minify` do not accept an argument. Other flags like `--outdir <path>` do accept an argument; these flags can be written as `--outdir out` or `--outdir=out`. Some flags like `--define` can be specified several times: `--define foo=bar --define bar=baz`.\n\n{% table %}\n\n- `esbuild`\n- `bun build`\n\n---\n\n- `--bundle`\n- n/a\n- Bun always bundles, use `--no-bundle` to disable this behavior.\n\n---\n\n- `--define:K=V`\n- `--define K=V`\n- Small syntax difference; no colon.\n\n  ```bash\n  $ esbuild --define:foo=bar\n  $ bun build --define foo=bar\n  ```\n\n---\n\n- `--external:<pkg>`\n- `--external <pkg>`\n- Small syntax difference; no colon.\n\n  ```bash\n  $ esbuild --external:react\n  $ bun build --external react\n  ```\n\n---\n\n- `--format`\n- `--format`\n- Bun only supports `\"esm\"` currently but other module formats are planned. esbuild defaults to `\"iife\"`.\n\n---\n\n- `--loader:.ext=loader`\n- `--loader .ext:loader`\n- Bun supports a different set of built-in loaders than esbuild; see [Bundler > Loaders](/docs/bundler/loaders) for a complete reference. The esbuild loaders `dataurl`, `binary`, `base64`, `copy`, and `empty` are not yet implemented.\n\n  The syntax for `--loader` is slightly different.\n\n  ```bash\n  $ esbuild app.ts --bundle --loader:.svg=text\n  $ bun build app.ts --loader .svg:text\n  ```\n\n---\n\n- `--minify`\n- `--minify`\n- No differences\n\n---\n\n- `--outdir`\n- `--outdir`\n- No differences\n\n---\n\n- `--outfile`\n- `--outfile`\n\n---\n\n- `--packages`\n- n/a\n- Not supported\n\n---\n\n- `--platform`\n- `--target`\n- Renamed to `--target` for consistency with tsconfig. Does not support `neutral`.\n\n---\n\n- `--serve`\n- n/a\n- Not applicable\n\n---\n\n- `--sourcemap`\n- `--sourcemap`\n- No differences\n\n---\n\n- `--splitting`\n- `--splitting`\n- No differences\n\n---\n\n- `--target`\n- n/a\n- No supported. Bun's bundler performs no syntactic downleveling at this time.\n\n---\n\n- `--watch`\n- n/a\n- Not applicable\n\n---\n\n- `--allow-overwrite`\n- n/a\n- Overwriting is never allowed\n\n---\n\n- `--analyze`\n- n/a\n- Not supported\n\n---\n\n- `--asset-names`\n- `--asset-naming`\n- Renamed for consistency with `naming` in JS API\n\n---\n\n- `--banner`\n- n/a\n- Not supported\n\n---\n\n- `--certfile`\n- n/a\n- Not applicable\n\n---\n\n- `--charset=utf8`\n- n/a\n- Not supported\n\n---\n\n- `--chunk-names`\n- `--chunk-naming`\n- Renamed for consistency with `naming` in JS API\n\n---\n\n- `--color`\n- n/a\n- Always enabled\n\n---\n\n- `--drop`\n- n/a\n- Not supported\n\n---\n\n- `--entry-names`\n- `--entry-naming`\n- Renamed for consistency with `naming` in JS API\n\n---\n\n- `--footer`\n- n/a\n- Not supported\n\n---\n\n- `--global-name`\n- n/a\n- Not applicable, Bun does not support `iife` output at this time\n\n---\n\n- `--ignore-annotations`\n- n/a\n- Not supported\n\n---\n\n- `--inject`\n- n/a\n- Not supported\n\n---\n\n- `--jsx`\n- `--jsx-runtime <runtime>`\n- Supports `\"automatic\"` (uses `jsx` transform) and `\"classic\"` (uses `React.createElement`)\n\n---\n\n- `--jsx-dev`\n- n/a\n- Bun reads `compilerOptions.jsx` from `tsconfig.json` to determine a default. If `compilerOptions.jsx` is `\"react-jsx\"`, or if `NODE_ENV=production`, Bun will use the `jsx` transform. Otherwise, it uses `jsxDEV`. For any to Bun uses `jsxDEV`. The bundler does not support `preserve`.\n\n---\n\n- `--jsx-factory`\n- `--jsx-factory`\n\n---\n\n- `--jsx-fragment`\n- `--jsx-fragment`\n\n---\n\n- `--jsx-import-source`\n- `--jsx-import-source`\n\n---\n\n- `--jsx-side-effects`\n- n/a\n- JSX is always assumed to be side-effect-free\n\n---\n\n- `--keep-names`\n- n/a\n- Not supported\n\n---\n\n- `--keyfile`\n- n/a\n- Not applicable\n\n---\n\n- `--legal-comments`\n- n/a\n- Not supported\n\n---\n\n- `--log-level`\n- n/a\n- Not supported. This can be set in `bunfig.toml` as `logLevel`.\n\n---\n\n- `--log-limit`\n- n/a\n- Not supported\n\n---\n\n- `--log-override:X=Y`\n- n/a\n- Not supported\n\n---\n\n- `--main-fields`\n- n/a\n- Not supported\n\n---\n\n- `--mangle-cache`\n- n/a\n- Not supported\n\n---\n\n- `--mangle-props`\n- n/a\n- Not supported\n\n---\n\n- `--mangle-quoted`\n- n/a\n- Not supported\n\n---\n\n- `--metafile`\n- n/a\n- Not supported\n\n---\n\n- `--minify-whitespace`\n- `--minify-whitespace`\n\n---\n\n- `--minify-identifiers`\n- `--minify-identifiers`\n\n---\n\n- `--minify-syntax`\n- `--minify-syntax`\n\n---\n\n- `--out-extension`\n- n/a\n- Not supported\n\n---\n\n- `--outbase`\n- `--root`\n\n---\n\n- `--preserve-symlinks`\n- n/a\n- Not supported\n\n---\n\n- `--public-path`\n- `--public-path`\n\n---\n\n- `--pure`\n- n/a\n- Not supported\n\n---\n\n- `--reserve-props`\n- n/a\n- Not supported\n\n---\n\n- `--resolve-extensions`\n- n/a\n- Not supported\n\n---\n\n- `--servedir`\n- n/a\n- Not applicable\n\n---\n\n- `--source-root`\n- n/a\n- Not supported\n\n---\n\n- `--sourcefile`\n- n/a\n- Not supported. Bun does not support `stdin` input yet.\n\n---\n\n- `--sourcemap`\n- `--sourcemap`\n- No differences\n\n---\n\n- `--sources-content`\n- n/a\n- Not supported\n\n---\n\n- `--supported`\n- n/a\n- Not supported\n\n---\n\n- `--tree-shaking`\n- n/a\n- Always `true`\n\n---\n\n- `--tsconfig`\n- `--tsconfig-override`\n\n---\n\n- `--version`\n- n/a\n- Run `bun --version` to see the version of Bun.\n\n{% /table %}\n\n## JavaScript API\n\n{% table %}\n\n- `esbuild.build()`\n- `Bun.build()`\n\n---\n\n- `absWorkingDir`\n- n/a\n- Always set to `process.cwd()`\n\n---\n\n- `alias`\n- n/a\n- Not supported\n\n---\n\n- `allowOverwrite`\n- n/a\n- Always `false`\n\n---\n\n- `assetNames`\n- `naming.asset`\n- Uses same templating syntax as esbuild, but `[ext]` must be included explicitly.\n\n  ```ts\n  Bun.build({\n    entrypoints: [\"./index.tsx\"],\n    naming: {\n      asset: \"[name].[ext]\",\n    },\n  });\n  ```\n\n---\n\n- `banner`\n- n/a\n- Not supported\n\n---\n\n- `bundle`\n- n/a\n- Always `true`. Use [`Bun.Transpiler`](/docs/api/transpiler) to transpile without bundling.\n\n---\n\n- `charset`\n- n/a\n- Not supported\n\n---\n\n- `chunkNames`\n- `naming.chunk`\n- Uses same templating syntax as esbuild, but `[ext]` must be included explicitly.\n\n  ```ts\n  Bun.build({\n    entrypoints: [\"./index.tsx\"],\n    naming: {\n      chunk: \"[name].[ext]\",\n    },\n  });\n  ```\n\n---\n\n- `color`\n- n/a\n- Bun returns logs in the `logs` property of the build result.\n\n---\n\n- `conditions`\n- n/a\n- Not supported. Export conditions priority is determined by `target`.\n\n---\n\n- `define`\n- `define`\n\n---\n\n- `drop`\n- n/a\n- Not supported\n\n---\n\n- `entryNames`\n- `naming` or `naming.entry`\n- Bun supports a `naming` key that can either be a string or an object. Uses same templating syntax as esbuild, but `[ext]` must be included explicitly.\n\n  ```ts\n  Bun.build({\n    entrypoints: [\"./index.tsx\"],\n    // when string, this is equivalent to entryNames\n    naming: \"[name].[ext]\",\n\n    // granular naming options\n    naming: {\n      entry: \"[name].[ext]\",\n      asset: \"[name].[ext]\",\n      chunk: \"[name].[ext]\",\n    },\n  });\n  ```\n\n---\n\n- `entryPoints`\n- `entrypoints`\n- Capitalization difference\n\n---\n\n- `external`\n- `external`\n- No differences\n\n---\n\n- `footer`\n- n/a\n- Not supported\n\n---\n\n- `format`\n- `format`\n- Only supports `\"esm\"` currently. Support for `\"cjs\"` and `\"iife\"` is planned.\n\n---\n\n- `globalName`\n- n/a\n- Not supported\n\n---\n\n- `ignoreAnnotations`\n- n/a\n- Not supported\n\n---\n\n- `inject`\n- n/a\n- Not supported\n\n---\n\n- `jsx`\n- `jsx`\n- Not supported in JS API, configure in `tsconfig.json`\n\n---\n\n- `jsxDev`\n- `jsxDev`\n- Not supported in JS API, configure in `tsconfig.json`\n\n---\n\n- `jsxFactory`\n- `jsxFactory`\n- Not supported in JS API, configure in `tsconfig.json`\n\n---\n\n- `jsxFragment`\n- `jsxFragment`\n- Not supported in JS API, configure in `tsconfig.json`\n\n---\n\n- `jsxImportSource`\n- `jsxImportSource`\n- Not supported in JS API, configure in `tsconfig.json`\n\n---\n\n- `jsxSideEffects`\n- `jsxSideEffects`\n- Not supported in JS API, configure in `tsconfig.json`\n\n---\n\n- `keepNames`\n- n/a\n- Not supported\n\n---\n\n- `legalComments`\n- n/a\n- Not supported\n\n---\n\n- `loader`\n- `loader`\n- Bun supports a different set of built-in loaders than esbuild; see [Bundler > Loaders](/docs/bundler/loaders) for a complete reference. The esbuild loaders `dataurl`, `binary`, `base64`, `copy`, and `empty` are not yet implemented.\n\n---\n\n- `logLevel`\n- n/a\n- Not supported\n\n---\n\n- `logLimit`\n- n/a\n- Not supported\n\n---\n\n- `logOverride`\n- n/a\n- Not supported\n\n---\n\n- `mainFields`\n- n/a\n- Not supported\n\n---\n\n- `mangleCache`\n- n/a\n- Not supported\n\n---\n\n- `mangleProps`\n- n/a\n- Not supported\n\n---\n\n- `mangleQuoted`\n- n/a\n- Not supported\n\n---\n\n- `metafile`\n- n/a\n- Not supported\n\n<!-- - `manifest`\n- When `manifest` is `true`, the result of `Bun.build()` will contain a `manifest` property. The manifest is compatible with esbuild's metafile format. -->\n\n---\n\n- `minify`\n- `minify`\n- In Bun, `minify` can be a boolean or an object.\n\n  ```ts\n  Bun.build({\n    entrypoints: ['./index.tsx'],\n    // enable all minification\n    minify: true\n\n    // granular options\n    minify: {\n      identifiers: true,\n      syntax: true,\n      whitespace: true\n    }\n  })\n  ```\n\n---\n\n- `minifyIdentifiers`\n- `minify.identifiers`\n- See `minify`\n\n---\n\n- `minifySyntax`\n- `minify.syntax`\n- See `minify`\n\n---\n\n- `minifyWhitespace`\n- `minify.whitespace`\n- See `minify`\n\n---\n\n- `nodePaths`\n- n/a\n- Not supported\n\n---\n\n- `outExtension`\n- n/a\n- Not supported\n\n---\n\n- `outbase`\n- `root`\n- Different name\n\n---\n\n- `outdir`\n- `outdir`\n- No differences\n\n---\n\n- `outfile`\n- `outfile`\n- No differences\n\n---\n\n- `packages`\n- n/a\n- Not supported, use `external`\n\n---\n\n- `platform`\n- `target`\n- Supports `\"bun\"`, `\"node\"` and `\"browser\"` (the default). Does not support `\"neutral\"`.\n\n---\n\n- `plugins`\n- `plugins`\n- Bun's plugin API is a subset of esbuild's. Some esbuild plugins will work out of the box with Bun.\n\n---\n\n- `preserveSymlinks`\n- n/a\n- Not supported\n\n---\n\n- `publicPath`\n- `publicPath`\n- No differences\n\n---\n\n- `pure`\n- n/a\n- Not supported\n\n---\n\n- `reserveProps`\n- n/a\n- Not supported\n\n---\n\n- `resolveExtensions`\n- n/a\n- Not supported\n\n---\n\n- `sourceRoot`\n- n/a\n- Not supported\n\n---\n\n- `sourcemap`\n- `sourcemap`\n- Supports `\"inline\"`, `\"external\"`, and `\"none\"`\n\n---\n\n- `sourcesContent`\n- n/a\n- Not supported\n\n---\n\n- `splitting`\n- `splitting`\n- No differences\n\n---\n\n- `stdin`\n- n/a\n- Not supported\n\n---\n\n- `supported`\n- n/a\n- Not supported\n\n---\n\n- `target`\n- n/a\n- No support for syntax downleveling\n\n---\n\n- `treeShaking`\n- n/a\n- Always `true`\n\n---\n\n- `tsconfig`\n- n/a\n- Not supported\n\n---\n\n- `write`\n- n/a\n- Set to `true` if `outdir`/`outfile` is set, otherwise `false`\n\n---\n\n{% /table %}\n\n## Plugin API\n\nBun's plugin API is designed to be esbuild compatible. Bun doesn't support esbuild's entire plugin API surface, but the core functionality is implemented. Many third-party `esbuild` plugins will work out of the box with Bun.\n\n{% callout %}\nLong term, we aim for feature parity with esbuild's API, so if something doesn't work please file an issue to help us prioritize.\n\n{% /callout %}\n\nPlugins in Bun and esbuild are defined with a `builder` object.\n\n```ts\nimport type { BunPlugin } from \"bun\";\n\nconst myPlugin: BunPlugin = {\n  name: \"my-plugin\",\n  setup(builder) {\n    // define plugin\n  },\n};\n```\n\nThe `builder` object provides some methods for hooking into parts of the bundling process. Bun implements `onResolve` and `onLoad`; it does not yet implement the esbuild hooks `onStart`, `onEnd`, and `onDispose`, and `resolve` utilities. `initialOptions` is partially implemented, being read-only and only having a subset of esbuild's options; use [`config`](/docs/bundler/plugins) (same thing but with Bun's `BuildConfig` format) instead.\n\n```ts\nimport type { BunPlugin } from \"bun\";\nconst myPlugin: BunPlugin = {\n  name: \"my-plugin\",\n  setup(builder) {\n    builder.onResolve(\n      {\n        /* onResolve.options */\n      },\n      args => {\n        return {\n          /* onResolve.results */\n        };\n      },\n    );\n    builder.onLoad(\n      {\n        /* onLoad.options */\n      },\n      args => {\n        return {\n          /* onLoad.results */\n        };\n      },\n    );\n  },\n};\n```\n\n### `onResolve`\n\n#### `options`\n\n{% table %}\n\n- \ud83d\udfe2\n- `filter`\n\n---\n\n- \ud83d\udfe2\n- `namespace`\n\n{% /table %}\n\n#### `arguments`\n\n{% table %}\n\n- \ud83d\udfe2\n- `path`\n\n---\n\n- \ud83d\udfe2\n- `importer`\n\n---\n\n- \ud83d\udd34\n- `namespace`\n\n---\n\n- \ud83d\udd34\n- `resolveDir`\n\n---\n\n- \ud83d\udd34\n- `kind`\n\n---\n\n- \ud83d\udd34\n- `pluginData`\n\n{% /table %}\n\n#### `results`\n\n{% table %}\n\n- \ud83d\udfe2\n- `namespace`\n\n---\n\n- \ud83d\udfe2\n- `path`\n\n---\n\n- \ud83d\udd34\n- `errors`\n\n---\n\n- \ud83d\udd34\n- `external`\n\n---\n\n- \ud83d\udd34\n- `pluginData`\n\n---\n\n- \ud83d\udd34\n- `pluginName`\n\n---\n\n- \ud83d\udd34\n- `sideEffects`\n\n---\n\n- \ud83d\udd34\n- `suffix`\n\n---\n\n- \ud83d\udd34\n- `warnings`\n\n---\n\n- \ud83d\udd34\n- `watchDirs`\n\n---\n\n- \ud83d\udd34\n- `watchFiles`\n\n{% /table %}\n\n### `onLoad`\n\n#### `options`\n\n{% table %}\n\n---\n\n- \ud83d\udfe2\n- `filter`\n\n---\n\n- \ud83d\udfe2\n- `namespace`\n\n{% /table %}\n\n#### `arguments`\n\n{% table %}\n\n---\n\n- \ud83d\udfe2\n- `path`\n\n---\n\n- \ud83d\udd34\n- `namespace`\n\n---\n\n- \ud83d\udd34\n- `suffix`\n\n---\n\n- \ud83d\udd34\n- `pluginData`\n\n{% /table %}\n\n#### `results`\n\n{% table %}\n\n---\n\n- \ud83d\udfe2\n- `contents`\n\n---\n\n- \ud83d\udfe2\n- `loader`\n\n---\n\n- \ud83d\udd34\n- `errors`\n\n---\n\n- \ud83d\udd34\n- `pluginData`\n\n---\n\n- \ud83d\udd34\n- `pluginName`\n\n---\n\n- \ud83d\udd34\n- `resolveDir`\n\n---\n\n- \ud83d\udd34\n- `warnings`\n\n---\n\n- \ud83d\udd34\n- `watchDirs`\n\n---\n\n- \ud83d\udd34\n- `watchFiles`\n\n{% /table %}\n"}
{"filename": "docs/cli/bun-completions.md", "content": "This command installs completions for `zsh` and/or `fish`. It runs automatically on every `bun upgrade` and on install. It reads from `$SHELL` to determine which shell to install for. It tries several common shell completion directories for your shell and OS.\n\nIf you want to copy the completions manually, run `bun completions > path-to-file`. If you know the completions directory to install them to, run `bun completions /path/to/directory`.\n"}
{"filename": "docs/cli/bun-dev.md", "content": "In your project folder root (where `package.json` is):\n\n```bash\n$ bun bun ./entry-point-1.js ./entry-point-2.jsx\n$ bun dev\n```\n\nBy default, `bun dev` will look for any HTML files in the `public` directory and serve that. For browsers navigating to the page, the `.html` file extension is optional in the URL, and `index.html` will automatically rewrite for the directory.\n\nHere are examples of routing from `public/` and how they\u2019re matched:\n| Dev Server URL | File Path |\n|----------------|-----------|\n| /dir | public/dir/index.html |\n| / | public/index.html |\n| /index | public/index.html |\n| /hi | public/hi.html |\n| /file | public/file.html |\n| /font/Inter.woff2 | public/font/Inter.woff2 |\n| /hello | public/index.html |\n\nIf `public/index.html` exists, it becomes the default page instead of a 404 page, unless that pathname has a file extension.\n"}
{"filename": "docs/cli/bun-init.md", "content": "`bun init` is a quick way to start a blank project with Bun. It guesses with sane defaults and is non-destructive when run multiple times.\n\n![Demo](https://user-images.githubusercontent.com/709451/183006613-271960a3-ff22-4f7c-83f5-5e18f684c836.gif)\n\nIt creates:\n\n- a `package.json` file with a name that defaults to the current directory name\n- a `tsconfig.json` file or a `jsconfig.json` file, depending if the entry point is a TypeScript file or not\n- an entry point which defaults to `index.ts` unless any of `index.{tsx, jsx, js, mts, mjs}` exist or the `package.json` specifies a `module` or `main` field\n- a `README.md` file\n\nIf you pass `-y` or `--yes`, it will assume you want to continue without asking questions.\n\nAt the end, it runs `bun install` to install `bun-types`.\n\nAdded in Bun v0.1.7.\n\n#### How is `bun init` different than `bun create`?\n\n`bun init` is for blank projects. `bun create` applies templates.\n"}
{"filename": "docs/cli/bun-install.md", "content": "### `bun install`\n\nbun install is a fast package manager & npm client.\n\nbun install can be configured via `bunfig.toml`, environment variables, and CLI flags.\n\n#### Configuring `bun install` with `bunfig.toml`\n\n`bunfig.toml` is searched for in the following paths on `bun install`, `bun remove`, and `bun add`:\n\n1. `$XDG_CONFIG_HOME/.bunfig.toml` or `$HOME/.bunfig.toml`\n2. `./bunfig.toml`\n\nIf both are found, the results are merged together.\n\nConfiguring with `bunfig.toml` is optional. Bun tries to be zero configuration in general, but that's not always possible.\n\n```toml\n# Using scoped packages with bun install\n[install.scopes]\n\n# Scope name      The value can be a URL string or an object\n\"@mybigcompany\" = { token = \"123456\", url = \"https://registry.mybigcompany.com\" }\n# URL is optional and fallsback to the default registry\n\n# The \"@\" in the scope is optional\nmybigcompany2 = { token = \"123456\" }\n\n# Environment variables can be referenced as a string that starts with $ and it will be replaced\nmybigcompany3 = { token = \"$npm_config_token\" }\n\n# Setting username and password turns it into a Basic Auth header by taking base64(\"username:password\")\nmybigcompany4 = { username = \"myusername\", password = \"$npm_config_password\", url = \"https://registry.yarnpkg.com/\" }\n# You can set username and password in the registry URL. This is the same as above.\nmybigcompany5 = \"https://username:password@registry.yarnpkg.com/\"\n\n# You can set a token for a registry URL:\nmybigcompany6 = \"https://:$NPM_CONFIG_TOKEN@registry.yarnpkg.com/\"\n\n[install]\n# Default registry\n# can be a URL string or an object\nregistry = \"https://registry.yarnpkg.com/\"\n# as an object\n#registry = { url = \"https://registry.yarnpkg.com/\", token = \"123456\" }\n\n# Install for production? This is the equivalent to the \"--production\" CLI argument\nproduction = false\n\n# Disallow changes to lockfile? This is the equivalent to the \"--fozen-lockfile\" CLI argument\nfrozenLockfile = false\n\n# Don't actually install\ndryRun = true\n\n# Install optionalDependencies (default: true)\noptional = true\n\n# Install local devDependencies (default: true)\ndev = true\n\n# Install peerDependencies (default: false)\npeer = false\n\n# When using `bun install -g`, install packages here\nglobalDir = \"~/.bun/install/global\"\n\n# When using `bun install -g`, link package bins here\nglobalBinDir = \"~/.bun/bin\"\n\n# cache-related configuration\n[install.cache]\n# The directory to use for the cache\ndir = \"~/.bun/install/cache\"\n\n# Don't load from the global cache.\n# Note: Bun may still write to node_modules/.cache\ndisable = false\n\n\n# Always resolve the latest versions from the registry\ndisableManifest = false\n\n\n# Lockfile-related configuration\n[install.lockfile]\n\n# Print a yarn v1 lockfile\n# Note: it does not load the lockfile, it just converts bun.lockb into a yarn.lock\nprint = \"yarn\"\n\n# Path to read bun.lockb from\npath = \"bun.lockb\"\n\n# Path to save bun.lockb to\nsavePath = \"bun.lockb\"\n\n# Save the lockfile to disk\nsave = true\n\n```\n\nIf it's easier to read as TypeScript types:\n\n```ts\nexport interface Root {\n  install: Install;\n}\n\nexport interface Install {\n  scopes: Scopes;\n  registry: Registry;\n  production: boolean;\n  frozenLockfile: boolean;\n  dryRun: boolean;\n  optional: boolean;\n  dev: boolean;\n  peer: boolean;\n  globalDir: string;\n  globalBinDir: string;\n  cache: Cache;\n  lockfile: Lockfile;\n  logLevel: \"debug\" | \"error\" | \"warn\";\n}\n\ntype Registry =\n  | string\n  | {\n      url?: string;\n      token?: string;\n      username?: string;\n      password?: string;\n    };\n\ntype Scopes = Record<string, Registry>;\n\nexport interface Cache {\n  dir: string;\n  disable: boolean;\n  disableManifest: boolean;\n}\n\nexport interface Lockfile {\n  print?: \"yarn\";\n  path: string;\n  savePath: string;\n  save: boolean;\n}\n```\n\n## Configuring with environment variables\n\nEnvironment variables have a higher priority than `bunfig.toml`.\n\n| Name                             | Description                                                   |\n| -------------------------------- | ------------------------------------------------------------- |\n| BUN_CONFIG_REGISTRY              | Set an npm registry (default: <https://registry.npmjs.org>)   |\n| BUN_CONFIG_TOKEN                 | Set an auth token (currently does nothing)                    |\n| BUN_CONFIG_LOCKFILE_SAVE_PATH    | File path to save the lockfile to (default: bun.lockb)        |\n| BUN_CONFIG_YARN_LOCKFILE         | Save a Yarn v1-style yarn.lock                                |\n| BUN_CONFIG_LINK_NATIVE_BINS      | Point `bin` in package.json to a platform-specific dependency |\n| BUN_CONFIG_SKIP_SAVE_LOCKFILE    | Don\u2019t save a lockfile                                         |\n| BUN_CONFIG_SKIP_LOAD_LOCKFILE    | Don\u2019t load a lockfile                                         |\n| BUN_CONFIG_SKIP_INSTALL_PACKAGES | Don\u2019t install any packages                                    |\n\nBun always tries to use the fastest available installation method for the target platform. On macOS, that\u2019s `clonefile` and on Linux, that\u2019s `hardlink`. You can change which installation method is used with the `--backend` flag. When unavailable or on error, `clonefile` and `hardlink` fallsback to a platform-specific implementation of copying files.\n\nBun stores installed packages from npm in `~/.bun/install/cache/${name}@${version}`. Note that if the semver version has a `build` or a `pre` tag, it is replaced with a hash of that value instead. This is to reduce the chances of errors from long file paths, but unfortunately complicates figuring out where a package was installed on disk.\n\nWhen the `node_modules` folder exists, before installing, Bun checks if the `\"name\"` and `\"version\"` in `package/package.json` in the expected node_modules folder matches the expected `name` and `version`. This is how it determines whether it should install. It uses a custom JSON parser which stops parsing as soon as it finds `\"name\"` and `\"version\"`.\n\nWhen a `bun.lockb` doesn\u2019t exist or `package.json` has changed dependencies, tarballs are downloaded & extracted eagerly while resolving.\n\nWhen a `bun.lockb` exists and `package.json` hasn\u2019t changed, Bun downloads missing dependencies lazily. If the package with a matching `name` & `version` already exists in the expected location within `node_modules`, Bun won\u2019t attempt to download the tarball.\n\n## Platform-specific dependencies?\n\nbun stores normalized `cpu` and `os` values from npm in the lockfile, along with the resolved packages. It skips downloading, extracting, and installing packages disabled for the current target at runtime. This means the lockfile won\u2019t change between platforms/architectures even if the packages ultimately installed do change.\n\n## Peer dependencies?\n\nPeer dependencies are handled similarly to yarn. `bun install` does not automatically install peer dependencies and will try to choose an existing dependency.\n\n## Lockfile\n\n`bun.lockb` is Bun\u2019s binary lockfile format.\n\n## Why is it binary?\n\nIn a word: Performance. Bun\u2019s lockfile saves & loads incredibly quickly, and saves a lot more data than what is typically inside lockfiles.\n\n## How do I inspect it?\n\nFor now, the easiest thing is to run `bun install -y`. That prints a Yarn v1-style yarn.lock file.\n\n## What does the lockfile store?\n\nPackages, metadata for those packages, the hoisted install order, dependencies for each package, what packages those dependencies resolved to, an integrity hash (if available), what each package was resolved to and which version (or equivalent).\n\n## Why is it fast?\n\nIt uses linear arrays for all data. [Packages](https://github.com/oven-sh/bun/blob/be03fc273a487ac402f19ad897778d74b6d72963/src/install/install.zig#L1825) are referenced by an auto-incrementing integer ID or a hash of the package name. Strings longer than 8 characters are de-duplicated. Prior to saving on disk, the lockfile is garbage-collected & made deterministic by walking the package tree and cloning the packages in dependency order.\n\n## Cache\n\nTo delete the cache:\n\n```bash\n$ rm -rf ~/.bun/install/cache\n```\n\n## Platform-specific backends\n\n`bun install` uses different system calls to install dependencies depending on the platform. This is a performance optimization. You can force a specific backend with the `--backend` flag.\n\n**`hardlink`** is the default backend on Linux. Benchmarking showed it to be the fastest on Linux.\n\n```bash\n$ rm -rf node_modules\n$ bun install --backend hardlink\n```\n\n**`clonefile`** is the default backend on macOS. Benchmarking showed it to be the fastest on macOS. It is only available on macOS.\n\n```bash\n$ rm -rf node_modules\n$ bun install --backend clonefile\n```\n\n**`clonefile_each_dir`** is similar to `clonefile`, except it clones each file individually per directory. It is only available on macOS and tends to perform slower than `clonefile`. Unlike `clonefile`, this does not recursively clone subdirectories in one system call.\n\n```bash\n$ rm -rf node_modules\n$ bun install --backend clonefile_each_dir\n```\n\n**`copyfile`** is the fallback used when any of the above fail, and is the slowest. on macOS, it uses `fcopyfile()` and on linux it uses `copy_file_range()`.\n\n```bash\n$ rm -rf node_modules\n$ bun install --backend copyfile\n```\n\n**`symlink`** is typically only used for `file:` dependencies (and eventually `link:`) internally. To prevent infinite loops, it skips symlinking the `node_modules` folder.\n\nIf you install with `--backend=symlink`, Node.js won't resolve node_modules of dependencies unless each dependency has its own node_modules folder or you pass `--preserve-symlinks` to `node`. See [Node.js documentation on `--preserve-symlinks`](https://nodejs.org/api/cli.html#--preserve-symlinks).\n\n```bash\n$ rm -rf node_modules\n$ bun install --backend symlink\n$ node --preserve-symlinks ./my-file.js # https://nodejs.org/api/cli.html#--preserve-symlinks\n```\n\nBun's runtime does not currently expose an equivalent of `--preserve-symlinks`, though the code for it does exist.\n\n## npm registry metadata\n\nbun uses a binary format for caching NPM registry responses. This loads much faster than JSON and tends to be smaller on disk.\nYou will see these files in `~/.bun/install/cache/*.npm`. The filename pattern is `${hash(packageName)}.npm`. It\u2019s a hash so that extra directories don\u2019t need to be created for scoped packages.\n\nBun's usage of `Cache-Control` ignores `Age`. This improves performance, but means bun may be about 5 minutes out of date to receive the latest package version metadata from npm.\n"}
{"filename": "docs/cli/bun-upgrade.md", "content": "To upgrade Bun, run `bun upgrade`.\n\nIt automatically downloads the latest version of Bun and overwrites the currently-running version.\n\nThis works by checking the latest version of Bun in [bun-releases-for-updater](https://github.com/Jarred-Sumner/bun-releases-for-updater/releases) and unzipping it using the system-provided `unzip` library (so that Gatekeeper works on macOS)\n\nIf for any reason you run into issues, you can also use the curl install script:\n\n```bash\n$ curl https://bun.sh/install | bash\n```\n\nIt will still work when Bun is already installed.\n\nBun is distributed as a single binary file, so you can also do this manually:\n\n- Download the latest version of Bun for your platform in [bun-releases-for-updater](https://github.com/Jarred-Sumner/bun-releases-for-updater/releases/latest) (`darwin` == macOS)\n- Unzip the folder\n- Move the `bun` binary to `~/.bun/bin` (or anywhere)\n\n## `--canary`\n\n[Canary](https://github.com/oven-sh/bun/releases/tag/canary) builds are generated on every commit.\n\nTo install a [canary](https://github.com/oven-sh/bun/releases/tag/canary) build of Bun, run:\n\n```bash\n$ bun upgrade --canary\n```\n\nThis flag is not persistent (though that might change in the future). If you want to always run the canary build of Bun, set the `BUN_CANARY` environment variable to `1` in your shell's startup script.\n\nThis will download the release zip from https://github.com/oven-sh/bun/releases/tag/canary.\n\nTo revert to the latest published version of Bun, run:\n\n```bash\n$ bun upgrade\n```\n"}
{"filename": "docs/cli/bundler.md", "content": "Bundling is currently an important mechanism for building complex web apps.\n\nModern apps typically consist of a large number of files and package dependencies. Despite the fact that modern browsers support [ES Module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) imports, it's still too slow to fetch each file via inidividual HTTP requests. _Bundling_ is the process of concatenating several source files into a single large file that can be loaded in a single request.\n\n{% callout %}\n**On bundling** \u2014 Despite recent advances like [`modulepreload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload) and [HTTP/3](https://en.wikipedia.org/wiki/HTTP/3), bundling is still the most performant approach.\n{% /callout %}\n\n## Bundling your app\n\nBun's approach to bundling is a little different from other bundlers. Start by passing your app's entrypoint to `bun bun`.\n\n```bash\n$ bun bun ./app.js\n```\n\nYour entrypoint can be any `js|jsx|ts|tsx|html` file. With this file as a starting point, Bun will construct a graph of imported files and packages, transpile everything, and generate a file called `node_modules.bun`.\n\n## What is `.bun`?\n\n{% callout %}\n**Note** \u2014 [This format may change soon](https://github.com/oven-sh/bun/issues/121)\n{% /callout %}\n\nA `.bun` file contains the pre-transpiled source code of your application, plus a bunch of binary-encoded metadata about your application's structure. as a contains:\n\n- all the bundled source code\n- all the bundled source code metadata\n- project metadata & configuration\n\nHere are some of the questions `.bun` files answer:\n\n- when I import `react/index.js`, where in the `.bun` is the code for that? (not resolving, just the code)\n- what modules of a package are used?\n- what framework is used? (e.g., Next.js)\n- where is the routes directory?\n- how big is each imported dependency?\n- what is the hash of the bundle\u2019s contents? (for etags)\n- what is the name & version of every npm package exported in this bundle?\n- what modules from which packages are used in this project? (\"project\" is defined as all the entry points used to generate the .bun)\n\nAll in one file.\n\nIt\u2019s a little like a build cache, but designed for reuse across builds.\n\n{% details summary=\"Position-independent code\" %}\n\nFrom a design perspective, the most important part of the `.bun` format is how code is organized. Each module is exported by a hash like this:\n\n```js\n// preact/dist/preact.module.js\nexport var $eb6819b = $$m({\n  \"preact/dist/preact.module.js\": (module, exports) => {\n    let n, l, u, i, t, o, r, f, e = {}, c = [], s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n    // ... rest of code\n```\n\nThis makes bundled modules [position-independent](https://en.wikipedia.org/wiki/Position-independent_code). In theory, one could import only the exact modules in-use without reparsing code and without generating a new bundle. One bundle can dynamically become many bundles comprising only the modules in use on the webpage. Thanks to the metadata with the byte offsets, a web server can send each module to browsers [zero-copy](https://en.wikipedia.org/wiki/Zero-copy) using [sendfile](https://man7.org/linux/man-pages/man2/sendfile.2.html). Bun itself is not quite this smart yet, but these optimizations would be useful in production and potentially very useful for React Server Components.\n\nTo see the schema inside, have a look at [`JavascriptBundleContainer`](./src/api/schema.d.ts#:~:text=export%20interface-,JavascriptBundleContainer,-%7B). You can find JavaScript bindings to read the metadata in [src/api/schema.js](./src/api/schema.js). This is not really an API yet. It\u2019s missing the part where it gets the binary data from the bottom of the file. Someday, I want this to be usable by other tools too.\n{% /details %}\n\n## Where is the code?\n\n`.bun` files are marked as executable.\n\nTo print out the code, run `./node_modules.bun` in your terminal or run `bun ./path-to-node_modules.bun`.\n\nHere is a copy-pastable example:\n\n```bash\n$ ./node_modules.bun > node_modules.js\n```\n\nThis works because every `.bun` file starts with this:\n\n```\n#!/usr/bin/env bun\n```\n\nTo deploy to production with Bun, you\u2019ll want to get the code from the `.bun` file and stick that somewhere your web server can find it (or if you\u2019re using Vercel or a Rails app, in a `public` folder).\n\nNote that `.bun` is a binary file format, so just opening it in VSCode or vim might render strangely.\n\n## Advanced\n\nBy default, `bun bun` only bundles external dependencies that are `import`ed or `require`d in either app code or another external dependency. An \"external dependency\" is defined as, \"A JavaScript-like file that has `/node_modules/` in the resolved file path and a corresponding `package.json`\".\n\nTo force Bun to bundle packages which are not located in a `node_modules` folder (i.e., the final, resolved path following all symlinks), add a `bun` section to the root project\u2019s `package.json` with `alwaysBundle` set to an array of package names to always bundle. Here\u2019s an example:\n\n```json\n{\n  \"name\": \"my-package-name-in-here\",\n  \"bun\": {\n    \"alwaysBundle\": [\"@mybigcompany/my-workspace-package\"]\n  }\n}\n```\n\nBundled dependencies are not eligible for Hot Module Reloading. The code is served to browsers & Bun.js verbatim. But, in the future, it may be sectioned off into only parts of the bundle being used. That\u2019s possible in the current version of the `.bun` file (so long as you know which files are necessary), but it\u2019s not implemented yet. Longer-term, it will include all `import` and `export` of each module inside.\n\n## What is the module ID hash?\n\nThe `$eb6819b` hash used here:\n\n```js\nexport var $eb6819b = $$m({\n```\n\nIs generated like this:\n\n1. Murmur3 32-bit hash of `package.name@package.version`. This is the hash uniquely identifying the npm package.\n2. Wyhash 64 of the `package.hash` + `package_path`. `package_path` means \"relative to the root of the npm package, where is the module imported?\". For example, if you imported `react/jsx-dev-runtime.js`, the `package_path` is `jsx-dev-runtime.js`. `react-dom/cjs/react-dom.development.js` would be `cjs/react-dom.development.js`\n3. Truncate the hash generated above to a `u32`\n\nThe implementation details of this module ID hash will vary between versions of Bun. The important part is the metadata contains the module IDs, the package paths, and the package hashes, so it shouldn\u2019t really matter in practice if other tooling wants to make use of any of this.\n"}
{"filename": "docs/cli/bunx.md", "content": "{% callout %}\n**Note** \u2014 `bunx` is an alias for `bun x`. The `bunx` CLI will be auto-installed when you install `bun`.\n{% /callout %}\n\nUse `bunx` to auto-install and run packages from `npm`. It's Bun's equivalent of `npx` or `yarn dlx`.\n\n```bash\n$ bunx cowsay \"Hello world!\"\n```\n\n{% callout %}\n\u26a1\ufe0f **Speed** \u2014 With Bun's fast startup times, `bunx` is [roughly 100x faster](https://twitter.com/jarredsumner/status/1606163655527059458) than `npx` for locally installed packages.\n{% /callout %}\n\nPackages can declare executables in the `\"bin\"` field of their `package.json`. These are known as _package executables_ or _package binaries_.\n\n```jsonc#package.json\n{\n  // ... other fields\n  \"name\": \"my-cli\",\n  \"bin\": {\n    \"my-cli\": \"dist/index.js\"\n  }\n}\n```\n\nThese executables are commonly plain JavaScript files marked with a [shebang line](<https://en.wikipedia.org/wiki/Shebang_(Unix)>) to indicate which program should be used to execute them. The following file indicates that it should be executed with `node`.\n\n```js#dist/index.js\n#!/usr/bin/env node\n\nconsole.log(\"Hello world!\");\n```\n\nThese executables can be run with `bunx`,\n\n```bash\n$ bunx my-cli\n```\n\nAs with `npx`, `bunx` will check for a locally installed package first, then fall back to auto-installing the package from `npm`. Installed packages will be stored in Bun's global cache for future use.\n\n## Arguments and flags\n\nTo pass additional command-line flags and arguments through to the executable, place them after the executable name.\n\n```bash\n$ bunx my-cli --foo bar\n```\n\n## Shebangs\n\nBy default, Bun respects shebangs. If an executable is marked with `#!/usr/bin/env node`, Bun will spin up a `node` process to execute the file. However, in some cases it may be desirable to run executables using Bun's runtime, even if the executable indicates otherwise. To do so, include the `--bun` flag.\n\n```bash\n$ bunx --bun my-cli\n```\n\nThe `--bun` flag must occur _before_ the executable name. Flags that appear _after_ the name are passed through to the executable.\n\n```bash\n$ bunx --bun my-cli # good\n$ bunx my-cli --bun # bad\n```\n\n<!-- ## Environment variables\n\nBun automatically loads environment variables from `.env` files before running a file, script, or executable. The following files are checked, in order:\n\n1. `.env.local` (first)\n2. `NODE_ENV` === `\"production\"` ? `.env.production` : `.env.development`\n3. `.env`\n\nTo debug environment variables, run `bun run env` to view a list of resolved environment variables. -->\n"}
{"filename": "docs/cli/create.md", "content": "## `bun init`\n\nScaffold an empty project with `bun init`. It's an interactive tool.\n\n```bash\n$ bun init\nbun init helps you get started with a minimal project and tries to\nguess sensible defaults. Press ^C anytime to quit.\n\npackage name (quickstart):\nentry point (index.ts):\n\nDone! A package.json file was saved in the current directory.\n + index.ts\n + .gitignore\n + tsconfig.json (for editor auto-complete)\n + README.md\n\nTo get started, run:\n  bun run index.ts\n```\n\nPress `enter` to accept the default answer for each prompt, or pass the `-y` flag to auto-accept the defaults.\n\n## `bun create`\n\nTemplate a new Bun project with `bun create`.\n\n```bash\n$ bun create <template> <destination>\n```\n\n{% callout %}\n**Note** \u2014\u00a0You don\u2019t need `bun create` to use Bun. You don\u2019t need any configuration at all. This command exists to make getting started a bit quicker and easier.\n{% /callout %}\n\nA template can take a number of forms:\n\n```bash\n$ bun create <template>         # an official template (remote)\n$ bun create <username>/<repo>  # a GitHub repo (remote)\n$ bun create <local-template>   # a custom template (local)\n```\n\nRunning `bun create` performs the following steps:\n\n- Download the template (remote templates only)\n- Copy all template files into the destination folder. By default Bun will _not overwrite_ any existing files. Use the `--force` flag to overwrite existing files.\n- Install dependencies with `bun install`.\n- Initialize a fresh Git repo. Opt out with the `--no-git` flag.\n- Run the template's configured `start` script, if defined.\n\n## Official templates\n\nThe following official templates are available.\n\n```bash\nbun create next ./myapp\nbun create react ./myapp\nbun create svelte-kit ./myapp\nbun create elysia ./myapp\nbun create hono ./myapp\nbun create kingworld ./myapp\n```\n\nEach of these corresponds to a directory in the [bun-community/create-templates](https://github.com/bun-community/create-templates) repo. If you think a major framework is missing, please open a PR there. This list will change over time as additional examples are added. To see an up-to-date list, run `bun create` with no arguments.\n\n```bash\n$ bun create\nWelcome to bun! Create a new project by pasting any of the following:\n  <list of templates>\n```\n\n{% callout %}\n\u26a1\ufe0f **Speed** \u2014 At the time of writing, `bun create react app` runs ~11x faster on a M1 Macbook Pro than `yarn create react-app app`.\n{% /callout %}\n\n## GitHub repos\n\nA template of the form `<username>/<repo>` will be downloaded from GitHub.\n\n```bash\n$ bun create ahfarmer/calculator ./myapp\n```\n\nComplete GitHub URLs will also work:\n\n```bash\n$ bun create github.com/ahfarmer/calculator ./myapp\n$ bun create https://github.com/ahfarmer/calculator ./myapp\n```\n\nBun installs the files as they currently exist current default branch (usually `main`). Unlike `git clone` it doesn't download the commit history or configure a remote.\n\n## Local templates\n\n{% callout %}\n**\u26a0\ufe0f Warning** \u2014 Unlike remote templates, running `bun create` with a local template will delete the entire destination folder if it already exists! Be careful.\n{% /callout %}\nBun's templater can be extended to support custom templates defined on your local file system. These templates should live in one of the following directories:\n\n- `$HOME/.bun-create/<name>`: global templates\n- `<project root>/.bun-create/<name>`: project-specific templates\n\n{% callout %}\n**Note** \u2014 You can customize the global template path by setting the `BUN_CREATE_DIR` environment variable.\n{% /callout %}\n\nTo create a local template, navigate to `$HOME/.bun-create` and create a new directory with the desired name of your template.\n\n```bash\n$ cd $HOME/.bun-create\n$ mkdir foo\n$ cd foo\n```\n\nThen, create a `package.json` file in that directory with the following contents:\n\n```json\n{\n  \"name\": \"foo\"\n}\n```\n\nYou can run `bun create foo` elsewhere on your file system to verify that Bun is correctly finding your local template.\n\n{% table %}\n\n---\n\n- `postinstall`\n- runs after installing dependencies\n\n---\n\n- `preinstall`\n- runs before installing dependencies\n\n<!-- ---\n\n- `start`\n- a command to auto-start the application -->\n\n{% /table %}\n\nEach of these can correspond to a string or array of strings. An array of commands will be executed in order. Here is an example:\n\n```json\n{\n  \"name\": \"@bun-examples/simplereact\",\n  \"version\": \"0.0.1\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\"\n  },\n  \"bun-create\": {\n    \"preinstall\": \"echo 'Installing...'\", // a single command\n    \"postinstall\": [\"echo 'Done!'\"], // an array of commands\n    \"start\": \"bun run echo 'Hello world!'\"\n  }\n}\n```\n\nWhen cloning a template, `bun create` will automatically remove the `\"bun-create\"` section from `package.json` before writing it to the destination folder.\n\n## Reference\n\n### CLI flags\n\n{% table %}\n\n- Flag\n- Description\n\n---\n\n- `--force`\n- Overwrite existing files\n\n---\n\n- `--no-install`\n- Skip installing `node_modules` & tasks\n\n---\n\n- `--no-git`\n- Don\u2019t initialize a git repository\n\n---\n\n- `--open`\n- Start & open in-browser after finish\n\n{% /table %}\n\n### Environment variables\n\n{% table %}\n\n- Name\n- Description\n\n---\n\n- `GITHUB_API_DOMAIN`\n- If you\u2019re using a GitHub enterprise or a proxy, you can customize the GitHub domain Bun pings for downloads\n\n---\n\n- `GITHUB_API_TOKEN`\n- This lets `bun create` work with private repositories or if you get rate-limited\n\n{% /table %}\n\n{% details summary=\"How `bun create` works\" %}\n\nWhen you run `bun create ${template} ${destination}`, here\u2019s what happens:\n\nIF remote template\n\n1. GET `registry.npmjs.org/@bun-examples/${template}/latest` and parse it\n2. GET `registry.npmjs.org/@bun-examples/${template}/-/${template}-${latestVersion}.tgz`\n3. Decompress & extract `${template}-${latestVersion}.tgz` into `${destination}`\n\n   - If there are files that would overwrite, warn and exit unless `--force` is passed\n\nIF GitHub repo\n\n1. Download the tarball from GitHub\u2019s API\n2. Decompress & extract into `${destination}`\n\n   - If there are files that would overwrite, warn and exit unless `--force` is passed\n\nELSE IF local template\n\n1. Open local template folder\n2. Delete destination directory recursively\n3. Copy files recursively using the fastest system calls available (on macOS `fcopyfile` and Linux, `copy_file_range`). Do not copy or traverse into `node_modules` folder if exists (this alone makes it faster than `cp`)\n\n4. Parse the `package.json` (again!), update `name` to be `${basename(destination)}`, remove the `bun-create` section from the `package.json` and save the updated `package.json` to disk.\n   - IF Next.js is detected, add `bun-framework-next` to the list of dependencies\n   - IF Create React App is detected, add the entry point in /src/index.{js,jsx,ts,tsx} to `public/index.html`\n   - IF Relay is detected, add `bun-macro-relay` so that Relay works\n5. Auto-detect the npm client, preferring `pnpm`, `yarn` (v1), and lastly `npm`\n6. Run any tasks defined in `\"bun-create\": { \"preinstall\" }` with the npm client\n7. Run `${npmClient} install` unless `--no-install` is passed OR no dependencies are in package.json\n8. Run any tasks defined in `\"bun-create\": { \"preinstall\" }` with the npm client\n9. Run `git init; git add -A .; git commit -am \"Initial Commit\";`\n\n   - Rename `gitignore` to `.gitignore`. NPM automatically removes `.gitignore` files from appearing in packages.\n   - If there are dependencies, this runs in a separate thread concurrently while node_modules are being installed\n   - Using libgit2 if available was tested and performed 3x slower in microbenchmarks\n\n{% /details %}\n"}
{"filename": "docs/cli/install.md", "content": "The `bun` CLI contains a Node.js-compatible package manager designed to be a dramatically faster replacement for `npm`, `yarn`, and `pnpm`. It's a standalone tool that will work in pre-existing Node.js projects; if your project has a `package.json`, `bun install` can help you speed up your workflow.\n\n{% callout %}\n\n**\u26a1\ufe0f 25x faster** \u2014 Switch from `npm install` to `bun install` in any Node.js project to make your installations up to 25x faster.\n\n{% image src=\"https://user-images.githubusercontent.com/709451/147004342-571b6123-17a9-49a2-8bfd-dcfc5204047e.png\" height=\"200\" /%}\n\n{% /callout %}\n\n{% details summary=\"For Linux users\" %}\nThe minimum Linux Kernel version is 5.1. If you're on Linux kernel 5.1 - 5.5, `bun install` should still work, but HTTP requests will be slow due to a lack of support for io_uring's `connect()` operation.\n\nIf you're using Ubuntu 20.04, here's how to install a [newer kernel](https://wiki.ubuntu.com/Kernel/LTSEnablementStack):\n\n```bash\n# If this returns a version >= 5.6, you don't need to do anything\nuname -r\n\n# Install the official Ubuntu hardware enablement kernel\nsudo apt install --install-recommends linux-generic-hwe-20.04\n```\n\n{% /details %}\n\n## Manage dependencies\n\n### `bun install`\n\nTo install all dependencies of a project:\n\n```bash\n$ bun install\n```\n\nOn Linux, `bun install` tends to install packages 20-100x faster than `npm install`. On macOS, it's more like 4-80x.\n\n![package install benchmark](https://user-images.githubusercontent.com/709451/147004342-571b6123-17a9-49a2-8bfd-dcfc5204047e.png)\n\nRunning `bun install` will:\n\n- **Install** all `dependencies`, `devDependencies`, and `optionalDependencies`. Bun does not install `peerDependencies` by default.\n- **Run** your project's `{pre|post}install` and `{pre|post}prepare` scripts at the appropriate time. For security reasons Bun _does not execute_ lifecycle scripts of installed dependencies.\n- **Write** a `bun.lockb` lockfile to the project root.\n\nTo install in production mode (i.e. without `devDependencies`):\n\n```bash\n$ bun install --production\n```\n\nTo install with reproducible dependencies, use `--frozen-lockfile`. If your `package.json` disagrees with `bun.lockb`, Bun will exit with an error. This is useful for production builds and CI environments.\n\n```bash\n$ bun install --frozen-lockfile\n```\n\nTo perform a dry run (i.e. don't actually install anything):\n\n```bash\n$ bun install --dry-run\n```\n\nTo modify logging verbosity:\n\n```bash\n$ bun install --verbose # debug logging\n$ bun install --silent  # no logging\n```\n\n{% details summary=\"Configuring behavior\" %}\nThe default behavior of `bun install` can be configured in `bun.toml`:\n\n```toml\n[install]\n\n# whether to install optionalDependencies\noptional = true\n\n# whether to install devDependencies\ndev = true\n\n# whether to install peerDependencies\npeer = false\n\n# equivalent to `--production` flag\nproduction = false\n\n# equivalent to `--frozen-lockfile` flag\nfrozenLockfile = false\n\n# equivalent to `--dry-run` flag\ndryRun = false\n```\n\n{% /details %}\n\n### `bun add`\n\nTo add a particular package:\n\n```bash\n$ bun add preact\n```\n\nTo specify a version, version range, or tag:\n\n```bash\n$ bun add zod@3.20.0\n$ bun add zod@^3.0.0\n$ bun add zod@latest\n```\n\nTo add a package as a dev dependency (`\"devDependencies\"`):\n\n```bash\n$ bun add --dev @types/react\n$ bun add -d @types/react\n```\n\nTo add a package as an optional dependency (`\"optionalDependencies\"`):\n\n```bash\n$ bun add --optional lodash\n```\n\nTo add a package and pin to the resolved version, use `--exact`. This will resolve the version of the package and add it to your `package.json` with an exact version number instead of a version range.\n\n```bash\n$ bun add react --exact\n```\n\nThis will add the following to your `package.json`:\n\n```jsonc\n{\n  \"dependencies\": {\n    // without --exact\n    \"react\": \"^18.2.0\", // this matches >= 18.2.0 < 19.0.0\n\n    // with --exact\n    \"react\": \"18.2.0\" // this matches only 18.2.0 exactly\n  }\n}\n```\n\nTo install a package globally:\n\n```bash\n$ bun add --global cowsay # or `bun add -g cowsay`\n$ cowsay \"Bun!\"\n ______\n< Bun! >\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n{% details summary=\"Configuring global installation behavior\" %}\n\n```toml\n[install]\n# where `bun install --global` installs packages\nglobalDir = \"~/.bun/install/global\"\n\n# where globally-installed package bins are linked\nglobalBinDir = \"~/.bun/bin\"\n```\n\n{% /details %}\nTo view a complete list of options for a given command:\n\n```bash\n$ bun add --help\n```\n\n### `bun remove`\n\nTo remove a dependency:\n\n```bash\n$ bun remove preact\n```\n\n## Local packages (`bun link`)\n\nUse `bun link` in a local directory to register the current package as a \"linkable\" package.\n\n```bash\n$ cd /path/to/cool-pkg\n$ cat package.json\n{\n  \"name\": \"cool-pkg\",\n  \"version\": \"1.0.0\"\n}\n$ bun link\nbun link v0.5.7 (7416672e)\nSuccess! Registered \"cool-pkg\"\n\nTo use cool-pkg in a project, run:\n  bun link cool-pkg\n\nOr add it in dependencies in your package.json file:\n  \"cool-pkg\": \"link:cool-pkg\"\n```\n\nThis package can now be \"linked\" into other projects using `bun link cool-pkg`. This will create a symlink in the `node_modules` directory of the target project, pointing to the local directory.\n\n```bash\n$ cd /path/to/my-app\n$ bun link cool-pkg\n```\n\nIn addition, the `--save` flag can be used to add `cool-pkg` to the `dependencies` field of your app's package.json with a special version specifier that tells Bun to load from the registered local directory instead of installing from `npm`:\n\n```json-diff\n  {\n    \"name\": \"my-app\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n+     \"cool-pkg\": \"link:cool-pkg\"\n    }\n  }\n```\n\n## Trusted dependencies\n\nUnlike other npm clients, Bun does not execute arbitrary lifecycle scripts for installed dependencies, such as `postinstall`. These scripts represent a potential security risk, as they can execute arbitrary code on your machine.\n\n<!-- Bun maintains an allow-list of popular packages containing `postinstall` scripts that are known to be safe. To run lifecycle scripts for packages that aren't on this list, add the package to `trustedDependencies` in your package.json. -->\n\nTo tell Bun to allow lifecycle scripts for a particular package, add the package to `trustedDependencies` in your package.json.\n\n<!-- ```json-diff\n  {\n    \"name\": \"my-app\",\n    \"version\": \"1.0.0\",\n+   \"trustedDependencies\": {\n+     \"my-trusted-package\": \"*\"\n+   }\n  }\n``` -->\n\n```json-diff\n  {\n    \"name\": \"my-app\",\n    \"version\": \"1.0.0\",\n+   \"trustedDependencies\": [\"my-trusted-package\"]\n  }\n```\n\nBun reads this field and will run lifecycle scripts for `my-trusted-package`.\n\n<!-- If you specify a version range, Bun will only execute lifecycle scripts if the resolved package version matches the range. -->\n<!--\n```json\n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"trustedDependencies\": {\n    \"my-trusted-package\": \"^1.0.0\"\n  }\n}\n``` -->\n\n## Git dependencies\n\nTo add a dependency from a git repository:\n\n```bash\n$ bun install git@github.com:moment/moment.git\n```\n\nBun supports a variety of protocols, including [`github`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#github-urls), [`git`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#git-urls-as-dependencies), `git+ssh`, `git+https`, and many more.\n\n```json\n{\n  \"dependencies\": {\n    \"dayjs\": \"git+https://github.com/iamkun/dayjs.git\",\n    \"lodash\": \"git+ssh://github.com/lodash/lodash.git#4.17.21\",\n    \"moment\": \"git@github.com:moment/moment.git\",\n    \"zod\": \"github:colinhacks/zod\"\n  }\n}\n```\n\n## Tarball dependencies\n\nA package name can correspond to a publically hosted `.tgz` file. During `bun install`, Bun will download and install the package from the specified tarball URL, rather than from the package registry.\n\n```json#package.json\n{\n  \"dependencies\": {\n    \"zod\": \"https://registry.npmjs.org/zod/-/zod-3.21.4.tgz\"\n  }\n}\n```\n\n## CI/CD\n\nLooking to speed up your CI? Use the official `oven-sh/setup-bun` action to install `bun` in a GitHub Actions pipeline.\n\n```yaml#.github/workflows/release.yml\nname: bun-types\njobs:\n  build:\n    name: build-app\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n      - name: Install bun\n        uses: oven-sh/setup-bun@v1\n      - name: Install dependencies\n        run: bun install\n      - name: Build app\n        run: bun run build\n```\n"}
{"filename": "docs/cli/run.md", "content": "The `bun` CLI can be used to execute JavaScript/TypeScript files, `package.json` scripts, and [executable packages](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#bin).\n\n<!-- ## Speed -->\n\n<!--\nPerformance sensitive APIs like `Buffer`, `fetch`, and `Response` are heavily profiled and optimized. Under the hood Bun uses the [JavaScriptCore engine](https://developer.apple.com/documentation/javascriptcore), which is developed by Apple for Safari. It starts and runs faster than V8, the engine used by Node.js and Chromium-based browsers. -->\n\n## Run a file\n\n{% callout %}\nCompare to `node <file>`\n{% /callout %}\n\nUse `bun run` to execute a source file.\n\n```bash\n$ bun run index.js\n```\n\nBun supports TypeScript and JSX out of the box. Every file is transpiled on the fly by Bun's fast native transpiler before being executed.\n\n```bash\n$ bun run index.js\n$ bun run index.jsx\n$ bun run index.ts\n$ bun run index.tsx\n```\n\nThe \"naked\" `bun` command is equivalent to `bun run`.\n\n```bash\n$ bun index.tsx\n```\n\n### `--watch`\n\nTo run a file in watch mode, use the `--watch` flag.\n\n```bash\n$ bun --watch run index.tsx\n```\n\n### `--smol`\n\n{% callout %}\nAdded in Bun v0.7.0.\n{% /callout %}\n\nIn memory-constrained environments, use the `--smol` flag to reduce memory usage at a cost to performance.\n\n```bash\n$ bun --smol run index.tsx\n```\n\n## Run a `package.json` script\n\n{% note %}\nCompare to `npm run <script>` or `yarn <script>`\n{% /note %}\n\nYour `package.json` can define a number of named `\"scripts\"` that correspond to shell commands.\n\n```jsonc\n{\n  // ... other fields\n  \"scripts\": {\n    \"clean\": \"rm -rf dist && echo 'Done.'\",\n    \"dev\": \"bun server.ts\"\n  }\n}\n```\n\nUse `bun <script>` to execute these scripts.\n\n```bash\n$ bun clean\n $ rm -rf dist && echo 'Done.'\n Cleaning...\n Done.\n```\n\nBun executes the script command in a subshell. It checks for the following shells in order, using the first one it finds: `bash`, `sh`, `zsh`.\n\n{% callout %}\n\u26a1\ufe0f The startup time for `npm run` on Linux is roughly 170ms; with Bun it is `6ms`.\n{% /callout %}\n\nIf there is a name conflict between a `package.json` script and a built-in `bun` command (`install`, `dev`, `upgrade`, etc.) Bun's built-in command takes precedence. In this case, use the more explicit `bun run` command to execute your package script.\n\n```bash\n$ bun run dev\n```\n\nTo see a list of available scripts, run `bun run` without any arguments.\n\n```bash\n$ bun run\nquickstart scripts:\n\n bun run clean\n   rm -rf dist && echo 'Done.'\n\n bun run dev\n   bun server.ts\n\n2 scripts\n```\n\nBun respects lifecycle hooks. For instance, `bun run clean` will execute `preclean` and `postclean`, if defined. If the `pre<script>` fails, Bun will not execute the script itself.\n\n## Environment variables\n\nBun automatically loads environment variables from `.env` files before running a file, script, or executable. The following files are checked, in order:\n\n1. `.env.local` (first)\n2. `NODE_ENV` === `\"production\"` ? `.env.production` : `.env.development`\n3. `.env`\n\nTo debug environment variables, run `bun run env` to view a list of resolved environment variables.\n\n## Performance\n\nBun is designed to start fast and run fast.\n\nUnder the hood Bun uses the [JavaScriptCore engine](https://developer.apple.com/documentation/javascriptcore), which is developed by Apple for Safari. In most cases, the startup and running performance is faster than V8, the engine used by Node.js and Chromium-based browsers. Its transpiler and runtime are written in Zig, a modern, high-performance language. On Linux, this translates into startup times [4x faster](https://twitter.com/jarredsumner/status/1499225725492076544) than Node.js.\n\n{% image src=\"/images/bun-run-speed.jpeg\" caption=\"Bun vs Node.js vs Deno running Hello World\" /%}\n\n<!-- If no `node_modules` directory is found in the working directory or above, Bun will abandon Node.js-style module resolution in favor of the `Bun module resolution algorithm`. Under Bun-style module resolution, all packages are _auto-installed_ on the fly into a [global module cache](/docs/install/cache). For full details on this algorithm, refer to [Runtime > Modules](/docs/runtime/modules). -->\n"}
{"filename": "docs/cli/test.md", "content": "Bun ships with a fast built-in test runner. Tests are executed with the Bun runtime, and support the following features.\n\n- TypeScript and JSX\n- Lifecycle hooks\n- Snapshot testing\n- UI & DOM testing\n- Watch mode with `--watch`\n- Script pre-loading with `--preload`\n\n## Run tests\n\n```bash\n$ bun test\n```\n\nTests are written in JavaScript or TypeScript with a Jest-like API. Refer to [Writing tests](/docs/test/writing) for full documentation.\n\n```ts#math.test.ts\nimport { expect, test } from \"bun:test\";\n\ntest(\"2 + 2\", () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\nThe runner recursively searches the working directory for files that match the following patterns:\n\n- `*.test.{js|jsx|ts|tsx}`\n- `*_test.{js|jsx|ts|tsx}`\n- `*.spec.{js|jsx|ts|tsx}`\n- `*_spec.{js|jsx|ts|tsx}`\n\nYou can filter the set of _test files_ to run by passing additional positional arguments to `bun test`. Any test file with a path that matches one of the filters will run. Commonly, these filters will be file or directory names; glob patterns are not yet supported.\n\n```bash\n$ bun test <filter> <filter> ...\n```\n\nTo filter by _test name_, use the `-t`/`--test-name-pattern` flag.\n\n```sh\n# run all tests or test suites with \"addition\" in the name\n$ bun test --test-name-pattern addition\n```\n\nThe test runner runs all tests in a single process. It loads all `--preload` scripts (see [Lifecycle](/docs/test/lifecycle) for details), then runs all tests. If a test fails, the test runner will exit with a non-zero exit code.\n\n## Timeouts\n\nUse the `--timeout` flag to specify a _per-test_ timeout in milliseconds. If a test times out, it will be marked as failed. The default value is `5000`.\n\n```bash\n# default value is 5000\n$ bun test --timeout 20\n```\n\n## Rerun tests\n\nUse the `--rerun-each` flag to run each test multiple times. This is useful for detecting flaky or non-deterministic test failures.\n\n```sh\n$ bun test --rerun-each 100\n```\n\n## Bail out with `--bail`\n\nUse the `--bail` flag to abort the test run early after a pre-determined number of test failures. By default Bun will run all tests and report all failures, but sometimes in CI environments it's preferable to terminate earlier to reduce CPU usage.\n\n```sh\n# bail after 1 failure\n$ bun test --bail\n\n# bail after 10 failure\n$ bun test --bail 10\n```\n\n## Watch mode\n\nSimilar to `bun run`, you can pass the `--watch` flag to `bun test` to watch for changes and re-run tests.\n\n```bash\n$ bun test --watch\n```\n\n## Lifecycle hooks\n\nBun supports the following lifecycle hooks:\n\n| Hook         | Description                 |\n| ------------ | --------------------------- |\n| `beforeAll`  | Runs once before all tests. |\n| `beforeEach` | Runs before each test.      |\n| `afterEach`  | Runs after each test.       |\n| `afterAll`   | Runs once after all tests.  |\n\nThese hooks can be define inside test files, or in a separate file that is preloaded with the `--preload` flag.\n\n```ts\n$ bun test --preload ./setup.ts\n```\n\nSee [Test > Lifecycle](/docs/test/lifecycle) for complete documentation.\n\n## Mocks\n\nCreate mocks with the `mock` function. Mocks are automatically reset between tests.\n\n```ts\nimport { test, expect, mock } from \"bun:test\";\nconst random = mock(() => Math.random());\n\ntest(\"random\", async () => {\n  const val = random();\n  expect(val).toBeGreaterThan(0);\n  expect(random).toHaveBeenCalled();\n  expect(random).toHaveBeenCalledTimes(1);\n});\n```\n\nSee [Test > Mocks](/docs/test/mocks) for complete documentation.\n\n## Snapshot testing\n\nSnapshots are supported by `bun test`. See [Test > Snapshots](/docs/test/snapshots) for complete documentation.\n\n## UI & DOM testing\n\nBun is compatible with popular UI testing libraries:\n\n- [HappyDOM](https://github.com/capricorn86/happy-dom)\n- [DOM Testing Library](https://testing-library.com/docs/dom-testing-library/intro/)\n- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro)\n\nSee [Test > DOM Testing](/docs/test/dom) for complete documentation.\n\n## Performance\n\nBun's test runner is fast.\n\n{% image src=\"/images/buntest.jpeg\" caption=\"Running 266 React SSR tests faster than Jest can print its version number.\" /%}\n\n<!--\nConsider the following directory structure:\n\n```\n.\n\u251c\u2500\u2500 a.test.ts\n\u251c\u2500\u2500 b.test.ts\n\u251c\u2500\u2500 c.test.ts\n\u2514\u2500\u2500 foo\n    \u251c\u2500\u2500 a.test.ts\n    \u2514\u2500\u2500 b.test.ts\n```\n\nTo run both `a.test.ts` files:\n\n```\n$ bun test a\n```\n\nTo run all tests in the `foo` directory:\n\n```\n$ bun test foo\n```\n\nAny test file in the directory with an _absolute path_ that contains one of the targets will run. Glob patterns are not yet supported. -->\n"}
{"filename": "docs/dev/bundev.md", "content": "- pages\n- auto-bundle dependencies\n- pages is function that returns a list of pages?\n- plugins for svelte and vue\n- custom loaders\n- HMR\n- server endpoints\n\n```ts\nBun.serve({});\n```\n"}
{"filename": "docs/dev/cra.md", "content": "To create a new React app:\n\n```bash\n$ bun create react ./app\n$ cd app\n$ bun dev # start dev server\n```\n\nTo use an existing React app:\n\n```bash\n$ bun add -d react-refresh # install React Fast Refresh\n$ bun bun ./src/index.js # generate a bundle for your entry point(s)\n$ bun dev # start the dev server\n```\n\nFrom there, Bun relies on the filesystem for mapping dev server paths to source files. All URL paths are relative to the project root (where `package.json` is located).\n\nHere are examples of routing source code file paths:\n\n| Dev Server URL             | File Path (relative to cwd) |\n| -------------------------- | --------------------------- |\n| /src/components/Button.tsx | src/components/Button.tsx   |\n| /src/index.tsx             | src/index.tsx               |\n| /pages/index.js            | pages/index.js              |\n\nYou do not need to include file extensions in `import` paths. CommonJS-style import paths without the file extension work.\n\nYou can override the public directory by passing `--public-dir=\"path-to-folder\"`.\n\nIf no directory is specified and `./public/` doesn\u2019t exist, Bun will try `./static/`. If `./static/` does not exist, but won\u2019t serve from a public directory. If you pass `--public-dir=./` Bun will serve from the current directory, but it will check the current directory last instead of first.\n"}
{"filename": "docs/dev/css.md", "content": "## With `bun dev`\n\nWhen importing CSS in JavaScript-like loaders, CSS is treated special.\n\nBy default, Bun will transform a statement like this:\n\n```js\nimport \"../styles/global.css\";\n```\n\n### When `platform` is `browser`\n\n```js\nglobalThis.document?.dispatchEvent(\n  new CustomEvent(\"onimportcss\", {\n    detail: \"http://localhost:3000/styles/globals.css\",\n  }),\n);\n```\n\nAn event handler for turning that into a `<link>` is automatically registered when HMR is enabled. That event handler can be turned off either in a framework\u2019s `package.json` or by setting `globalThis[\"Bun_disableCSSImports\"] = true;` in client-side code. Additionally, you can get a list of every .css file imported this way via `globalThis[\"__BUN\"].allImportedStyles`.\n\n### When `platform` is `bun`\n\n```js\n//@import url(\"http://localhost:3000/styles/globals.css\");\n```\n\nAdditionally, Bun exposes an API for SSR/SSG that returns a flat list of URLs to css files imported. That function is `Bun.getImportedStyles()`.\n\n```ts\n// This specifically is for \"framework\" in package.json when loaded via `bun dev`\n// This API needs to be changed somewhat to work more generally with Bun.js\n// Initially, you could only use Bun.js through `bun dev`\n// and this API was created at that time\naddEventListener(\"fetch\", async (event: FetchEvent) => {\n  let route = Bun.match(event);\n  const App = await import(\"pages/_app\");\n\n  // This returns all .css files that were imported in the line above.\n  // It\u2019s recursive, so any file that imports a CSS file will be included.\n  const appStylesheets = bun.getImportedStyles();\n\n  // ...rest of code\n});\n```\n\nThis is useful for preventing flash of unstyled content.\n\n## With `bun bun`\n\nBun bundles `.css` files imported via `@import` into a single file. It doesn\u2019t autoprefix or minify CSS today. Multiple `.css` files imported in one JavaScript file will _not_ be bundled into one file. You\u2019ll have to import those from a `.css` file.\n\nThis input:\n\n```css\n@import url(\"./hi.css\");\n@import url(\"./hello.css\");\n@import url(\"./yo.css\");\n```\n\nBecomes:\n\n```css\n/* hi.css */\n/* ...contents of hi.css */\n/* hello.css */\n/* ...contents of hello.css */\n/* yo.css */\n/* ...contents of yo.css */\n```\n\n## CSS runtime\n\nTo support hot CSS reloading, Bun inserts `@supports` annotations into CSS that tag which files a stylesheet is composed of. Browsers ignore this, so it doesn\u2019t impact styles.\n\nBy default, Bun\u2019s runtime code automatically listens to `onimportcss` and will insert the `event.detail` into a `<link rel=\"stylesheet\" href={${event.detail}}>` if there is no existing `link` tag with that stylesheet. That\u2019s how Bun\u2019s equivalent of `style-loader` works.\n"}
{"filename": "docs/dev/discord.md", "content": "## Creating a Discord bot with Bun\n\nDiscord bots perform actions in response to _application commands_. There are 3 types of commands accessible in different interfaces: the chat input, a message's context menu (top-right menu or right-clicking in a message), and a user's context menu (right-clicking on a user).\n\nTo get started you can use the interactions template:\n\n```bash\nbun create discord-interactions my-interactions-bot\ncd my-interactions-bot\n```\n\nIf you don't have a Discord bot/application yet, you can create one [here (https://discord.com/developers/applications/me)](https://discord.com/developers/applications/me).\n\nInvite bot to your server by visiting `https://discord.com/api/oauth2/authorize?client_id=<your_application_id>&scope=bot%20applications.commands`\n\nAfterwards you will need to get your bot's token, public key, and application id from the application page and put them into `.env.example` file\n\nThen you can run the http server that will handle your interactions:\n\n```bash\n$ bun install\n$ mv .env.example .env\n$ bun run.js # listening on port 1337\n```\n\nDiscord does not accept an insecure HTTP server, so you will need to provide an SSL certificate or put the interactions server behind a secure reverse proxy. For development, you can use ngrok/cloudflare tunnel to expose local ports as secure URL.\n"}
{"filename": "docs/dev/frameworks.md", "content": "{% callout %}\n**Warning** \u2014 This will soon have breaking changes. It was designed when Bun was mostly a dev server and not a JavaScript runtime.\n{% /callout %}\n\nFrameworks preconfigure Bun to enable developers to use Bun with their existing tooling.\n\nFrameworks are configured via the `framework` object in the `package.json` of the framework (not in the application\u2019s `package.json`):\n\nHere is an example:\n\n```json\n{\n  \"name\": \"bun-framework-next\",\n  \"version\": \"0.0.0-18\",\n  \"description\": \"\",\n  \"framework\": {\n    \"displayName\": \"Next.js\",\n    \"static\": \"public\",\n    \"assetPrefix\": \"_next/\",\n    \"router\": {\n      \"dir\": [\"pages\", \"src/pages\"],\n      \"extensions\": [\".js\", \".ts\", \".tsx\", \".jsx\"]\n    },\n    \"css\": \"onimportcss\",\n    \"development\": {\n      \"client\": \"client.development.tsx\",\n      \"fallback\": \"fallback.development.tsx\",\n      \"server\": \"server.development.tsx\",\n      \"css\": \"onimportcss\",\n      \"define\": {\n        \"client\": {\n          \".env\": \"NEXT_PUBLIC_\",\n          \"defaults\": {\n            \"process.env.__NEXT_TRAILING_SLASH\": \"false\",\n            \"process.env.NODE_ENV\": \"\\\"development\\\"\",\n            \"process.env.__NEXT_ROUTER_BASEPATH\": \"''\",\n            \"process.env.__NEXT_SCROLL_RESTORATION\": \"false\",\n            \"process.env.__NEXT_I18N_SUPPORT\": \"false\",\n            \"process.env.__NEXT_HAS_REWRITES\": \"false\",\n            \"process.env.__NEXT_ANALYTICS_ID\": \"null\",\n            \"process.env.__NEXT_OPTIMIZE_CSS\": \"false\",\n            \"process.env.__NEXT_CROSS_ORIGIN\": \"''\",\n            \"process.env.__NEXT_STRICT_MODE\": \"false\",\n            \"process.env.__NEXT_IMAGE_OPTS\": \"null\"\n          }\n        },\n        \"server\": {\n          \".env\": \"NEXT_\",\n          \"defaults\": {\n            \"process.env.__NEXT_TRAILING_SLASH\": \"false\",\n            \"process.env.__NEXT_OPTIMIZE_FONTS\": \"false\",\n            \"process.env.NODE_ENV\": \"\\\"development\\\"\",\n            \"process.env.__NEXT_OPTIMIZE_IMAGES\": \"false\",\n            \"process.env.__NEXT_OPTIMIZE_CSS\": \"false\",\n            \"process.env.__NEXT_ROUTER_BASEPATH\": \"''\",\n            \"process.env.__NEXT_SCROLL_RESTORATION\": \"false\",\n            \"process.env.__NEXT_I18N_SUPPORT\": \"false\",\n            \"process.env.__NEXT_HAS_REWRITES\": \"false\",\n            \"process.env.__NEXT_ANALYTICS_ID\": \"null\",\n            \"process.env.__NEXT_CROSS_ORIGIN\": \"''\",\n            \"process.env.__NEXT_STRICT_MODE\": \"false\",\n            \"process.env.__NEXT_IMAGE_OPTS\": \"null\",\n            \"global\": \"globalThis\",\n            \"window\": \"undefined\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nHere are type definitions:\n\n```ts\ntype Framework = Environment & {\n  // This changes what\u2019s printed in the console on load\n  displayName?: string;\n\n  // This allows a prefix to be added (and ignored) to requests.\n  // Useful for integrating an existing framework that expects internal routes to have a prefix\n  // e.g. \"_next\"\n  assetPrefix?: string;\n\n  development?: Environment;\n  production?: Environment;\n\n  // The directory used for serving unmodified assets like fonts and images\n  // Defaults to \"public\" if exists, else \"static\", else disabled.\n  static?: string;\n\n  // \"onimportcss\" disables the automatic \"onimportcss\" feature\n  // If the framework does routing, you may want to handle CSS manually\n  // \"facade\" removes CSS imports from JavaScript files,\n  //    and replaces an imported object with a proxy that mimics CSS module support without doing any class renaming.\n  css?: \"onimportcss\" | \"facade\";\n\n  // Bun's filesystem router\n  router?: Router;\n};\n\ntype Define = {\n  // By passing \".env\", Bun will automatically load .env.local, .env.development, and .env if exists in the project root\n  //    (in addition to the processes\u2019 environment variables)\n  // When \"*\", all environment variables will be automatically injected into the JavaScript loader\n  // When a string like \"NEXT_PUBLIC_\", only environment variables starting with that prefix will be injected\n\n  \".env\": string | \"*\";\n\n  // These environment variables will be injected into the JavaScript loader\n  // These are the equivalent of Webpack\u2019s resolve.alias and esbuild\u2019s --define.\n  // Values are parsed as JSON, so they must be valid JSON. The only exception is '' is a valid string, to simplify writing stringified JSON in JSON.\n  // If not set, `process.env.NODE_ENV` will be transformed into \"development\".\n  \"defaults\": Record<string, string>;\n};\n\ntype Environment = {\n  // This is a wrapper for the client-side entry point for a route.\n  // This allows frameworks to run initialization code on pages.\n  client: string;\n  // This is a wrapper for the server-side entry point for a route.\n  // This allows frameworks to run initialization code on pages.\n  server: string;\n  // This runs when \"server\" code fails to load due to an exception.\n  fallback: string;\n\n  // This is how environment variables and .env is configured.\n  define?: Define;\n};\n\n// Bun's filesystem router\n// Currently, Bun supports pages by either an absolute match or a parameter match.\n// pages/index.tsx will be executed on navigation to \"/\" and \"/index\"\n// pages/posts/[id].tsx will be executed on navigation to \"/posts/123\"\n// Routes & parameters are automatically passed to `fallback` and `server`.\ntype Router = {\n  // This determines the folder to look for pages\n  dir: string[];\n\n  // These are the allowed file extensions for pages.\n  extensions?: string[];\n};\n```\n\nTo use a framework, you pass `bun bun --use package-name`.\n\nYour framework\u2019s `package.json` `name` should start with `bun-framework-`. This is so that people can type something like `bun bun --use next` and it will check `bun-framework-next` first. This is similar to how Babel plugins tend to start with `babel-plugin-`.\n\nFor developing frameworks, you can also do `bun bun --use ./relative-path-to-framework`.\n\nIf you\u2019re interested in adding a framework integration, please reach out. There\u2019s a lot here, and it\u2019s not entirely documented yet.\n"}
{"filename": "docs/dev/nextjs.md", "content": "To create a new Next.js app with bun:\n\n```bash\n$ bun create next ./app\n$ cd app\n$ bun dev # start dev server\n```\n\nTo use an existing Next.js app with bun:\n\n```bash\n$ bun add bun-framework-next\n$ echo \"framework = 'next'\" > bunfig.toml\n$ bun bun # bundle dependencies\n$ bun dev # start dev server\n```\n\nMany of Next.js\u2019 features are supported, but not all.\n\nHere\u2019s what doesn\u2019t work yet:\n\n- `getStaticPaths`\n- same-origin `fetch` inside of `getStaticProps` or `getServerSideProps`\n- locales, zones, `assetPrefix` (workaround: change `--origin \\\"http://localhost:3000/assetPrefixInhere\\\"`)\n- `next/image` is polyfilled to a regular `<img src>` tag.\n- `proxy` and anything else in `next.config.js`\n- API routes, middleware (middleware is easier to support, though! Similar SSR API)\n- styled-jsx (technically not Next.js, but often used with it)\n- React Server Components\n\nWhen using Next.js, Bun automatically reads configuration from `.env.local`, `.env.development` and `.env` (in that order). `process.env.NEXT_PUBLIC_` and `process.env.NEXT_` automatically are replaced via `--define`.\n\nCurrently, any time you import new dependencies from `node_modules`, you will need to re-run `bun bun --use next`. This will eventually be automatic.\n"}
{"filename": "docs/ecosystem/buchta.md", "content": "[Buchta](https://buchtajs.com) is a fullstack framework designed to take full advantage of Bun's strengths. It currently supports Preact and Svelte.\n\nTo get started:\n\n```bash\n$ bunx buchta init myapp\nProject templates: \n- svelte\n- default\n- preact\nName of template: preact  \nDo you want TSX? y  \nDo you want SSR? y\nEnable livereload? y\nBuchta Preact project was setup successfully!\n$ cd myapp\n$ bun install\n$ bunx buchta serve\n```\n\nTo implement a simple HTTP server with Buchta:\n\n```ts#server.ts\nimport { Buchta, type BuchtaRequest, type BuchtaResponse } from \"buchta\";\n\nconst app = new Buchta();\n\napp.get(\"/api/hello/\", (req: BuchtaRequest, res: BuchtaResponse) => {\n  res.send(\"Hello, World!\");\n});\n\napp.run();\n```\n\n\nFor more information, refer to Buchta's [documentation](https://buchtajs.com/docs/)."}
{"filename": "docs/ecosystem/elysia.md", "content": "[Elysia](https://elysiajs.com) is a Bun-first performance focused web framework that takes full advantage of Bun's HTTP, file system, and hot reloading APIs.\nDesigned with TypeScript in mind, you don't need to understand TypeScript to gain the benefit of TypeScript with Elysia. The library understands what you want and automatically infers the type from your code.\n\n\u26a1\ufe0f Elysia is [one of the fastest Bun web frameworks](https://github.com/SaltyAom/bun-http-framework-benchmark)\n\n```ts#server.ts\nimport { Elysia } from 'elysia'\n\nconst app = new Elysia()\n\t.get('/', () => 'Hello Elysia')\n\t.listen(8080)\n\nconsole.log(`\ud83e\udd8a Elysia is running at on port ${app.server.port}...`)\n```\n\nGet started with `bun create`.\n\n```bash\n$ bun create elysia ./myapp\n$ cd myapp\n$ bun run dev\n```\n\nRefer to the Elysia [documentation](https://elysiajs.com/quick-start.html) for more information.\n"}
{"filename": "docs/ecosystem/express.md", "content": "Projects that use Express and other major Node.js HTTP libraries should work out of the box.\n\n{% callout %}\nIf you run into bugs, [please file an issue](https://bun.sh/issues) _in Bun's repo_, not the library. It is Bun's responsibility to address Node.js compatibility issues.\n{% /callout %}\n\n```ts\nimport express from \"express\";\n\nconst app = express();\nconst port = 8080;\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () => {\n  console.log(`Listening on port ${port}...`);\n});\n```\n\nBun implements the [`node:http`](https://nodejs.org/api/http.html) and [`node:https`](https://nodejs.org/api/https.html) modules that these libraries rely on. These modules can also be used directly, though [`Bun.serve`](/docs/api/http) is recommended for most use cases.\n\n{% callout %}\n**Note** \u2014 Refer to the [Runtime > Node.js APIs](/docs/runtime/nodejs-apis#node-http) page for more detailed compatibility information.\n{% /callout %}\n\n```ts\nimport * as http from \"node:http\";\n\nhttp\n  .createServer(function (req, res) {\n    res.write(\"Hello World!\");\n    res.end();\n  })\n  .listen(8080);\n```\n"}
{"filename": "docs/ecosystem/hono.md", "content": "[Hono](https://github.com/honojs/hono) is a lightweight ultrafast web framework designed for the edge.\n\n```ts\nimport { Hono } from \"hono\";\nconst app = new Hono();\n\napp.get(\"/\", c => c.text(\"Hono!\"));\n\nexport default app;\n```\n\nGet started with `bun create` or follow Hono's [Bun quickstart](https://hono.dev/getting-started/bun).\n\n```bash\n$ bun create hono ./myapp\n$ cd myapp\n$ bun run start\n```\n"}
{"filename": "docs/ecosystem/react.md", "content": "Bun supports `.jsx` and `.tsx` files out of the box. Bun's internal transpiler converts JSX syntax into vanilla JavaScript before execution.\n\n```tsx#react.tsx\nfunction Component(props: {message: string}) {\n  return (\n    <body>\n      <h1 style={{color: 'red'}}>{props.message}</h1>\n    </body>\n  );\n}\n\nconsole.log(<Component message=\"Hello world!\" />);\n```\n\nBun implements special logging for JSX to make debugging easier.\n\n```bash\n$ bun run react.tsx\n<Component message=\"Hello world!\" />\n```\n\n### Prop punning\n\nThe Bun runtime also supports \"prop punning\" for JSX. This is a shorthand syntax useful for assigning a variable to a prop with the same name.\n\n```tsx\nfunction Div(props: {className: string;}) {\n  const {className} = props;\n\n  // without punning\n  return <div className={className} />;\n  // with punning\n  return <div {className} />;\n}\n```\n\n### Server-side rendering\n\nTo server-side render (SSR) React in an [HTTP server](/docs/api/http):\n\n```tsx#ssr.tsx\nimport {renderToReadableStream} from 'react-dom/server';\n\nfunction Component(props: {message: string}) {\n  return (\n    <body>\n      <h1 style={{color: 'red'}}>{props.message}</h1>\n    </body>\n  );\n}\n\nBun.serve({\n  port: 4000,\n  async fetch() {\n    const stream = await renderToReadableStream(\n      <Component message=\"Hello from server!\" />\n    );\n    return new Response(stream, {\n      headers: {'Content-Type': 'text/html'},\n    });\n  },\n});\n```\n\nReact `18.3` and later includes an [SSR optimization](https://github.com/facebook/react/pull/25597) that takes advantage of Bun's \"direct\" `ReadableStream` implementation.\n"}
{"filename": "docs/ecosystem/stric.md", "content": "[Stric](https://github.com/bunsvr) is a minimalist, fast web framework for Bun.\n\n```ts#index.ts\nimport { Router } from '@stricjs/router';\n\n// Export the fetch handler and serve with Bun\nexport default new Router()\n  // Return 'Hi' on every request\n  .get('/', () => new Response('Hi'));\n```\n\nStric provides support for [ArrowJS](https://www.arrow-js.com), a library for building reactive interfaces. \n\n{% codetabs %}\n\n```ts#src/App.ts\nimport { html } from '@stricjs/arrow/utils';\n\n// Code inside this function can use web APIs\nexport function render() {\n  // Render a <p> element with text 'Hi'\n  html`<p>Hi</p>`;\n};\n\n// Set the path to handle\nexport const path = '/';\n```\n```ts#index.ts\nimport { PageRouter } from '@stricjs/arrow';\n\n// Create a page router, build and serve directly\nnew PageRouter().serve();\n```\n\n{% /codetabs %}\n\nFor more info, see Stric's [documentation](https://stricjs.gitbook.io/docs).\n"}
{"filename": "docs/guides/binary/arraybuffer-to-array.md", "content": "---\nname: Convert an ArrayBuffer to an array of numbers\n---\n\nTo retrieve the contents of an `ArrayBuffer` as an array of numbers, create a [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) over of the buffer. and use the [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) method to convert it to an array.\n\n```ts\nconst buf = new ArrayBuffer(64);\nconst arr = new Uint8Array(buf);\narr.length; // 64\narr[0]; // 0 (instantiated with all zeros)\n```\n\n---\n\nThe `Uint8Array` class supports array indexing and iteration. However if you wish to convert the instance to a regular `Array`, use `Array.from()`. (This will likely be slower than using the `Uint8Array` directly.)\n\n```ts\nconst buf = new ArrayBuffer(64);\nconst uintArr = new Uint8Array(buf);\nconst regularArr = Array.from(uintArr);\n// number[]\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/arraybuffer-to-blob.md", "content": "---\nname: Convert an ArrayBuffer to a Blob\n---\n\nA [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) can be constructed from an array of \"chunks\", where each chunk is a string, binary data structure, or another `Blob`.\n\n```ts\nconst buf = new ArrayBuffer(64);\nconst blob = new Blob([buf]);\n```\n\n---\n\nBy default the `type` of the resulting `Blob` will be unset. This can be set manually.\n\n```ts\nconst buf = new ArrayBuffer(64);\nconst blob = new Blob([buf], { type: \"application/octet-stream\" });\nblob.type; // => \"application/octet-stream\"\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/arraybuffer-to-buffer.md", "content": "---\nname: Convert an ArrayBuffer to a Buffer\n---\n\nThe Node.js [`Buffer`](https://nodejs.org/api/buffer.html) API predates the introduction of `ArrayBuffer` into the JavaScript language. Bun implements both.\n\nUse the static `Buffer.from()` method to create a `Buffer` from an `ArrayBuffer`.\n\n```ts\nconst arrBuffer = new ArrayBuffer(64);\nconst nodeBuffer = Buffer.from(arrBuffer);\n```\n\n---\n\nTo create a `Buffer` that only views a portion of the underlying buffer, pass the offset and length to the constructor.\n\n```ts\nconst arrBuffer = new ArrayBuffer(64);\nconst nodeBuffer = Buffer.from(arrBuffer, 0, 16); // view first 16 bytes\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/arraybuffer-to-string.md", "content": "---\nname: Convert an ArrayBuffer to a string\n---\n\nBun implements the Web-standard [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) class for converting between binary data types and strings.\n\n```ts\nconst buf = new ArrayBuffer(64);\nconst decoder = new TextDecoder();\nconst str = decoder.decode(buf);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/arraybuffer-to-typedarray.md", "content": "---\nname: Convert an ArrayBuffer to a Uint8Array\n---\n\nA `Uint8Array` is a _typed array_, meaning it is a mechanism for viewing the data in an underlying `ArrayBuffer`.\n\n```ts\nconst buffer = new ArrayBuffer(64);\nconst arr = new Uint8Array(buffer);\n```\n\n---\n\nInstances of other typed arrays can be created similarly.\n\n```ts\nconst buffer = new ArrayBuffer(64);\n\nconst arr1 = new Uint8Array(buffer);\nconst arr2 = new Uint16Array(buffer);\nconst arr3 = new Uint32Array(buffer);\nconst arr4 = new Float32Array(buffer);\nconst arr5 = new Float64Array(buffer);\nconst arr6 = new BigInt64Array(buffer);\nconst arr7 = new BigUint64Array(buffer);\n```\n\n---\n\nTo create a typed array that only views a portion of the underlying buffer, pass the offset and length to the constructor.\n\n```ts\nconst buffer = new ArrayBuffer(64);\nconst arr = new Uint8Array(buffer, 0, 16); // view first 16 bytes\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/binary/blob-to-arraybuffer.md", "content": "---\nname: Convert a Blob to an ArrayBuffer\n---\n\nThe [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) class provides a number of methods for consuming its contents in different formats, including `.arrayBuffer()`.\n\n```ts\nconst blob = new Blob([\"hello world\"]);\nconst buf = await blob.arrayBuffer();\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/blob-to-dataview.md", "content": "---\nname: Convert a Blob to a DataView\n---\n\nThe [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) class provides a number of methods for consuming its contents in different formats. This snippets reads the contents to an `ArrayBuffer`, then creates a `DataView` from the buffer.\n\n```ts\nconst blob = new Blob([\"hello world\"]);\nconst arr = new DataView(await blob.arrayBuffer());\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/blob-to-stream.md", "content": "---\nname: Convert a Blob to a ReadableStream\n---\n\nThe [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) class provides a number of methods for consuming its contents in different formats, inluding `.stream()`. This returns `Promise<ReadableStream>`.\n\n```ts\nconst blob = new Blob([\"hello world\"]);\nconst stream = await blob.stream();\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/blob-to-string.md", "content": "---\nname: Convert a Blob to a string\n---\n\nThe [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) class provides a number of methods for consuming its contents in different formats, inluding `.text()`.\n\n```ts\nconst blob = new Blob([\"hello world\"]);\nconst str = await blob.text();\n// => \"hello world\"\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/blob-to-typedarray.md", "content": "---\nname: Convert a Blob to a Uint8Array\n---\n\nThe [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) class provides a number of methods for consuming its contents in different formats. This snippets reads the contents to an `ArrayBuffer`, then creates a `Uint8Array` from the buffer.\n\n```ts\nconst blob = new Blob([\"hello world\"]);\nconst arr = new Uint8Array(await blob.arrayBuffer());\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/buffer-to-arraybuffer.md", "content": "---\nname: Convert a Buffer to an ArrayBuffer\n---\n\nThe Node.js [`Buffer`](https://nodejs.org/api/buffer.html) class provides a way to view and manipulate data in an underlying `ArrayBuffer`, which is available via the `buffer` property.\n\n```ts\nconst nodeBuf = Buffer.alloc(64);\nconst arrBuf = nodeBuf.buffer;\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/buffer-to-blob.md", "content": "---\nname: Convert a Buffer to a blob\n---\n\nA [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) can be constructed from an array of \"chunks\", where each chunk is a string, binary data structure (including `Buffer`), or another `Blob`.\n\n```ts\nconst buf = Buffer.from(\"hello\");\nconst blob = new Blob([buf]);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/buffer-to-readablestream.md", "content": "---\nname: Convert a Buffer to a ReadableStream\n---\n\nThe naive approach to creating a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) from a [`Buffer`](https://nodejs.org/api/buffer.html) is to use the `ReadableStream` constructor and enqueue the entire array as a single chunk. For a large buffer, this may be undesirable as this approach does not \"streaming\" the data in smaller chunks.\n\n```ts\nconst buf = Buffer.from(\"hello world\");\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(buf);\n    controller.close();\n  },\n});\n```\n\n---\n\nTo stream the data in smaller chunks, first create a `Blob` instance from the `Buffer`. Then use the [`Blob.stream()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/stream) method to create a `ReadableStream` that streams the data in chunks of a specified size.\n\n```ts\nconst buf = Buffer.from(\"hello world\");\nconst blob = new Blob([buf]);\nconst stream = blob.stream();\n```\n\n---\n\nThe chunk size can be set by passing a number to the `.stream()` method.\n\n```ts\nconst buf = Buffer.from(\"hello world\");\nconst blob = new Blob([buf]);\n\n// set chunk size of 1024 bytes\nconst stream = blob.stream(1024);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/buffer-to-string.md", "content": "---\nname: Convert a Buffer to a string\n---\n\nThe [`Buffer`](https://nodejs.org/api/buffer.html) class provides a built-in `.toString()` method that converts a `Buffer` to a string.\n\n```ts\nconst buf = Buffer.from(\"hello\");\nconst str = buf.toString();\n// => \"hello\"\n```\n\n---\n\nYou can optionally specify an encoding and byte range.\n\n```ts\nconst buf = Buffer.from(\"hello world!\");\nconst str = buf.toString(\"utf8\", 0, 5);\n// => \"hello\"\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/buffer-to-typedarray.md", "content": "---\nname: Convert a Buffer to a Uint8Array\n---\n\nThe Node.js [`Buffer`](https://nodejs.org/api/buffer.html) class extends [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), so no conversion is needed. All properties and methods on `Uint8Array` are available on `Buffer`.\n\n```ts\nconst buf = Buffer.alloc(64);\nbuf instanceof Uint8Array; // => true\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/dataview-to-string.md", "content": "---\nname: Convert a Uint8Array to a string\n---\n\nIf a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) contains ASCII-encoded text, you can convert it to a string using the [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) class.\n\n```ts\nconst dv: DataView = ...;\nconst decoder = new TextDecoder();\nconst str = decoder.decode(dv);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/index.json", "content": "{\n  \"name\": \"Binary data\",\n  \"description\": \"A collection of guides for converting between binary data formats with Bun\"\n}\n"}
{"filename": "docs/guides/binary/typedarray-to-arraybuffer.md", "content": "---\nname: Convert a Uint8Array to an ArrayBuffer\n---\n\nA [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) is a _typed array_ class, meaning it is a mechanism for viewing data in an underlying `ArrayBuffer`. The underlying `ArrayBuffer` is accessible via the `buffer` property.\n\n```ts\nconst arr = new Uint8Array(64);\narr.buffer; // => ArrayBuffer(64)\n```\n\n---\n\nThe `Uint8Array` may be a view over a _subset_ of the data in the underlying `ArrayBuffer`. In this case, the `buffer` property will return the entire buffer, and the `byteOffset` and `byteLength` properties will indicate the subset.\n\n```ts\nconst arr = new Uint8Array(64, 16, 32);\narr.buffer; // => ArrayBuffer(64)\narr.byteOffset; // => 16\narr.byteLength; // => 32\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/typedarray-to-blob.md", "content": "---\nname: Convert a Uint8Array to a Blob\n---\n\nA [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) can be constructed from an array of \"chunks\", where each chunk is a string, binary data structure (including `Uint8Array`), or another `Blob`.\n\n```ts\nconst arr = new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f]);\nconst blob = new Blob([arr]);\nconsole.log(await blob.text());\n// => \"hello\"\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/typedarray-to-buffer.md", "content": "---\nname: Convert a Uint8Array to a Buffer\n---\n\nThe [`Buffer`](https://nodejs.org/api/buffer.html) class extends [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) with a number of additional methods. Use `Buffer.from()` to create a `Buffer` instance from a `Uint8Array`.\n\n```ts\nconst arr: Uint8Array = ...\nconst buf = Buffer.from(arr);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/typedarray-to-dataview.md", "content": "---\nname: Convert a Uint8Array to a DataView\n---\n\nA [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) is a _typed array_ class, meaning it is a mechanism for viewing data in an underlying `ArrayBuffer`. The following snippet creates a [`DataView`] instance over the same range of data as the `Uint8Array`.\n\n```ts\nconst arr: Uint8Array = ...\nconst dv = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/typedarray-to-readablestream.md", "content": "---\nname: Convert a Uint8Array to a ReadableStream\n---\n\nThe naive approach to creating a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) from a [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) is to use the [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) constructor and enqueue the entire array as a single chunk. For larger chunks, this may be undesirable as it isn't actually \"streaming\" the data.\n\n```ts\nconst arr = new Uint8Array(64);\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(arr);\n    controller.close();\n  },\n});\n```\n\n---\n\nTo stream the data in smaller chunks, first create a `Blob` instance from the `Uint8Array`. Then use the [`Blob.stream()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/stream) method to create a `ReadableStream` that streams the data in chunks of a specified size.\n\n```ts\nconst arr = new Uint8Array(64);\nconst blob = new Blob([arr]);\nconst stream = blob.stream();\n```\n\n---\n\nThe chunk size can be set by passing a number to the `.stream()` method.\n\n```ts\nconst arr = new Uint8Array(64);\nconst blob = new Blob([arr]);\n\n// set chunk size of 1024 bytes\nconst stream = blob.stream(1024);\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/binary/typedarray-to-string.md", "content": "---\nname: Convert a Uint8Array to a string\n---\n\nBun implements the Web-standard [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) class for converting from binary data types like `Uint8Array` and strings.\n\n```ts\nconst arr = new Uint8Array([104, 101, 108, 108, 111]);\nconst decoder = new TextDecoder();\nconst str = decoder.decode(buf);\n// => \"hello\"\n```\n\n---\n\nSee [Docs > API > Binary Data](/docs/api/binary-data#conversion) for complete documentation on manipulating binary data with Bun.\n"}
{"filename": "docs/guides/ecosystem/astro.md", "content": "---\nname: Build an app with Astro and Bun\n---\n\nInitialize a fresh Astro app with `bunx create-astro`. The `create-astro` package detects when you are using `bunx` and will automatically install dependencies using `bun`.\n\n```sh\n$ bunx create-astro\n\u256d\u2500\u2500\u2500\u2500\u2500\u256e  Houston:\n\u2502 \u25e0 \u25e1 \u25e0  We're glad to have you on board.\n\u2570\u2500\u2500\u2500\u2500\u2500\u256f\n\n astro   v2.10.5 Launch sequence initiated.\n\n   dir   Where should we create your new project?\n         ./fumbling-field\n\n  tmpl   How would you like to start your new project?\n         Use blog template\n      \u2714  Template copied\n\n  deps   Install dependencies?\n         Yes\n      \u2714  Dependencies installed\n\n    ts   Do you plan to write TypeScript?\n         Yes\n\n   use   How strict should TypeScript be?\n         Strict\n      \u2714  TypeScript customized\n\n   git   Initialize a new git repository?\n         Yes\n      \u2714  Git initialized\n\n  next   Liftoff confirmed. Explore your project!\n\n         Enter your project directory using cd ./fumbling-field\n         Run `bun run dev` to start the dev server. CTRL+C to stop.\n         Add frameworks like react or tailwind using astro add.\n\n         Stuck? Join us at https://astro.build/chat\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u256e  Houston:\n\u2502 \u25e0 \u25e1 \u25e0  Good luck out there, astronaut! \ud83d\ude80\n\u2570\u2500\u2500\u2500\u2500\u2500\u256f\n```\n\n---\n\nStart the dev server with `bunx`.\n\nBy default, Bun will run the dev server with Node.js. To use the Bun runtime instead, use the `--bun` flag.\n\n```sh\n$ bunx --bun astro dev\n  \ud83d\ude80  astro  v2.10.5 started in 200ms\n\n  \u2503 Local    http://localhost:3000/\n  \u2503 Network  use --host to expose\n\n01:48:34 PM [content] Watching src/content/ for changes\n01:48:34 PM [content] Types generated\n01:48:34 PM [astro] update /.astro/types.d.ts\n```\n\n---\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result. Astro will hot-reload your app as you edit your source files.\n\n{% image src=\"https://github.com/vitejs/vite/assets/3084745/bb1d5063-32f4-4598-b33e-50b44a1c4e8a\" caption=\"An Astro starter app running on Bun\" %}\n\n---\n\nRefer to the [Astro docs](https://docs.astro.build/en/getting-started/) for complete documentation.\n"}
{"filename": "docs/guides/ecosystem/discordjs.md", "content": "---\nname: Create a Discord bot\n---\n\nDiscord.js works [out of the box](https://bun.sh/blog/bun-v0.6.7) with Bun. Let's write a simple bot. First create a directory and initialize it with `bun init`.\n\n```bash\nmkdir my-bot\ncd my-bot\nbun init\n```\n\n---\n\nNow install Discord.js.\n\n```bash\nbun add discord.js\n```\n\n---\n\nBefore we go further, we need to go to the [Discord developer portal](https://discord.com/developers/applications), login/signup, create a new _Application_, then create a new _Bot_ within that application. Follow the [official guide](https://discordjs.guide/preparations/setting-up-a-bot-application.html#creating-your-bot) for step-by-step instructions.\n\n---\n\nOnce complete, you'll be presented with your bot's _private key_. Let's add this to a file called `.env.local`. Bun automatically reads this file and loads it into `process.env`.\n\n{% callout %}\nThis is an example token that has already been invalidated.\n{% /callout %}\n\n```txt#.env.local\nDISCORD_TOKEN=NzkyNzE1NDU0MTk2MDg4ODQy.X-hvzA.Ovy4MCQywSkoMRRclStW4xAYK7I\n```\n\n---\n\nBe sure to add `.env.local` to your `.gitignore`! It is dangerous to check your bot's private key into version control.\n\n```txt#.gitignore\nnode_modules\n.env.local\n```\n\n---\n\nNow let's actually write our bot in a new file called `bot.ts`.\n\n```ts#bot.ts\n// import discord.js\nimport {Client, Events, GatewayIntentBits} from 'discord.js';\n\n// create a new Client instance\nconst client = new Client({intents: [GatewayIntentBits.Guilds]});\n\n// listen for the client to be ready\nclient.once(Events.ClientReady, (c) => {\n  console.log(`Ready! Logged in as ${c.user.tag}`);\n});\n\n// login with the token from .env.local\nclient.login(process.env.DISCORD_TOKEN);\n```\n\n---\n\nNow we can run our bot with `bun run`. It may take a several seconds for the client to initialize the first time you run the file.\n\n```bash\n$ bun run bot.ts\nReady! Logged in as my-bot#1234\n```\n\n---\n\nYou're up and running with a bare-bones Discord.js bot! This is a basic guide to setting up your bot with Bun; we recommend the [official Discord docs](https://discordjs.guide/) for complete information on the `discord.js` API.\n"}
{"filename": "docs/guides/ecosystem/elysia.md", "content": "---\nname: Build an HTTP server using Elysia and Bun\n---\n\n[Elysia](https://elysiajs.com) is a Bun-first performance focused web framework that takes full advantage of Bun's HTTP, file system, and hot reloading APIs. Get started with `bun create`.\n\n```bash\n$ bun create elysia myapp\n$ cd myapp\n$ bun run dev\n```\n\n---\n\nTo define a simple HTTP route and start a server with Elysia:\n\n```ts#server.ts\nimport { Elysia } from 'elysia'\n\nconst app = new Elysia()\n\t.get('/', () => 'Hello Elysia')\n\t.listen(8080)\n\nconsole.log(`\ud83e\udd8a Elysia is running at on port ${app.server.port}...`)\n```\n\n---\n\nElysia is a full-featured server framework with Express-like syntax, type inference, middleware, file uploads, and plugins for JWT authentication, tRPC, and more. It's also is one of the [fastest Bun web frameworks](https://github.com/SaltyAom/bun-http-framework-benchmark).\n\nRefer to the Elysia [documentation](https://elysiajs.com/quick-start.html) for more information.\n"}
{"filename": "docs/guides/ecosystem/express.md", "content": "---\nname: Build an HTTP server using Express and Bun\n---\n\nExpress and other major Node.js HTTP libraries should work out of the box. Bun implements the [`node:http`](https://nodejs.org/api/http.html) and [`node:https`](https://nodejs.org/api/https.html) modules that these libraries rely on.\n\n{% callout %}\nRefer to the [Runtime > Node.js APIs](/docs/runtime/nodejs-apis#node-http) page for more detailed compatibility information.\n{% /callout %}\n\n```sh\n$ bun add express\n```\n\n---\n\nTo define a simple HTTP route and start a server with Express:\n\n```ts#server.ts\nimport express from \"express\";\n\nconst app = express();\nconst port = 8080;\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () => {\n  console.log(`Listening on port ${port}...`);\n});\n```\n\n---\n\nTo start the server on `localhost`:\n\n```sh\n$ bun server.ts\n```\n"}
{"filename": "docs/guides/ecosystem/hono.md", "content": "---\nname: Build an HTTP server using Hono and Bun\n---\n\n[Hono](https://github.com/honojs/hono) is a lightweight ultrafast web framework designed for the edge.\n\n```ts\nimport { Hono } from \"hono\";\nconst app = new Hono();\n\napp.get(\"/\", c => c.text(\"Hono!\"));\n\nexport default app;\n```\n\n---\n\nUse `create-hono` to get started with one of Hono's project templates. Select `bun` when prompted for a template.\n\n```bash\n$ bunx create-hono myapp\n\u2714 Which template do you want to use? \u203a bun\ncloned honojs/starter#main to /path/to/myapp\n\u2714 Copied project files\n$ cd myapp\n$ bun install\n```\n\n---\n\nThen start the dev server and visit [localhost:3000](http://localhost:3000).\n\n```bash\n$ bun run dev\n```\n\n---\n\nRefer to Hono's guide on [getting started with Bun](https://hono.dev/getting-started/bun) for more information.\n"}
{"filename": "docs/guides/ecosystem/index.json", "content": "{\n  \"name\": \"Ecosystem\",\n  \"description\": \"A collection of guides for using various tools and frameworks with Bun\"\n}\n"}
{"filename": "docs/guides/ecosystem/mongoose.md", "content": "---\nname: Read and write data to MongoDB using Mongoose and Bun\n---\n\nMongoDB and Mongoose work out of the box with Bun. This guide assumes you've already installed MongoDB and are running it as background process/service on your development machine. Follow [this guide](https://www.mongodb.com/docs/manual/installation/) for details.\n\n---\n\nOnce MongoDB is running, create a directory and initialize it with `bun init`.\n\n```bash\nmkdir mongoose-app\ncd mongoose-app\nbun init\n```\n\n---\n\nThen add Mongoose as a dependency.\n\n```bash\nbun add mongoose\n```\n\n---\n\nIn `schema.ts` we'll declare and export a simple `Animal` model.\n\n```ts#schema.ts\nimport * as mongoose from 'mongoose';\n\nconst animalSchema = new mongoose.Schema(\n  {\n    name: {type: String, required: true},\n    sound: {type: String, required: true},\n  }\n);\n\nexport type Animal = mongoose.InferSchemaType<typeof animalSchema>;\nexport const Animal = mongoose.model('Kitten', animalSchema);\n```\n\n---\n\nNow from `index.ts` we can import `Animal`, connect to MongoDB, and add some data to our database.\n\n```ts#index.ts\nimport * as mongoose from 'mongoose';\nimport {Animal} from './schema';\n\n// connect to database\nawait mongoose.connect('mongodb://127.0.0.1:27017/mongoose-app');\n\n// create new Animal\nconst cow = new Animal({\n  name: 'Cow',\n  sound: 'Moo',\n});\nawait cow.save(); // saves to the database\n\n// read all Animals\nconst animals = await Animal.find();\nanimals[0].speak(); // logs \"Moo!\"\n\n// disconect\nawait mongoose.disconnect();\n```\n\n---\n\nLets run this with `bun run`.\n\n```bash\n$ bun run index.ts\nMoo!\n```\n\n---\n\nThis is a simple introduction to using Mongoose with TypeScript and Bun. As you build your application, refer to the official [MongoDB](https://docs.mongodb.com/) and [Mongoose](https://mongoosejs.com/docs/) sites for complete documentation.\n"}
{"filename": "docs/guides/ecosystem/nextjs.md", "content": "---\nname: Build an app with Next.js and Bun\n---\n\n{% callout %}\nNext.js currently relies on Node.js APIs that Bun does not yet implement. The guide below uses Bun to initialize a project and install dependencies, but it uses Node.js to run the dev server.\n{% /callout %}\n\n---\n\nInitialize a Next.js app with `create-next-app`. This automatically installs dependencies using `npm`.\n\n```sh\n$ bunx create-next-app\n\u2714 What is your project named? \u2026 my-app\n\u2714 Would you like to use TypeScript with this project? \u2026 No / Yes\n\u2714 Would you like to use ESLint with this project? \u2026 No / Yes\n\u2714 Would you like to use `src/` directory with this project? \u2026 No / Yes\n\u2714 Would you like to use experimental `app/` directory with this project? \u2026 No / Yes\n\u2714 What import alias would you like configured? \u2026 @/*\nCreating a new Next.js app in /path/to/my-app.\n```\n\n---\n\nTo start the dev server, run `bun run dev` from the project root.\n\n```sh\n$ cd my-app\n$ bun run dev\n```\n\n---\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result. Any changes you make to `pages/index.tsx` will be hot-reloaded in the browser.\n"}
{"filename": "docs/guides/ecosystem/nuxt.md", "content": "---\nname: Build an app with Nuxt and Bun\n---\n\nBun supports [Nuxt](https://nuxt.com) out of the box. Initialize a Nuxt app with official `nuxi` CLI.\n\n```sh\n$ bunx nuxi init my-nuxt-app\n\u2714 Which package manager would you like to use?\nbun\n\u25d0 Installing dependencies...\nbun install v0.8.1 (16b4bf34)\n + @nuxt/devtools@0.8.2\n + nuxt@3.7.0\n 785 packages installed [2.67s]\n\u2714 Installation completed.\n\u2714 Types generated in .nuxt\n\u2728 Nuxt project has been created with the v3 template. Next steps:\n \u203a cd my-nuxt-app\n \u203a Start development server with bun run dev\n```\n\n---\n\nTo start the dev server, run `bun run dev` from the project root. This will execute the `nuxt dev` command (as defined in the `\"dev\"` script in `package.json`).\n\n{% callout %}\nThe `nuxt` CLI uses Node.js by default; passing the `--bun` flag forces the dev server to use the Bun runtime instead.\n{% /callout %}\n\n```\n$ cd my-nuxt-app\n$ bun --bun run dev\n $ nuxt dev\nNuxi 3.6.5\nNuxt 3.6.5 with Nitro 2.5.2\n  > Local:    http://localhost:3000/\n  > Network:  http://192.168.0.21:3000/\n  > Network:  http://[fd8a:d31d:481c:4883:1c64:3d90:9f83:d8a2]:3000/\n\n\u2714 Nuxt DevTools is enabled v0.8.0 (experimental)\n\u2139 Vite client warmed up in 547ms\n\u2714 Nitro built in 244 ms\n```\n\n---\n\nOnce the dev server spins up, open [http://localhost:3000](http://localhost:3000) to see the app. The app will render Nuxt's built-in `WelcomePage` template component.\n\nTo start developing your app, replace `<WelcomePage />` in `app.vue` with your own UI.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/2c683ecc-3298-4bb0-b8c0-cf4cfaea1daa\" caption=\"Demo Nuxt app running on localhost\" /%}\n\n---\n\nRefer to the [Nuxt website](https://nuxt.com/docs) for complete documentation.\n"}
{"filename": "docs/guides/ecosystem/prisma.md", "content": "---\nname: Get started using Prisma\n---\n\nPrisma works out of the box with Bun. First, create a directory and initialize it with `bun init`.\n\n```bash\nmkdir prisma-app\ncd prisma-app\nbun init\n```\n\n---\n\nThen add Prisma as a dependency.\n\n```bash\nbun add prisma\n```\n\n---\n\nWe'll use the Prisma CLI with `bunx` to initialize our schema and migration directory. For simplicity we'll be using an in-memory SQLite database.\n\n```bash\nbunx prisma init --datasource-provider sqlite\n```\n\n---\n\nOpen `prisma/schema.prisma` and add a simple `User` model.\n\n```prisma-diff#prisma/schema.prisma\n  generator client {\n    provider = \"prisma-client-js\"\n  }\n\n  datasource db {\n    provider = \"sqlite\"\n    url      = env(\"DATABASE_URL\")\n  }\n\n+ model User {\n+   id    Int     @id @default(autoincrement())\n+   email String  @unique\n+   name  String?\n+ }\n```\n\n---\n\nThen generate and run initial migration.\n\nThis will generate a `.sql` migration file in `prisma/migrations`, create a new SQLite instance, and execute the migration against the new instance.\n\n```bash\nbunx prisma migrate dev --name init\n```\n\n---\n\nPrisma automatically generates our _Prisma client_ whenever we execute a new migration. The client provides a fully typed API for reading and writing from our database.\n\nIt can be imported from `@prisma/client`.\n\n```ts#src/index.ts\nimport {PrismaClient} from \"@prisma/client\";\n```\n\n---\n\nLet's write a simple script to create a new user, then count the number of users in the database.\n\n```ts#index.ts\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\n// create a new user\nawait prisma.user.create({\n  data: {\n    name: \"John Dough\",\n    email: `john-${Math.random()}@example.com`,\n  },\n});\n\n// count the number of users\nconst count = await prisma.user.count();\nconsole.log(`There are ${count} users in the database.`);\n```\n\n---\n\nLet's run this script with `bun run`. Each time we run it, a new user is created.\n\n```bash\n$ bun run index.ts\nCreated john-0.12802932895402364@example.com\nThere are 1 users in the database.\n$ bun run index.ts\nCreated john-0.8671308799782803@example.com\nThere are 2 users in the database.\n$ bun run index.ts\nCreated john-0.4465968383115295@example.com\nThere are 3 users in the database.\n```\n\n---\n\nThat's it! Now that you've set up Prisma using Bun, we recommend referring to the [official Prisma docs](https://www.prisma.io/docs/concepts/components/prisma-client) as you continue to develop your application.\n"}
{"filename": "docs/guides/ecosystem/react.md", "content": "---\nname: Use React and JSX\n---\n\nReact just works with Bun. Bun supports `.jsx` and `.tsx` files out of the box. Bun's internal transpiler converts JSX syntax into vanilla JavaScript before execution.\n\n```tsx#react.tsx\nfunction Component(props: {message: string}) {\n  return (\n    <body>\n      <h1 style={{color: 'red'}}>{props.message}</h1>\n    </body>\n  );\n}\n\nconsole.log(<Component message=\"Hello world!\" />);\n```\n\n---\n\nBun implements special logging for JSX to make debugging easier.\n\n```bash\n$ bun run react.tsx\n<Component message=\"Hello world!\" />\n```\n\n---\n\nRefer to [Runtime > JSX](/docs/runtime/jsx) for complete documentation on configuring JSX.\n"}
{"filename": "docs/guides/ecosystem/remix.md", "content": "---\nname: Build an app with Remix and Bun\n---\n\n{% callout %}\nRemix currently relies on Node.js APIs that Bun does not yet implement. The guide below uses Bun to initialize a project and install dependencies, but it uses Node.js to run the dev server.\n{% /callout %}\n\n---\n\nInitialize a Remix app with `create-remix`.\n\n```sh\n$ bunx create-remix\n\n remix   v1.19.3 \ud83d\udcbf Let's build a better website...\n\n   dir   Where should we create your new project?\n         ./my-app\n\n      \u25fc  Using basic template See https://remix.run/docs/pages/templates for more\n      \u2714  Template copied\n\n   git   Initialize a new git repository?\n         Yes\n\n  deps   Install dependencies with bun?\n         Yes\n\n      \u2714  Dependencies installed\n\n      \u2714  Git initialized\n\n  done   That's it!\n\n         Enter your project directory using cd ./my-app\n         Check out README.md for development and deploy instructions.\n```\n\n---\n\nTo start the dev server, run `bun run dev` from the project root. This will start the dev server using the `remix dev` command. Note that Node.js will be used to run the dev server.\n\n```sh\n$ cd my-app\n$ bun run dev\n  $ remix dev\n\n  \ud83d\udcbf  remix dev\n\n  info  building...\n  info  built (263ms)\n  Remix App Server started at http://localhost:3000 (http://172.20.0.143:3000)\n```\n\n---\n\nOpen [http://localhost:3000](http://localhost:3000) to see the app. Any changes you make to `app/routes/_index.tsx` will be hot-reloaded in the browser.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/c26f1059-a5d4-4c0b-9a88-d9902472fd77\" caption=\"Remix app running on localhost\" /%}\n"}
{"filename": "docs/guides/ecosystem/solidstart.md", "content": "---\nname: Build an app with SolidStart and Bun\n---\n\n{% callout %}\nSolidStart currently relies on Node.js APIs that Bun does not yet implement. The guide below uses Bun to initialize a project and install dependencies, but it uses Node.js to run the dev server.\n{% /callout %}\n\n---\n\nInitialize a SolidStart app with `create-solid`.\n\n```sh\n$ bunx create-solid my-app\ncreate-solid version 0.2.31\n\nWelcome to the SolidStart setup wizard!\n\nThere are definitely bugs and some feature might not work yet.\nIf you encounter an issue, have a look at\nhttps://github.com/solidjs/solid-start/issues and open a new one,\nif it is not already tracked.\n\n\u2714 Which template do you want to use? \u203a todomvc\n\u2714 Server Side Rendering? \u2026 yes\n\u2714 Use TypeScript? \u2026 yes\ncloned solidjs/solid-start#main to /path/to/my-app/.solid-start\n\u2714 Copied project files\n```\n\n---\n\nAs instructed by the `create-solid` CLI, lets install our dependencies.\n\n```sh\n$ cd my-app\n$ bun install\n```\n\n---\n\nThen run the development server.\n\n```sh\n$ bun run dev\n# or, equivalently\n$ bunx solid-start dev\n```\n\n---\n\nOpen [localhost:3000](http://localhost:3000). Any changes you make to `src/routes/index.tsx` will be hot-reloaded automatically.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/1e8043c4-49d1-498c-9add-c1eaab6c7167\" alt=\"SolidStart demo app\" /%}\n\n---\n\nRefer to the [SolidStart website](start.solidjs.com/getting-started/what-is-solidstart) for complete framework documentation.\n"}
{"filename": "docs/guides/ecosystem/ssr-react.md", "content": "---\nname: Server-side render (SSR) a React component\n---\n\nTo render a React component to an HTML stream server-side (SSR):\n\n```tsx\nimport { renderToReadableStream } from \"react-dom/server\";\n\nfunction Component(props: { message: string }) {\n  return (\n    <body>\n      <h1>{props.message}</h1>\n    </body>\n  );\n}\n\nconst stream = await renderToReadableStream(\n  <Component message=\"Hello from server!\" />,\n);\n```\n\n---\n\nCombining this with `Bun.serve()`, we get a simple SSR HTTP server:\n\n```tsx\nBun.serve({\n  async fetch() {\n    const stream = await renderToReadableStream(\n      <Component message=\"Hello from server!\" />,\n    );\n    return new Response(stream, {\n      headers: { \"Content-Type\": \"text/html\" },\n    });\n  },\n});\n```\n\n---\n\nReact `18.3` and later includes an [SSR optimization](https://github.com/facebook/react/pull/25597) that takes advantage of Bun's \"direct\" `ReadableStream` implementation.\n"}
{"filename": "docs/guides/ecosystem/stric.md", "content": "---\nname: Build an HTTP server using StricJS and Bun\n---\n\n[StricJS](https://github.com/bunsvr) is a Bun framework for building high-performance web applications and APIs.\n\n- **Fast** \u2014 Stric is one of the fastest Bun frameworks. See [benchmark](https://github.com/bunsvr/benchmark) for more details.\n- **Minimal** \u2014 The basic components like `@stricjs/router` and `@stricjs/utils` are under 50kB and require no external dependencies.\n- **Extensible** \u2014 Stric includes with a plugin system, dependency injection, and optional optimizations for handling requests.\n\n---\n\nUse `bun init` to create an empty project.\n\n```bash\n$ mkdir myapp\n$ cd myapp\n$ bun init\n$ bun add @stricjs/router @stricjs/utils\n```\n\n---\n\nTo implement a simple HTTP server with StricJS:\n\n```ts#index.ts\nimport { Router } from '@stricjs/router';\n\nexport default new Router()\n  .get('/', () => new Response('Hi'));\n```\n\n---\n\nTo serve static files from `/public`:\n\n```ts#index.ts\nimport { dir } from '@stricjs/utils';\n\nexport default new Router()\n  .get('/', () => new Response('Hi'))\n  .get('/*', dir('./public'));\n```\n\n---\n\nRun the file in watch mode to start the development server.\n\n```bash\n$ bun --watch run index.ts\n```\n\n---\n\nFor more info, see Stric's [documentation](https://stricjs.netlify.app).\n"}
{"filename": "docs/guides/ecosystem/sveltekit.md", "content": "---\nname: Build an app with SvelteKit and Bun\n---\n\nUse `bunx` to scaffold your app with the `create-svelte` CLI. Answer the prompts to slect a template and set up your development environment.\n\n```sh\n$ bunx create-svelte my-app\n\u250c  Welcome to SvelteKit!\n\u2502\n\u25c7  Which Svelte app template?\n\u2502  SvelteKit demo app\n\u2502\n\u25c7  Add type checking with TypeScript?\n\u2502  Yes, using TypeScript syntax\n\u2502\n\u25c7  Select additional options (use arrow keys/space bar)\n\u2502  None\n\u2502\n\u2514  Your project is ready!\n\n\u2714 Typescript\n  Inside Svelte components, use <script lang=\"ts\">\n\nInstall community-maintained integrations:\n  https://github.com/svelte-add/svelte-add\n```\n\n---\n\nOnce the project is initialized, `cd` into the new project and install dependencies.\n\n```sh\n$ cd my-app\n$ bun install\n```\n\n---\n\nThen start the development server with `bun --bun run dev`.\n\nTo run the dev server with Node.js instead of Bun, you can omit the `--bun` flag.\n\n```sh\n$ bun --bun run dev\n  $ vite dev\n\n  Forced re-optimization of dependencies\n\n    VITE v4.4.9  ready in 895 ms\n\n    \u279c  Local:   http://localhost:5173/\n    \u279c  Network: use --host to expose\n    \u279c  press h to show help\n```\n\n---\n\nVisit [http://localhost:5173](http://localhost:5173/) in a browser to see the template app.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/7c76eae8-78f9-44fa-9f15-1bd3ca1a47c0\" /%}\n\n---\n\nIf you edit and save `src/routes/+page.svelte`, you should see your changes hot-reloaded in the browser.\n"}
{"filename": "docs/guides/ecosystem/vite.md", "content": "---\nname: Build a frontend using Vite and Bun\n---\n\n{% callout %}\nWhile Vite currently works with Bun, it has not been heavily optimized, nor has Vite been adapted to use Bun's bundler, module resolver, or transpiler.\n{% /callout %}\n\n---\n\nVite works out of the box with Bun (v0.7 and later). Get started with one of Vite's templates.\n\n```bash\n$ bunx create-vite my-app\n\u2714 Select a framework: \u203a React\n\u2714 Select a variant: \u203a TypeScript + SWC\nScaffolding project in /path/to/my-app...\n```\n\n---\n\nThen `cd` into the project directory and install dependencies.\n\n```bash\ncd my-app\nbun install\n```\n\n---\n\nStart the development server with the `vite` CLI using `bunx`.\n\nThe `--bun` flag tells Bun to run Vite's CLI using `bun` instead of `node`; by default Bun respects Vite's `#!/usr/bin/env node` [shebang line](<https://en.wikipedia.org/wiki/Shebang_(Unix)>). After Bun 1.0 this flag will no longer be necessary.\n\n```bash\nbunx --bun vite\n```\n\n---\n\nTo simplify this command, update the `\"dev\"` script in `package.json` to the following.\n\n```json-diff#package.json\n  \"scripts\": {\n-   \"dev\": \"vite\",\n+   \"dev\": \"bunx --bun vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview\"\n  },\n  // ...\n```\n\n---\n\nNow you can start the development server with `bun run dev`.\n\n```bash\nbun run dev\n```\n\n---\n\nThe following command will build your app for production.\n\n```sh\n$ bunx --bun vite build\n```\n\n---\n\nThis is a stripped down guide to get you started with Vite + Bun. For more information, see the [Vite documentation](https://vitejs.dev/guide/).\n"}
{"filename": "docs/guides/http/fetch.md", "content": "---\nname: Send an HTTP request using fetch\n---\n\nBun implements the Web-standard [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API for sending HTTP requests. To send a simple `GET` request to a URL:\n\n```ts\nconst response = await fetch(\"https://bun.sh\");\nconst html = await response.text(); // HTML string\n```\n\n---\n\nTo send a `POST` request to an API endpoint.\n\n```ts\nconst response = await fetch(\"https://bun.sh/api\", {\n  method: \"POST\",\n  body: JSON.stringify({ message: \"Hello from Bun!\" }),\n  headers: { \"Content-Type\": \"application/json\" },\n});\n\nconst body = await response.json();\n```\n"}
{"filename": "docs/guides/http/file-uploads.md", "content": "---\nname: Upload files via HTTP using FormData\n---\n\nTo upload files via HTTP with Bun, use the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) API. Let's start with a HTTP server that serves a simple HTML web form.\n\n```ts#index.ts\nconst server = Bun.serve({\n  port: 4000,\n  async fetch(req) {\n    const url = new URL(req.url);\n\n    // return index.html for root path\n    if (url.pathname === \"/\")\n      return new Response(Bun.file(\"index.html\"), {\n        headers: {\n          \"Content-Type\": \"text/html\",\n        },\n      });\n\n    return new Response(\"Not Found\", { status: 404 });\n  },\n});\n\nconsole.log(`Listening on http://localhost:${server.port}`);\n```\n\n---\n\nWe can define our HTML form in another file, `index.html`.\n\n```html#index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Form</title>\n  </head>\n  <body>\n    <form action=\"/action\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"text\" name=\"name\" placeholder=\"Name\" />\n      <input type=\"file\" name=\"profilePicture\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html>\n```\n\n---\n\nAt this point, we can run the server and visit [`localhost:4000`](http://localhost:4000) to see our form.\n\n```bash\n$ bun run index.ts\nListening on http://localhost:4000\n```\n\n---\n\nOur form will send a `POST` request to the `/action` endpoint with the form data. Let's handle that request in our server.\n\nFirst we use the [`.formData()`](https://developer.mozilla.org/en-US/docs/Web/API/Request/formData) method on the incoming `Request` to asynchonously parse its contents to a `FormData` instance. Then we can use the [`.get()`](https://developer.mozilla.org/en-US/docs/Web/API/FormData/get) method to extract the value of the `name` and `profilePicture` fields. Here `name` corresponds to a `string` and `profilePicture` is a `Blob`.\n\nFinally, we write the `Blob` to disk using [`Bun.write()`](/docs/api/file-io#writing-files-bun-write).\n\n```ts-diff#index.ts\nconst server = Bun.serve({\n  port: 4000,\n  async fetch(req) {\n    const url = new URL(req.url);\n\n    // return index.html for root path\n    if (url.pathname === \"/\")\n      return new Response(Bun.file(\"index.html\"), {\n        headers: {\n          \"Content-Type\": \"text/html\",\n        },\n      });\n\n+   // parse formdata at /action\n+   if (url.pathname === '/action') {\n+     const formdata = await req.formData();\n+     const name = formdata.get('name');\n+     const profilePicture = formdata.get('profilePicture');+\n+     if (!profilePicture) throw new Error('Must upload a profile picture.');\n+     // write profilePicture to disk\n+     await Bun.write('profilePicture.png', profilePicture);\n+     return new Response(\"Success\");\n+   }\n\n    return new Response(\"Not Found\", { status: 404 });\n  },\n});\n```\n"}
{"filename": "docs/guides/http/hot.md", "content": "---\nname: Hot reload an HTTP server\n---\n\nBun supports the [`--hot`](/docs/runtime/hot#hot-mode) flag to run a file with hot reloading enabled. When any module or file changes, Bun re-runs the file.\n\n```sh\nbun --hot run index.ts\n```\n\n---\n\nBun detects when you are running an HTTP server with `Bun.serve()`. It reloads your fetch handler when source files change, _without_ restarting the `bun` process. This makes hot reloads nearly instantaneous.\n\n```ts\nBun.serve({\n  port: 3000,\n  fetch(req) {\n    return new Response(`Hello world`);\n  },\n});\n```\n"}
{"filename": "docs/guides/http/index.json", "content": "{\n  \"name\": \"HTTP\",\n  \"description\": \"A collection of guides for building HTTP servers with Bun\"\n}\n"}
{"filename": "docs/guides/http/simple.md", "content": "---\nname: Write a simple HTTP server\n---\n\nThis starts an HTTP server listening on port `3000`. It responds to all requests with a `Response` with status `200` and body `\"Welcome to Bun!\"`.\n\nSee [`Bun.serve`](/docs/api/http) for details.\n\n```ts\nconst server = Bun.serve({\n  port: 3000,\n  fetch(request) {\n    return new Response(\"Welcome to Bun!\");\n  },\n});\n\nconsole.log(`Listening on localhost: ${server.port}`);\n```\n"}
{"filename": "docs/guides/http/stream-file.md", "content": "---\nname: Stream a file as an HTTP Response\n---\n\nThis snippet reads a file from disk using [`Bun.file()`](/docs/api/file-io#reading-files-bun-file). This returns a `BunFile` instance, which can be passed directly into the `new Response` constructor.\n\n```ts\nconst path = \"/path/to/file.txt\";\nconst file = Bun.file(path);\nconst resp = new Response(file);\n```\n\n---\n\nThe `Content-Type` is read from the file and automatically set on the `Response`.\n\n```ts\nnew Response(Bun.file(\"./package.json\")).headers.get(\"Content-Type\");\n// => application/json;charset=utf-8\n\nnew Response(Bun.file(\"./test.txt\")).headers.get(\"Content-Type\");\n// => text/plain;charset=utf-8\n\nnew Response(Bun.file(\"./index.tsx\")).headers.get(\"Content-Type\");\n// => text/javascript;charset=utf-8\n\nnew Response(Bun.file(\"./img.png\")).headers.get(\"Content-Type\");\n// => image/png\n```\n\n---\n\nPutting it all together with [`Bun.serve()`](/docs/api/http#bun-serve).\n\n```ts\n// static file server\nBun.serve({\n  async fetch(req) {\n    const path = new URL(req.url).pathname;\n    const file = Bun.file(path);\n    return new Response(file);\n  },\n});\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/http/tls.md", "content": "---\nname: Configure TLS on an HTTP server\n---\n\nSet the `tls` key to configure TLS. Both `key` and `cert` are required. The `key` should be the contents of your private key; `cert` should be the contents of your issued certificate. Use [`Bun.file()`](/docs/api/file-io#reading-files-bun-file) to read the contents.\n\n```ts\nconst server = Bun.serve({\n  fetch: (request) => new Response(\"Welcome to Bun!\"),\n  tls: {\n    cert: Bun.file(\"cert.pem\"),\n    key: Bun.file(\"key.pem\"),\n  },\n});\n```\n\n---\n\nBy default Bun trusts the default Mozilla-curated list of well-known root CAs. To override this list, pass an array of certificates as `ca`.\n\n```ts\nconst server = Bun.serve({\n  fetch: (request) => new Response(\"Welcome to Bun!\"),\n  tls: {\n    cert: Bun.file(\"cert.pem\"),\n    key: Bun.file(\"key.pem\"),\n    ca: [Bun.file(\"ca1.pem\"), Bun.file(\"ca2.pem\")],\n  },\n});\n```\n"}
{"filename": "docs/guides/install/add-dev.md", "content": "---\nname: Add a development dependency\n---\n\nTo add an npm package as a development dependency, use `bun add --development`.\n\n```sh\n$ bun add zod --dev\n$ bun add zod -d # shorthand\n```\n\n---\n\nThis will add the package to `devDependencies` in `package.json`.\n\n```json-diff\n{\n  \"devDependencies\": {\n+   \"zod\": \"^3.0.0\"\n  }\n}\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/add-git.md", "content": "---\nname: Add a Git dependency\n---\n\nBun supports directly adding GitHub repositories as dependencies of your project.\n\n```sh\n$ bun add github:lodash/lodash\n```\n\n---\n\nThis will add the following line to your `package.json`:\n\n```json-diff#package.json\n{\n  \"dependencies\": {\n+   \"lodash\": \"github:lodash/lodash\"\n  }\n}\n```\n\n---\n\nBun supports a number of protocols for specifying Git dependencies.\n\n```sh\n$ bun add git+https://github.com/lodash/lodash.git\n$ bun add git+ssh://github.com/lodash/lodash.git#4.17.21\n$ bun add git@github.com:lodash/lodash.git\n$ bun add github:colinhacks/zod\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/add-optional.md", "content": "---\nname: Add an optional dependency\n---\n\nTo add an npm package as a peer dependency, use the `--optional` flag.\n\n```sh\n$ bun add zod --optional\n```\n\n---\n\nThis will add the package to `optionalDependencies` in `package.json`.\n\n```json-diff\n{\n  \"optionalDependencies\": {\n+   \"zod\": \"^3.0.0\"\n  }\n}\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/add-peer.md", "content": "---\nname: Add a peer dependency\n---\n\nTo add an npm package as a peer dependency, directly modify the `peerDependencies` object in your package.json. Running `bun install` will not install peer dependencies.\n\n```json-diff\n{\n  \"peerDependencies\": {\n+   \"zod\": \"^3.0.0\"\n  }\n}\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/add-tarball.md", "content": "---\nname: Add a tarball dependency\n---\n\nBun's package manager can install any publicly available tarball URL as a dependency of your project.\n\n```sh\n$ bun add zod@https://registry.npmjs.org/zod/-/zod-3.21.4.tgz\n```\n\n---\n\nRunning this command will download, extract, and install the tarball to your project's `node_modules` directory. It will also add the following line to your `package.json`:\n\n```json-diff#package.json\n{\n  \"dependencies\": {\n+   \"zod\": \"https://registry.npmjs.org/zod/-/zod-3.21.4.tgz\"\n  }\n}\n```\n\n---\n\nThe package `\"zod\"` can now be imported as usual.\n\n```ts\nimport { z } from \"zod\";\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/add.md", "content": "---\nname: Add a dependency\n---\n\nTo add an npm package as a dependency, use `bun add`.\n\n```sh\n$ bun add zod\n```\n\n---\n\nThis will add the package to `dependencies` in `package.json`. By default, the `^` range specifier will be used, to indicate that any future minor or patch versions are acceptable.\n\n```json-diff\n{\n  \"dependencies\": {\n+     \"zod\": \"^3.0.0\"\n  }\n}\n```\n\n---\n\nTo \"pin\" to the `latest` version of the package, use `--exact`. This will add the package to `dependencies` without the `^`, pinning your project to the exact version you installed.\n\n```sh\n$ bun add zod --exact\n```\n\n---\n\nTo specify an exact version or a tag:\n\n```sh\n$ bun add zod@3.0.0\n$ bun add zod@next\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/cicd.md", "content": "---\nname: Install dependencies with Bun in GitHub Actions\n---\n\nUse the official [`setup-bun`](https://github.com/oven-sh/setup-bun) GitHub Action to install `bun` in your GitHub Actions runner.\n\n```yaml-diff#workflow.yml\nname: my-workflow\njobs:\n  my-job:\n    name: my-job\n    runs-on: ubuntu-latest\n    steps:\n      # ...\n      - uses: actions/checkout@v3\n+     - uses: oven-sh/setup-bun@v1\n\n      # run any `bun` or `bunx` command\n+     - run: bun install\n```\n\n---\n\nTo specify a version of Bun to install:\n\n```yaml-diff#workflow.yml\nname: my-workflow\njobs:\n  my-job:\n    name: my-job\n    runs-on: ubuntu-latest\n    steps:\n      # ...\n      - uses: oven-sh/setup-bun@v1\n+       with:\n+         version: 0.7.0 # or \"canary\"\n```\n\n---\n\nRefer to the [README.md](https://github.com/oven-sh/setup-bun) for complete documentation of the `setup-bun` GitHub Action.\n"}
{"filename": "docs/guides/install/custom-registry.md", "content": "---\nname: Override the default npm registry for bun install\n---\n\nThe default registry is `registry.npmjs.org`. This can be globally configured in `bunfig.toml`.\n\n```toml#bunfig.toml\n[install]\n# set default registry as a string\nregistry = \"https://registry.npmjs.org\"\n\n# if needed, set a token\nregistry = { url = \"https://registry.npmjs.org\", token = \"123456\" }\n\n# if needed, set a username/password\nregistry = \"https://username:password@registry.npmjs.org\"\n```\n\n---\n\nYour `bunfig.toml` can reference environment variables. Bun automatically loads environment variables from `.env.local`, `.env.[NODE_ENV]`, and `.env`. See [Docs > Environment variables](/docs/cli/run#environment-variables) for more information.\n\n```toml#bunfig.toml\n[install]\nregistry = { url = \"https://registry.npmjs.org\", token = \"$npm_token\" }\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/index.json", "content": "{\n  \"name\": \"Package manager\",\n  \"description\": \"A collection of guides for managing dependencies with Bun's package manager\"\n}\n"}
{"filename": "docs/guides/install/npm-alias.md", "content": "---\nname: Install a package under a different name\n---\n\nTo install an npm package under an alias:\n\n```sh\n$ bun add my-custom-name@npm:zod\n```\n\n---\n\nThe `zod` package can now be imported as `my-custom-name`.\n\n```ts\nimport { z } from \"my-custom-name\";\n\nz.string();\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/registry-scope.md", "content": "---\nname: Configure a private registry for an organization scope with bun install\n---\n\nBun does not read `.npmrc` files; instead private registries are configured via `bunfig.toml`. To configure a registry for a particular npm scope:\n\n```toml#bunfig.toml\n[install.scopes]\n# as a string\n\"@myorg1\" = \"https://username:password@registry.myorg.com/\"\n\n# as an object with username/password\n# you can reference environment variables\n\"@myorg2\" = { username = \"myusername\", password = \"$npm_pass\", url = \"https://registry.myorg.com/\" }\n\n# as an object with token\n\"@myorg3\" = { token = \"$npm_token\", url = \"https://registry.myorg.com/\" }\n\n```\n\n---\n\nYour `bunfig.toml` can reference environment variables. Bun automatically loads environment variables from `.env.local`, `.env.[NODE_ENV]`, and `.env`. See [Docs > Environment variables](/docs/cli/run#environment-variables) for more information.\n\n```toml#bunfig.toml\n[install.scopes]\n\"@myorg3\" = { token = \"$npm_token\", url = \"https://registry.myorg.com/\" }\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/workspaces.md", "content": "---\nname: Configuring a monorepo using workspaces\n---\n\nBun's package manager supports npm `\"workspaces\"`. This allows you to split a codebase into multiple distinct \"packages\" that live in the same repository, can depend on each other, and (when possible) share a `node_modules` directory.\n\n---\n\nThe root `package.json` should not contain any `\"dependencies\"`, `\"devDependencies\"`, etc. Each individual package should be self-contained and declare its own dependencies. Similarly, it's conventional to declare `\"private\": true` to avoid accidentally publishing the root package to `npm`.\n\n```json#package.json\n{\n  \"name\": \"my-monorepo\",\n  \"private\": true,\n  \"workspaces\": [\n    \"packages/*\"\n  ]\n}\n```\n\n---\n\nIt's common to place all packages in a `packages` directory. The `\"workspaces\"` field in package.json supports glob patterns, so you can use `packages/*` to indicate that each subdirectory of `packages` should be considered separate _package_ (also known as a workspace).\n\n```txt\n.\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 node_modules\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 stuff-a\n    \u2502   \u2514\u2500\u2500 package.json\n    \u2514\u2500\u2500 stuff-b\n        \u2514\u2500\u2500 package.json\n```\n\n---\n\nTo add one workspace as a dependency of another, modify its `package.json`. Here were adding `stuff-a` as a dependency of `stuff-b`.\n\n```json#packages/stuff-b/package.json\n{\n  \"name\": \"stuff-b\",\n  \"dependencies\": {\n+   \"stuff-a\": \"*\"\n  }\n}\n```\n\n---\n\nOnce added, run `bun install` from the project root to install dependencies for all workspaces.\n\n```sh\n$ bun install\n```\n\n---\n\nTo add npm dependencies to a particular workspace, just `cd` to the appropriate directory and run `bun add` commands as you would normally. Bun will detect that you are in a workspace and hoist the dependency as needed.\n\n```sh\n$ cd packages/stuff-a\n$ bun add zod\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/install/yarnlock.md", "content": "---\nname: Generate a human-readable lockfile\n---\n\nBy default Bun generates a binary `bun.lockb` file when you run `bun install`. In some cases, it's preferable to generate a human-readable lockfile instead.\n\n---\n\nUse the `--yarn` flag to generate a Yarn-compatible `yarn.lock` file (in addition to `bun.lockb`).\n\n```sh\n$ bun install --yarn\n```\n\n---\n\nTo set this as the default behavior, add the following to your `bunfig.toml` file.\n\n```toml#bunfig.toml\n[install.lockfile]\nprint = \"yarn\"\n```\n\n---\n\nTo print a Yarn lockfile to your console without writing it to disk, just \"run\" your `bun.lockb` with `bun`.\n\n```sh\n$ bun bun.lockb\n# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n# bun ./bun.lockb --hash: 9BFBF11D86084AAB-9418b03ff880c569-390CE6459EACEC9A...\n\nabab@^2.0.6:\n  version \"2.0.6\"\n  resolved \"https://registry.npmjs.org/abab/-/abab-2.0.6.tgz\"\n  integrity sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvH...\n```\n\n---\n\nSee [Docs > Package manager](/docs/cli/install) for complete documentation of Bun's package manager.\n"}
{"filename": "docs/guides/process/argv.md", "content": "---\nname: Parse command-line arguments\n---\n\nThe _argument vector_ is the list of arguments passed to the program when it is run. It is available as `Bun.argv`.\n\n```ts#cli.ts\nconsole.log(Bun.argv);\n```\n\n---\n\nRunning this file with arguments results in the following:\n\n```sh\n$ bun run cli.tsx --flag1 --flag2 value\n[ '/path/to/bun', '/path/to/cli.ts', '--flag1', '--flag2', 'value' ]\n```\n\n---\n\nTo parse `argv` into a more useful format, consider using [minimist](https://github.com/minimistjs/minimist) or [commander](https://github.com/tj/commander.js).\n"}
{"filename": "docs/guides/process/ctrl-c.md", "content": "---\nname: Listen for CTRL+C\n---\n\nThe `ctrl+c` shortcut sends an _interrupt signal_ to the running process. This signal can be intercepted by listening for the `SIGINT` event. If you want to close the process, you must explicitly call `process.exit()`.\n\n```ts\nprocess.on(\"SIGINT\", () => {\n  console.log(\"Ctrl-C was pressed\");\n  process.exit();\n});\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/process/index.json", "content": "{\n  \"name\": \"Processes\",\n  \"description\": \"A collection of guides for inspecting the current process and creating child processes with Bun\"\n}\n"}
{"filename": "docs/guides/process/nanoseconds.md", "content": "---\nname: Get the process uptime in nanoseconds\n---\n\nUse `Bun.nanoseconds()` to get the total number of nanoseconds the `bun` process has been alive.\n\n```ts\nBun.nanoseconds();\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/process/os-signals.md", "content": "---\nname: Listen to OS signals\n---\n\nBun supports the Node.js `process` global, including the `process.on()` method for listening to OS signals.\n\n```ts\nprocess.on(\"SIGINT\", () => {\n  console.log(\"Received SIGINT\");\n});\n```\n\n---\n\nIf you don't know which signal to listen for, you listen to the umbrella `\"exit\"` event.\n\n```ts\nprocess.on(\"exit\", (code) => {\n  console.log(`Process exited with code ${code}`);\n});\n```\n\n---\n\nIf you don't know which signal to listen for, you listen to the [`\"beforeExit\"`](https://nodejs.org/api/process.html#event-beforeexit) and [`\"exit\"`](https://nodejs.org/api/process.html#event-exit) events.\n\n```ts\nprocess.on(\"beforeExit\", (code) => {\n  console.log(`Event loop is empty!`);\n});\n\nprocess.on(\"exit\", (code) => {\n  console.log(`Process is exiting with code ${code}`);\n});\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/process/spawn-stderr.md", "content": "---\nname: Read stderr from a child process\n---\n\nWhen using [`Bun.spawn()`](/docs/api/spawn), the child process inherits the `stderr` of the spawning process. If instead you'd prefer to read and handle `stderr`, set the `stderr` option to `\"pipe\"`.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"], {\n  stderr: \"pipe\",\n});\nproc.stderr; // => ReadableStream\n```\n\n---\n\nTo read `stderr` until the child process exits, use the [`Bun.readableStreamToText()`](/docs/api/utils#bun-readablestreamto) convenience function.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"], {\n  stderr: \"pipe\",\n});\n\nconst errors: string = await Bun.readableStreamToText(proc.stderr);\nif (errors) {\n  // handle errors\n}\n```\n\n---\n\nSee [Docs > API > Child processes](/docs/api/spawn) for complete documentation.\n"}
{"filename": "docs/guides/process/spawn-stdout.md", "content": "---\nname: Read stdout from a child process\n---\n\nWhen using [`Bun.spawn()`](/docs/api/spawn), the `stdout` of the child process can be consumed as a `ReadableStream` via `proc.stdout`.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\n\nconst output = await new Response(proc.stdout).text();\noutput; // => \"hello\"\n```\n\n---\n\nTo instead pipe the `stdout` of the child process to `stdout` of the parent process, set \"inherit\".\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"], {\n  stdout: \"inherit\",\n});\n```\n\n---\n\nSee [Docs > API > Child processes](/docs/api/spawn) for complete documentation.\n"}
{"filename": "docs/guides/process/spawn.md", "content": "---\nname: Spawn a child process\n---\n\nUse [`Bun.spawn()`](/docs/api/spawn) to spawn a child process.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\n\n// await completion\nawait proc.exited;\n```\n\n---\n\nThe second argument accepts a configuration object.\n\n```ts\nconst proc = Bun.spawn(\"echo\", [\"Hello, world!\"], {\n  cwd: \"/tmp\",\n  env: { FOO: \"bar\" },\n  onExit(proc, exitCode, signalCode, error) {\n    // exit handler\n  },\n});\n```\n\n---\n\nBy default, the `stdout` of the child process can be consumed as a `ReadableStream` using `proc.stdout`.\n\n```ts\nconst proc = Bun.spawn([\"echo\", \"hello\"]);\n\nconst output = await new Response(proc.stdout).text();\noutput; // => \"hello\"\n```\n\n---\n\nSee [Docs > API > Child processes](/docs/api/spawn) for complete documentation.\n"}
{"filename": "docs/guides/process/stdin.md", "content": "---\nname: Read from stdin\n---\n\nFor CLI tools, it's often useful to read from `stdin`. In Bun, the `console` object is an `AsyncIterable` that yields lines from `stdin`.\n\n```ts#index.ts\nconst prompt = \"Type something: \";\nprocess.stdout.write(prompt);\nfor await (const line of console) {\n  console.log(`You typed: ${line}`);\n  process.stdout.write(prompt);\n}\n```\n\n---\n\nRunning this file results in a never-ending interactive prompt that echoes whatever the user types.\n\n```sh\n$ bun run index.tsx\nType something: hello\nYou typed: hello\nType something: hello again\nYou typed: hello again\n```\n\n---\n\nBun also exposes stdin as a `BunFile` via `Bun.stdin`. This is useful for incrementally reading large inputs that are piped into the `bun` process.\n\nThere is no guarantee that the chunks will be split line-by-line.\n\n```ts#stdin.ts\nfor await (const chunk of Bun.stdin.stream()) {\n  // chunk is Uint8Array\n  // this converts it to text (assumes ASCII encoding)\n  const chunkText = Buffer.from(chunk).toString();\n  console.log(`Chunk: ${chunkText}`);\n}\n```\n\n---\n\nThis will print the input that is piped into the `bun` process.\n\n```sh\n$ echo \"hello\" | bun run stdin.ts\nChunk: hello\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/read-file/arraybuffer.md", "content": "---\nname: Read a file to an ArrayBuffer\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob` and allows you to lazily read the file in a variety of formats. Use `.arrayBuffer()` to read the file as an `ArrayBuffer`.\n\n```ts\nconst path = \"/path/to/package.json\";\nconst file = Bun.file(path);\n\nconst buffer = await file.arrayBuffer();\n```\n\n---\n\nThe binary content in the `ArrayBuffer` can then be read as a typed array, such as `Uint8Array`.\n\n```ts\nconst buffer = await file.arrayBuffer();\nconst bytes = new Uint8Array(buffer);\n\nbytes[0];\nbytes.length;\n```\n\n---\n\nRefer to the [Typed arrays](/docs/api/binary-data#typedarray) docs for more information on working with typed arrays in Bun.\n"}
{"filename": "docs/guides/read-file/buffer.md", "content": "---\nname: Read a file to a Buffer\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob` and allows you to lazily read the file in a variety of formats.\n\nTo read the file into a `Buffer` instance, first use `.arrayBuffer()` to consume the file as an `ArrayBuffer`, then use `Buffer.from()` to create a `Buffer` from the `ArrayBuffer`.\n\n```ts\nconst path = \"/path/to/package.json\";\nconst file = Bun.file(path);\n\nconst arrbuf = await file.arrayBuffer();\nconst buffer = Buffer.from(arrbuf);\n```\n\n---\n\nRefer to [Binary data > Buffer](/docs/api/binary-data#buffer) for more information on working with `Buffer` and other binary data formats in Bun.\n"}
{"filename": "docs/guides/read-file/exists.md", "content": "---\nname: Check if a file exists\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. Use the `.exists()` method to check if a file exists at the given path.\n\n```ts\nconst path = \"/path/to/package.json\";\nconst file = Bun.file(path);\n\nfile.exists(); // boolean;\n```\n\n---\n\nRefer to [API > File I/O](/docs/api/file-io) for more information on working with `BunFile`.\n"}
{"filename": "docs/guides/read-file/index.json", "content": "{\n  \"name\": \"Reading files\",\n  \"description\": \"A collection of guides for reading files with Bun\"\n}\n"}
{"filename": "docs/guides/read-file/json.md", "content": "---\nname: Read a JSON file\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob` and allows you to lazily read the file in a variety of formats. Use `.json()` to read and parse the contents of a `.json` file as a plain object.\n\nThe MIME type of the `BunFile` will be set accordingly.\n\n```ts\nconst path = \"/path/to/package.json\";\nconst file = Bun.file(path);\n\nconst contents = await file.json();\n// { name: \"my-package\" }\n\nfile.type; // => \"application/json;charset=utf-8\";\n```\n"}
{"filename": "docs/guides/read-file/mime.md", "content": "---\nname: Get the MIME type of a file\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob`, so use the `.type` property to read the MIME type.\n\n```ts\nconst file = Bun.file(\"./package.json\");\nfile.type; // application/json\n\nconst file = Bun.file(\"./index.html\");\nfile.type; // text/html\n\nconst file = Bun.file(\"./image.png\");\nfile.type; // image/png\n```\n\n---\n\nRefer to [API > File I/O](/docs/api/file-io) for more information on working with `BunFile`.\n"}
{"filename": "docs/guides/read-file/stream.md", "content": "---\nname: Read a file as a ReadableStream\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob` and allows you to lazily read the file in a variety of formats. Use `.stream()` to consume the file incrementally as a `ReadableStream`.\n\n```ts\nconst path = \"/path/to/package.json\";\nconst file = Bun.file(path);\n\nconst stream = await file.stream();\n```\n\n---\n\nThe chunks of the stream can be consumed as an [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) using `for await`.\n\n```ts\nfor await (const chunk of stream) {\n  chunk; // => Uint8Array\n}\n```\n\n---\n\nRefer to the [Streams](/docs/api/streams) documentation for more information on working with streams in Bun.\n"}
{"filename": "docs/guides/read-file/string.md", "content": "---\nname: Read a file as a string\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob` and allows you to lazily read the file in a variety of formats. Use `.text()` to read the contents as a string.\n\n```ts\nconst path = \"/path/to/file.txt\";\nconst file = Bun.file(path);\n\nconst text = await file.text();\n// string\n```\n\n---\n\nAny relative paths will be resolved relative to the project root (the nearest directory containing a `package.json` file).\n\n```ts\nconst path = \"./file.txt\";\nconst file = Bun.file(path);\n```\n"}
{"filename": "docs/guides/read-file/uint8array.md", "content": "---\nname: Read a file to a Uint8Array\n---\n\nThe `Bun.file()` function accepts a path and returns a `BunFile` instance. The `BunFile` class extends `Blob` and allows you to lazily read the file in a variety of formats.\n\nTo read the file into a `Uint8Array` instance, retrieve the contents of the `BunFile` as an `ArrayBuffer` with `.arrayBuffer()`, then pass it into the `Uint8Array` constructor.\n\n```ts\nconst path = \"/path/to/package.json\";\nconst file = Bun.file(path);\n\nconst arrBuffer = await file.arrayBuffer();\nconst byteArray = new Uint8Array(arrBuffer);\n\nbyteArray[0]; // first byteArray\nbyteArray.length; // length of byteArray\n```\n\n---\n\nRefer to [API > Binary data > Typed arrays](/docs/api/binary-data#typedarray) for more information on working with `Uint8Array` and other binary data formats in Bun.\n"}
{"filename": "docs/guides/read-file/watch.md", "content": "---\nname: Watch a directory for changes\n---\n\nBun implements the `node:fs` module, including the `fs.watch` function for listening for file system changes.\n\nThis code block listens for changes to files in the current directory. By default this operation is _shallow_, meaning that changes to files in subdirectories will not be detected.\n\n```ts\nimport { watch } from \"fs\";\n\nconst watcher = watch(import.meta.dir, (event, filename) => {\n  console.log(`Detected ${event} in ${filename}`);\n});\n```\n\n---\n\nTo listen to changes in subdirectories, pass the `recursive: true` option to `fs.watch`.\n\n```ts\nimport { watch } from \"fs\";\n\nconst watcher = watch(\n  import.meta.dir,\n  { recursive: true },\n  (event, filename) => {\n    console.log(`Detected ${event} in ${filename}`);\n  },\n);\n```\n\n---\n\nUsing the `node:fs/promises` module, you can listen for changes using `for await...of` instead of a callback.\n\n```ts\nimport { watch } from \"fs/promises\";\n\nconst watcher = watch(import.meta.dir);\nfor await (const event of watcher) {\n  console.log(`Detected ${event.eventType} in ${event.filename}`);\n}\n```\n\n---\n\nTo stop listening for changes, call `watcher.close()`. It's common to do this when the process receives a `SIGINT` signal, such as when the user presses Ctrl-C.\n\n```ts\nimport { watch } from \"fs\";\n\nconst watcher = watch(import.meta.dir, (event, filename) => {\n  console.log(`Detected ${event} in ${filename}`);\n});\n\nprocess.on(\"SIGINT\", () => {\n  // close watcher when Ctrl-C is pressed\n  console.log(\"Closing watcher...\");\n  watcher.close();\n\n  process.exit(0);\n});\n```\n\n---\n\nRefer to [API > Binary data > Typed arrays](/docs/api/binary-data#typedarray) for more information on working with `Uint8Array` and other binary data formats in Bun.\n"}
{"filename": "docs/guides/runtime/cicd.md", "content": "---\nname: Install and run Bun in GitHub Actions\n---\n\nUse the official [`setup-bun`](https://github.com/oven-sh/setup-bun) GitHub Action to install `bun` in your GitHub Actions runner.\n\n```yaml-diff#workflow.yml\nname: my-workflow\njobs:\n  my-job:\n    name: my-job\n    runs-on: ubuntu-latest\n    steps:\n      # ...\n      - uses: actions/checkout@v3\n+     - uses: oven-sh/setup-bun@v1\n\n      # run any `bun` or `bunx` command\n+     - run: bun install\n+     - run: bun index.ts\n+     - run: bun run build\n```\n\n---\n\nTo specify a version of Bun to install:\n\n```yaml-diff#workflow.yml\nname: my-workflow\njobs:\n  my-job:\n    name: my-job\n    runs-on: ubuntu-latest\n    steps:\n      # ...\n      - uses: oven-sh/setup-bun@v1\n+       with:\n+         version: 0.7.0 # or \"canary\"\n```\n\n---\n\nRefer to the [README.md](https://github.com/oven-sh/setup-bun) for complete documentation of the `setup-bun` GitHub Action.\n"}
{"filename": "docs/guides/runtime/import-json.md", "content": "---\nname: Import a JSON file\n---\n\nBun natively supports `.json` imports.\n\n```json#package.json\n{\n  \"name\": \"bun\",\n  \"version\": \"1.0.0\",\n  \"author\": {\n    \"name\": \"John Dough\",\n    \"email\": \"john@dough.com\"\n  }\n}\n```\n\n---\n\nImport the file like any other source file.\n\n```ts\nimport data from \"./package.json\";\n\ndata.name; // => \"bun\"\ndata.version; // => \"1.0.0\"\ndata.author.name; // => \"John Dough\"\n```\n\n---\n\nSee [Docs > Runtime > TypeScript](/docs/runtime/typescript) for more information on using TypeScript with Bun.\n"}
{"filename": "docs/guides/runtime/import-toml.md", "content": "---\nname: Import a TOML file\n---\n\nBun natively supports importing `.toml` files.\n\n```toml#data.toml\nname = \"bun\"\nversion = \"1.0.0\"\n\n[author]\nname = \"John Dough\"\nemail = \"john@dough.com\"\n```\n\n---\n\nImport the file like any other source file.\n\n```ts\nimport data from \"./data.toml\";\n\ndata.name; // => \"bun\"\ndata.version; // => \"1.0.0\"\ndata.author.name; // => \"John Dough\"\n```\n\n---\n\nSee [Docs > Runtime > TypeScript](/docs/runtime/typescript) for more information on using TypeScript with Bun.\n"}
{"filename": "docs/guides/runtime/index.json", "content": "{\n  \"name\": \"Runtime\",\n  \"description\": \"A collection of guides for executing code with the Bun runtime\"\n}\n"}
{"filename": "docs/guides/runtime/read-env.md", "content": "---\nname: Read environment variables\n---\n\nThe current environment variables can be accessed via `process.env`.\n\n```ts\nprocess.env.API_TOKEN; // => \"secret\"\n```\n\n---\n\nBun also exposes these variables via `Bun.env`, which is a simple alias of `process.env`.\n\n```ts\nBun.env.API_TOKEN; // => \"secret\"\n```\n\n---\n\nTo print all currently-set environment variables to the command line, run `bun run env`. This is useful for debugging.\n\n```sh\n$ bun run env\nBAZ=stuff\nFOOBAR=aaaaaa\n<lots more lines>\n```\n\n---\n\nSee [Docs > Runtime > Environment variables](/docs/cli/run#environment-variables) for more information on using environment variables with Bun.\n"}
{"filename": "docs/guides/runtime/set-env.md", "content": "---\nname: Set environment variables\n---\n\nThe current environment variables can be accessed via `process.env` or `Bun.env`.\n\n```ts\nBun.env.API_TOKEN; // => \"secret\"\nprocess.env.API_TOKEN; // => \"secret\"\n```\n\n---\n\nSet these variables in a `.env` file.\n\nBun reads the following files automatically (listed in order of increasing precedence).\n\n- `.env`\n- `.env.production` or `.env.development` (depending on value of `NODE_ENV`)\n- `.env.local`\n\n```txt#.env\nFOO=hello\nBAR=world\n```\n\n---\n\nVariables can also be set via the command line.\n\n```sh\n$ FOO=helloworld bun run dev\n```\n\n---\n\nSee [Docs > Runtime > Environment variables](/docs/cli/run#environment-variables) for more information on using environment variables with Bun.\n"}
{"filename": "docs/guides/runtime/timezone.md", "content": "---\nname: Set a time zone in Bun\n---\n\nBun supports programmatically setting a default time zone for the lifetime of the `bun` process. To do set, set the value of the `TZ` environment variable to a [valid timezone identifier](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n\n{% callout %}\nWhen running a file with `bun`, the timezone defaults to your system's configured local time zone.\n\nWhen running tests with `bun test`, the timezone is set to `UTC` to make tests more deterministic.\n{% /callout %}\n\n```ts\nprocess.env.TZ = \"America/New_York\";\n```\n\n---\n\nAlternatively, this can be set from the command line when running a Bun command.\n\n```sh\n$ TZ=America/New_York bun run dev\n```\n\n---\n\nOnce `TZ` is set, any `Date` instances will have that time zone. By default all dates use your system's configured time zone.\n\n```ts\nnew Date().getHours(); // => 18\n\nprocess.env.TZ = \"America/New_York\";\n\nnew Date().getHours(); // => 21\n```\n"}
{"filename": "docs/guides/runtime/tsconfig-paths.md", "content": "---\nname: Re-map import paths\n---\n\nBun reads the `paths` field in your `tsconfig.json` to re-write import paths. This is useful for aliasing package names or avoiding long relative paths.\n\n```json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"my-custom-name\": \"zod\",\n      \"@components/*\": \"./src/components/*\"\n    }\n  }\n}\n```\n\n---\n\nWith the above `tsconfig.json`, the following imports will be re-written:\n\n```ts\nimport { z } from \"my-custom-name\"; // imports from \"zod\"\nimport { Button } from \"@components/Button\"; // imports from \"./src/components/Button\"\n```\n\n---\n\nSee [Docs > Runtime > TypeScript](/docs/runtime/typescript) for more information on using TypeScript with Bun.\n"}
{"filename": "docs/guides/runtime/web-debugger.md", "content": "---\nname: Debugging Bun with the web debugger\n---\n\nBun speaks the [WebKit Inspector Protocol](https://github.com/oven-sh/bun/blob/main/packages/bun-vscode/types/jsc.d.ts). To enable debugging when running code with Bun, use the `--inspect` flag. For demonstration purposes, consider the following simple web server.\n\n```ts#server.ts\nBun.serve({\n  fetch(req){\n    console.log(req.url);\n    return new Response(\"Hello, world!\");\n  }\n})\n```\n\n---\n\nLet's run this file with the `--inspect` flag.\n\nThis automatically starts a WebSocket server on an available port that can be used to introspect the running Bun process. Various debugging tools can connect to this server to provide an interactive debugging experience.\n\nBun hosts a web-based debugger at [debug.bun.sh](https://debug.bun.sh). It is a modified version of WebKit's [Web Inspector Interface](https://webkit.org/web-inspector/web-inspector-interface/), which will look familiar to Safari users.\n\n```sh\n$ bun --inspect server.ts\n------------------ Bun Inspector ------------------\nListening at:\n  ws://localhost:6499/0tqxs9exrgrm\n\nInspect in browser:\n  https://debug.bun.sh/#localhost:6499/0tqxs9exrgrm\n------------------ Bun Inspector ------------------\n```\n\n---\n\nOpen the provided `debug.bun.sh` URL in your browser to start a debugging session. From this interface, you'll be able to view the source code of the running file, view and set breakpoints, and execute code with the built-in console.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/e6a976a8-80cc-4394-8925-539025cc025d\" alt=\"Screenshot of Bun debugger, Console tab\" /%}\n\n---\n\nLet's set a breakpoint. Navigate to the Sources tab; you should see the code from earlier. Click on the line number `3` to set a breakpoint on our `console.log(req.url)` statement.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/3b69c7e9-25ff-4f9d-acc4-caa736862935\" alt=\"screenshot of Bun debugger\" /%}\n\n---\n\nThen visit [`http://localhost:3000`](http://localhost:3000) in your web browser. This will send an HTTP request to our `localhost` web server. It will seem like the page isn't loading. Why? Because the program has paused execution at the breakpoint we set earlier.\n\nNote how the UI has changed.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/8b565e58-5445-4061-9bc4-f41090dfe769\" alt=\"screenshot of Bun debugger\" /%}\n\n---\n\nAt this point there's a lot we can do to introspect the current execution environment. We can use the console at the bottom to run arbitrary code in the context of the program, with full access to the variables in scope at our breakpoint.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/f4312b76-48ba-4a7d-b3b6-6205968ac681\" /%}\n\n---\n\nOn the right side of the Sources pane, we can see all local variables currently in scope, and drill down to see their properties and methods. Here, we're inspecting the `req` variable.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/63d7f843-5180-489c-aa94-87c486e68646\" /%}\n\n---\n\nIn the upper left of the Sources pane, we can control the execution of the program.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/41b76deb-7371-4461-9d5d-81b5a6d2f7a4\" /%}\n\n---\n\nHere's a cheat sheet explaining the functions of the control flow buttons.\n\n- _Continue script execution_ \u2014\u00a0continue running the program until the next breakpoint or exception.\n- _Step over_ \u2014\u00a0The program will continue to the next line.\n- _Step into_ \u2014\u00a0If the current statement contains a function call, the debugger will \"step into\" the called function.\n- _Step out_ \u2014\u00a0If the current statement is a function call, the debugger will finish executing the call, then \"step out\" of the function to the location where it was called.\n\n{% image src=\"https://github-production-user-asset-6210df.s3.amazonaws.com/3084745/261510346-6a94441c-75d3-413a-99a7-efa62365f83d.png\" /%}\n"}
{"filename": "docs/guides/streams/index.json", "content": "{\n  \"name\": \"Streams\",\n  \"description\": \"A collection of guides for manipulating streams with Bun\"\n}\n"}
{"filename": "docs/guides/streams/to-array.md", "content": "---\nname: Convert a ReadableStream to an array of chunks\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats. The `Bun.readableStreamToArray` function reads the contents of a `ReadableStream` to an array of chunks.\n\n```ts\nconst stream = new ReadableStream();\nconst str = await Bun.readableStreamToArray(stream);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/streams/to-arraybuffer.md", "content": "---\nname: Convert a ReadableStream to an ArrayBuffer\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats.\n\n```ts\nconst stream = new ReadableStream();\nconst buf = await Bun.readableStreamToArrayBuffer(stream);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/streams/to-blob.md", "content": "---\nname: Convert a ReadableStream to a Blob\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats.\n\n```ts\nconst stream = new ReadableStream();\nconst blob = await Bun.readableStreamToBlob(stream);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/streams/to-buffer.md", "content": "---\nname: Convert a ReadableStream to a Buffer\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats. This snippet reads the contents of a `ReadableStream` to an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), then creates a [`Buffer`](https://nodejs.org/api/buffer.html) that points to it.\n\n```ts\nconst stream = new ReadableStream();\nconst arrBuf = await Bun.readableStreamToArrayBuffer(stream);\nconst nodeBuf = Buffer.from(arrBuf);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/streams/to-json.md", "content": "---\nname: Convert a ReadableStream to a JSON\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats.\n\n```ts\nconst stream = new ReadableStream();\nconst json = await Bun.readableStreamToJSON(stream);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/streams/to-string.md", "content": "---\nname: Convert a ReadableStream to a string\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats.\n\n```ts\nconst stream = new ReadableStream();\nconst str = await Bun.readableStreamToText(stream);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/streams/to-typedarray.md", "content": "---\nname: Convert a ReadableStream to a Uint8Array\n---\n\nBun provides a number of convenience functions for reading the contents of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) into different formats. This snippet reads the contents of a `ReadableStream` to an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), then creates a [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) that points to the buffer.\n\n```ts\nconst stream = new ReadableStream();\nconst buf = await Bun.readableStreamToArrayBuffer(stream);\nconst uint8 = new Uint8Array(buf);\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils#bun-readablestreamto) for documentation on Bun's other `ReadableStream` conversion functions.\n"}
{"filename": "docs/guides/test/bail.md", "content": "---\nname: Bail early with the Bun test runner\n---\n\nUse the `--bail` flag to bail on a test run after a single failure. This is useful for aborting as soon as possible in a continuous integration environment.\n\n```sh\n$ bun test --bail\n```\n\n---\n\nTo bail after a certain threshold of failures, optionally specify a number after the flag.\n\n```sh\n# bail after 10 failures\n$ bun test --bail 10\n```\n\n---\n\nSee [Docs > Test runner](/docs/cli/test) for complete documentation of `bun test`.\n"}
{"filename": "docs/guides/test/coverage-threshold.md", "content": "---\nname: Set a code coverage threshold with the Bun test runner\n---\n\nBun's test runner supports built-in code coverage reporting via the `--coverage` flag.\n\n```sh\n$ bun test --coverage\n\ntest.test.ts:\n\u2713 math > add [0.71ms]\n\u2713 math > multiply [0.03ms]\n\u2713 random [0.13ms]\n-------------|---------|---------|-------------------\nFile         | % Funcs | % Lines | Uncovered Line #s\n-------------|---------|---------|-------------------\nAll files    |   66.67 |   77.78 |\n math.ts     |   50.00 |   66.67 |\n random.ts   |   50.00 |   66.67 |\n-------------|---------|---------|-------------------\n\n 3 pass\n 0 fail\n 3 expect() calls\n```\n\n---\n\nTo set a minimum coverage threshold, add the following line to your `bunfig.toml`. This requires that 90% of your codebase is covered by tests.\n\n```toml\n[test]\n# to require 90% line-level and function-level coverage\ncoverageThreshold = 0.9\n```\n\n---\n\nIf your test suite does not meet this threshold, `bun test` will exit with a non-zero exit code to signal a failure.\n\n```sh\n$ bun test --coverage\n<test output>\n$ echo $?\n1 # this is the exit code of the previous command\n```\n\n---\n\nDifferent thresholds can be set for line-level and function-level coverage.\n\n```toml\n[test]\n# to set different thresholds for lines and functions\ncoverageThreshold = { line = 0.5, function = 0.7 }\n```\n\n---\n\nSee [Docs > Test runner > Coverage](/docs/test/coverage) for complete documentation on code coverage reporting in Bun.\n"}
{"filename": "docs/guides/test/coverage.md", "content": "---\nname: Generate code coverage reports with the Bun test runner\n---\n\nBun's test runner supports built-in _code coverage reporting_. This makes it easy to see how much of the codebase is covered by tests and find areas that are not currently well-tested.\n\n---\n\nPass the `--coverage` flag to `bun test` to enable this feature. This will print a coverage report after the test run.\n\nThe coverage report lists the source files that were executed during the test run, the percentage of functions and lines that were executed, and the line ranges that were not executed during the run.\n\n```sh\n$ bun test --coverage\n\ntest.test.ts:\n\u2713 math > add [0.71ms]\n\u2713 math > multiply [0.03ms]\n\u2713 random [0.13ms]\n-------------|---------|---------|-------------------\nFile         | % Funcs | % Lines | Uncovered Line #s\n-------------|---------|---------|-------------------\nAll files    |   66.67 |   77.78 |\n math.ts     |   50.00 |   66.67 |\n random.ts   |   50.00 |   66.67 |\n-------------|---------|---------|-------------------\n\n 3 pass\n 0 fail\n 3 expect() calls\n```\n\n---\n\nTo always enable coverage reporting by default, add the following line to your `bunfig.toml`:\n\n```toml\n[test]\ncoverage = true # always enable coverage\n```\n\n---\n\nRefer to [Docs > Test runner > Coverage](/docs/test/coverage) for complete documentation on code coverage reporting in Bun.\n"}
{"filename": "docs/guides/test/happy-dom.md", "content": "---\nname: Write browser DOM tests with Bun and happy-dom\n---\n\nYou can write and run browser tests with Bun's test runner in conjunction with [Happy DOM](https://github.com/capricorn86/happy-dom). Happy DOM implements mocked versions of browser APIs like `document` and `location`.\n\n---\n\nTo get started, install `happy-dom`.\n\n```sh\n$ bun add -d @happy-dom/global-registrator\n```\n\n---\n\nThis module exports a \"registrator\" that injects the mocked browser APIs to the global scope.\n\n```ts#happydom.ts\nimport { GlobalRegistrator } from \"@happy-dom/global-registrator\";\n\nGlobalRegistrator.register();\n```\n\n---\n\nWe need to make sure this file is executed before any of our test files. That's a job for Bun's built-in [_preload_]() functionality. Create a `bunfig.toml` file in the root of your project (if it doesn't already exist) and add the following lines.\n\nThe `./happydom.ts` file should contain the registration code above.\n\n```toml#bunfig.toml\n[test]\npreload = \"./happydom.ts\"\n```\n\n---\n\nNow running `bun test` inside our project will automatically execute `happydom.ts` first. We can start writing tests that use browser APIs.\n\n```ts\nimport { test, expect } from \"bun:test\";\n\ntest(\"set button text\", () => {\n  document.body.innerHTML = `<button>My button</button>`;\n  const button = document.querySelector(\"button\");\n  expect(button?.innerText).toEqual(\"My button\");\n});\n```\n\n---\n\nWith Happy DOM propertly configured, this test runs as expected.\n\n```sh\n$ bun test\n\ndom.test.ts:\n\u2713 set button text [0.82ms]\n\n 1 pass\n 0 fail\n 1 expect() calls\nRan 1 tests across 1 files. 1 total [125.00ms]\n```\n\n---\n\nRefer to the [Happy DOM repo](https://github.com/capricorn86/happy-dom) and [Docs > Test runner > DOM](/docs/test/dom) for complete documentation on writing browser tests with Bun.\n"}
{"filename": "docs/guides/test/index.json", "content": "{\n  \"name\": \"Test runner\",\n  \"description\": \"A collection of guides for writing, running, and configuring tests in Bun\"\n}\n"}
{"filename": "docs/guides/test/mock-clock.md", "content": "---\nname: Set the system time in Bun's test runner\n---\n\nBun's test runner supports setting the system time programmatically with the `setSystemTime` function.\n\n```ts\nimport { test, expect, setSystemTime } from \"bun:test\";\n\ntest(\"party like it's 1999\", () => {\n  const date = new Date(\"1999-01-01T00:00:00.000Z\");\n  setSystemTime(date); // it's now January 1, 1999\n\n  const now = new Date();\n  expect(now.getFullYear()).toBe(1999);\n  expect(now.getMonth()).toBe(0);\n  expect(now.getDate()).toBe(1);\n});\n```\n\n---\n\nThe `setSystemTime` function is commonly used on conjunction with [Lifecycle Hooks](/docs/test/lifecycle) to configure a testing environment with a determinstic \"fake clock\".\n\n```ts\nimport { test, expect, beforeAll, setSystemTime } from \"bun:test\";\n\nbeforeAll(() => {\n  const date = new Date(\"1999-01-01T00:00:00.000Z\");\n  setSystemTime(date); // it's now January 1, 1999\n});\n\n// tests...\n```\n\n---\n\nTo reset the system clock to the actual time, call `setSystemTime` with no arguments.\n\n```ts\nimport { test, expect, beforeAll, setSystemTime } from \"bun:test\";\n\nsetSystemTime(); // reset to actual time\n```\n\n---\n\nSee [Docs > Test Runner > Date and time](/docs/test/time) for complete documentation on mocking with the Bun test runner.\n"}
{"filename": "docs/guides/test/mock-functions.md", "content": "---\nname: Mock functions in `bun test`\n---\n\nCreate mocks with the `mock` function from `bun:test`.\n\n```ts\nimport { test, expect, mock } from \"bun:test\";\n\nconst random = mock(() => Math.random());\n```\n\n---\n\nThe mock function can accept arguments.\n\n```ts\nimport { test, expect, mock } from \"bun:test\";\n\nconst random = mock((multiplier: number) => multiplier * Math.random());\n```\n\n---\n\nThe result of `mock()` is a new function that's been decorated with some additional properties.\n\n```ts\nimport { mock } from \"bun:test\";\n\nconst random = mock((multiplier: number) => multiplier * Math.random());\n\nrandom(2);\nrandom(10);\n\nrandom.mock.calls;\n// [[ 2 ], [ 10 ]]\n\nrandom.mock.results;\n//  [\n//    { type: \"return\", value: 0.6533907460954099 },\n//    { type: \"return\", value: 0.6452713933037312 }\n//  ]\n```\n\n---\n\nThese extra properties make it possible to write `expect` assertions about usage of the mock function, including how many times it was called, the arguments, and the return values.\n\n```ts\nimport { test, mock } from \"bun:test\";\n\nconst random = mock((multiplier: number) => multiplier * Math.random());\n\ntest(\"random\", async () => {\n  const a = random(1);\n  const b = random(2);\n  const c = random(3);\n\n  expect(random).toHaveBeenCalled();\n  expect(random).toHaveBeenCalledTimes(3);\n  expect(random.mock.args).toEqual([[1], [2], [3]]);\n  expect(random.mock.results[0]).toEqual({ type: \"return\", value: a });\n});\n```\n\n---\n\nSee [Docs > Test Runner > Mocks](/docs/test/mocks) for complete documentation on mocking with the Bun test runner.\n"}
{"filename": "docs/guides/test/rerun-each.md", "content": "---\nname: Re-run tests multiple times with the Bun test runner\n---\n\nUse the `--rerun-each` flag to re-run every test multiple times with the Bun test runner. This is useful for finding flaky or non-deterministic tests.\n\n```sh\n# re-run each test 10 times\n$ bun test --rerun-each 10\n```\n\n---\n\nSee [Docs > Test runner](/docs/cli/test) for complete documentation of `bun test`.\n"}
{"filename": "docs/guides/test/run-tests.md", "content": "---\nname: Run your tests with the Bun test runner\n---\n\nBun has a built-in [test runner](/docs/cli/test) with a Jest-like `expect` API.\n\n---\n\nTo use it, run the `bun test` command from your project directory. The test runner will recursively search for all files in the directory that match the following patterns and execute the tests they contain.\n\n```txt\n*.test.{js|jsx|ts|tsx}\n*_test.{js|jsx|ts|tsx}\n*.spec.{js|jsx|ts|tsx}\n*_spec.{js|jsx|ts|tsx}\n```\n\n---\n\nHere's what the output of a typical test run looks like. In this case, there are three tests files (`test.test.js`, `test2.test.js`, and `test3.test.js`) containing two tests each (`add` and `multiply`).\n\n```sh\n$ bun test\nbun test v0.8.0 (9c68abdb)\n\ntest.test.js:\n\u2713 add [0.87ms]\n\u2713 multiply [0.02ms]\n\ntest2.test.js:\n\u2713 add [0.72ms]\n\u2713 multiply [0.01ms]\n\ntest3.test.js:\n\u2713 add [0.54ms]\n\u2713 multiply [0.01ms]\n\n 6 pass\n 0 fail\n 6 expect() calls\nRan 6 tests across 3 files. [9.00ms]\n```\n\n---\n\nTo only run certain test files, pass a positional argument to `bun test`. The runner will only execute files that contain that argument in their path.\n\n```sh\n$ bun test test3\nbun test v0.8.0 (9c68abdb)\n\ntest3.test.js:\n\u2713 add [1.40ms]\n\u2713 multiply [0.03ms]\n\n 2 pass\n 0 fail\n 2 expect() calls\nRan 2 tests across 1 files. [15.00ms]\n```\n\n---\n\nAll tests have a name, defined using the first parameter to the `test` function. Tests can also be grouped into suites with `describe`.\n\n```ts\nimport { test, expect } from \"bun:test\";\n\ndescribe(\"math\", () => {\n  test(\"add\", () => {\n    expect(2 + 2).toEqual(4);\n  });\n\n  test(\"multiply\", () => {\n    expect(2 * 2).toEqual(4);\n  });\n});\n```\n\n---\n\nTo filter which tests are executed by name, use the `-t`/`--test-name-pattern` flag.\n\nAdding `-t add` will only run tests with \"add\" in the name. This works with test names defined with `test` or test suite names defined with `describe`.\n\n```sh\n$ bun test -t add\nbun test v0.8.0 (9c68abdb)\n\ntest.test.js:\n\u2713 add [1.79ms]\n\u00bb multiply\n\ntest2.test.js:\n\u2713 add [2.30ms]\n\u00bb multiply\n\ntest3.test.js:\n\u2713 add [0.32ms]\n\u00bb multiply\n\n 3 pass\n 3 skip\n 0 fail\n 3 expect() calls\nRan 6 tests across 3 files. [59.00ms]\n```\n\n---\n\nSee [Docs > Test Runner](/docs/cli/test) for complete documentation on the test runner.\n"}
{"filename": "docs/guides/test/skip-tests.md", "content": "---\nname: Skip tests with the Bun test runner\n---\n\nTo skip a test with the Bun test runner, use the `test.skip` function.\n\n```ts\nimport { test } from \"bun:test\";\n\ntest.skip(\"unimplemented feature\", () => {\n  expect(Bun.isAwesome()).toBe(true);\n});\n```\n\n---\n\nRunning `bun test` will not execute this test. It will be marked as skipped in the terminal output.\n\n```sh\n$ bun test\n\ntest.test.ts:\n\u2713 add [0.03ms]\n\u2713 multiply [0.02ms]\n\u00bb unimplemented feature\n\n 2 pass\n 1 skip\n 0 fail\n 2 expect() calls\nRan 3 tests across 1 files. [74.00ms]\n```\n\n---\n\nSee also:\n\n- [Mark a test as a todo](/guides/test/todo-tests)\n- [Docs > Test runner > Writing tests](/docs/test/writing)\n"}
{"filename": "docs/guides/test/snapshot.md", "content": "---\nname: Use snapshot testing in `bun test`\n---\n\nBun's test runner supports Jest-style snapshot testing via `.toMatchSnapshot()`.\n\n{% callout %}\nThe `.toMatchInlineSnapshot()` method is not yet supported.\n{% /callout %}\n\n```ts#snap.test.ts\nimport { test, expect } from \"bun:test\";\n\ntest(\"snapshot\", () => {\n  expect({ foo: \"bar\" }).toMatchSnapshot();\n});\n```\n\n---\n\nThe first time this test is executed, Bun will evaluate the value passed into `expect()` and write it to disk in a directory called `__snapshots__` that lives alongside the test file. (Note the `snapshots: +1 added` line in the output.)\n\n```sh\n$ bun test test/snap\nbun test v0.8.0 (9c68abdb)\n\ntest/snap.test.ts:\n\u2713 snapshot [1.48ms]\n\n 1 pass\n 0 fail\n snapshots: +1 added\n 1 expect() calls\nRan 1 tests across 1 files. [82.00ms]\n```\n\n---\n\nThe `__snapshots__` directory contains a `.snap` file for each test file in the directory.\n\n```txt\ntest\n\u251c\u2500\u2500 __snapshots__\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 snap.test.ts.snap\n\u2514\u2500\u2500 snap.test.ts\n```\n\n---\n\nThe `snap.test.ts.snap` file is a JavaScript file that exports a serialized version of the value passed into `expect()`. The `{foo: \"bar\"}` object has been serialized to JSON.\n\n```js\n// Bun Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`snapshot 1`] = `\n{\n  \"foo\": \"bar\",\n}\n`;\n```\n\n---\n\nLater, when this test file is executed again, Bun will read the snapshot file and compare it to the value passed into `expect()`. If the values are different, the test will fail.\n\n```sh\n$ bun test\nbun test v0.8.0 (9c68abdb)\n\ntest/snap.test.ts:\n\u2713 snapshot [1.05ms]\n\n 1 pass\n 0 fail\n 1 snapshots, 1 expect() calls\nRan 1 tests across 1 files. [101.00ms]\n```\n\n---\n\nTo update snapshots, use the `--update-snapshots` flag.\n\n```sh\n$ bun test --update-snapshots\nbun test v0.8.0 (9c68abdb)\n\ntest/snap.test.ts:\n\u2713 snapshot [0.86ms]\n\n 1 pass\n 0 fail\n snapshots: +1 added  # the snapshot was regenerated\n 1 expect() calls\nRan 1 tests across 1 files. [102.00ms]\n```\n\n---\n\nSee [Docs > Test Runner > Snapshots](/docs/test/mocks) for complete documentation on mocking with the Bun test runner.\n"}
{"filename": "docs/guides/test/spy-on.md", "content": "---\nname: Spy on methods in `bun test`\n---\n\nUse the `spyOn` utility to track method calls with Bun's test runner.\n\n```ts\nimport { test, expect, spyOn } from \"bun:test\";\n\nconst leo = {\n  name: \"Leonardo\",\n  sayHi(thing: string) {\n    console.log(`Sup I'm ${this.name} and I like ${thing}`);\n  },\n};\n\nconst spy = spyOn(leo, \"sayHi\");\n```\n\n---\n\nOnce the spy is created, it can be used to write `expect` assertions relating to method calls.\n\n```ts-diff\n  import { test, expect, spyOn } from \"bun:test\";\n\n  const leo = {\n    name: \"Leonardo\",\n    sayHi(thing: string) {\n      console.log(`Sup I'm ${this.name} and I like ${thing}`);\n    },\n  };\n\n  const spy = spyOn(leo, \"sayHi\");\n\n+ test(\"turtles\", ()=>{\n+   expect(spy).toHaveBeenCalledTimes(0);\n+   leo.sayHi(\"pizza\");\n+   expect(spy).toHaveBeenCalledTimes(0);\n+   expect(spy.mock.calls).toEqual([[ \"pizza\" ]]);\n+ })\n```\n\n---\n\nSee [Docs > Test Runner > Mocks](/docs/test/mocks) for complete documentation on mocking with the Bun test runner.\n"}
{"filename": "docs/guides/test/timeout.md", "content": "---\nname: Set a per-test timeout with the Bun test runner\n---\n\nUse the `--timeout` flag to set a timeout for each test in milliseconds. If any test exceeds this timeout, it will be marked as failed.\n\nThe default timeout is `5000` (5 seconds).\n\n```sh\n$ bun test --timeout 3000 # 3 seconds\n```\n\n---\n\nSee [Docs > Test runner](/docs/cli/test) for complete documentation of `bun test`.\n"}
{"filename": "docs/guides/test/todo-tests.md", "content": "---\nname: Mark a test as a \"todo\" with the Bun test runner\n---\n\nTo remind yourself to write a test later, use the `test.todo` function. There's no need to provide a test implementation.\n\n```ts\nimport { test, expect } from \"bun:test\";\n\n// write this later\ntest.todo(\"unimplemented feature\");\n```\n\n---\n\nThe output of `bun test` indicates how many `todo` tests were encountered.\n\n```sh\n$ bun test\n\ntest.test.ts:\n\u2713 add [0.03ms]\n\u2713 multiply [0.02ms]\n\u270e unimplemented feature\n\n 2 pass\n 1 todo\n 0 fail\n 2 expect() calls\nRan 3 tests across 1 files. [74.00ms]\n```\n\n---\n\nOptionally, you can provide a test implementation.\n\n```ts\nimport { test, expect } from \"bun:test\";\n\ntest.todo(\"unimplemented feature\", () => {\n  expect(Bun.isAwesome()).toBe(true);\n});\n```\n\n---\n\nIf an implementation is provides, it will be executed and _expected to fail_ by test runner! If a todo test passes, the `bun test` run will return a non-zero exit code to signal the failure.\n\n```sh\n$ bun test\n$ echo $?\n1 # this is the exit code of the previous command\n```\n\n---\n\nSee also:\n\n- [Skip a test](/guides/test/skip-tests)\n- [Docs > Test runner > Writing tests](/docs/test/writing)\n"}
{"filename": "docs/guides/test/update-snapshots.md", "content": "---\nname: Update snapshots in `bun test`\n---\n\nBun's test runner supports Jest-style snapshot testing via `.toMatchSnapshot()`.\n\n{% callout %}\nThe `.toMatchInlineSnapshot()` method is not yet supported.\n{% /callout %}\n\n```ts#snap.test.ts\nimport { test, expect } from \"bun:test\";\n\ntest(\"snapshot\", () => {\n  expect({ foo: \"bar\" }).toMatchSnapshot();\n});\n```\n\n---\n\nThe first time this test is executed, Bun will write a snapshot file to disk in a directory called `__snapshots__` that lives alongside the test file.\n\n```txt\ntest\n\u251c\u2500\u2500 __snapshots__\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 snap.test.ts.snap\n\u2514\u2500\u2500 snap.test.ts\n```\n\n---\n\nTo regenerate snapshots, use the `--update-snapshots` flag.\n\n```sh\n$ bun test --update-snapshots\nbun test v0.8.0 (9c68abdb)\n\ntest/snap.test.ts:\n\u2713 snapshot [0.86ms]\n\n 1 pass\n 0 fail\n snapshots: +1 added # the snapshot was regenerated\n 1 expect() calls\nRan 1 tests across 1 files. [102.00ms]\n```\n\n---\n\nSee [Docs > Test Runner > Snapshots](/docs/test/mocks) for complete documentation on mocking with the Bun test runner.\n"}
{"filename": "docs/guides/test/watch-mode.md", "content": "---\nname: Run tests in watch mode with Bun\n---\n\nUse the `--watch` flag to run your tests in watch mode.\n\n```sh\n$ bun test --watch\n```\n\n---\n\nThis will restart the running Bun process whenever a file change is detected. It's fast. In this example, the editor is configured to save the file on every keystroke.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/dc49a36e-ba82-416f-b960-1c883a924248\" caption=\"Running tests in watch mode in Bun\" /%}\n\n---\n\nSee [Docs > Test Runner](/docs/cli/test) for complete documentation on the test runner.\n"}
{"filename": "docs/guides/util/base64.md", "content": "---\nname: Encode and decode base64 strings\n---\n\nBun implements the Web-standard [`atob`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob) and [`btoa`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa) functions for encoding and decoding base64 strings.\n\n```ts\nconst data = \"hello world\";\nconst encoded = btoa(data); // => \"aGVsbG8gd29ybGQ=\"\nconst decoded = atob(encoded); // => \"hello world\"\n```\n\n---\n\nSee [Docs > Web APIs](/docs/runtime/web-apis) for a complete breakdown of the Web APIs implemented in Bun.\n"}
{"filename": "docs/guides/util/deep-equals.md", "content": "---\nname: Check if two objects are deeply equal\n---\n\nCheck if two objects are deeply equal. This is used internally by `expect().toEqual()` in Bun's [test runner](/docs/test/writing).\n\n```ts#index.ts\nconst a = { a: 1, b: 2, c: { d: 3 } };\nconst b = { a: 1, b: 2, c: { d: 3 } };\n\nBun.deepEquals(a, b); // true\n```\n\n---\n\nPass `true` as a third argument to enable strict mode. This is used internally by `expect().toStrictEqual()` in Bun's [test runner](/docs/test/writing).\n\nThe following examples would return `true` in non-strict mode but `false` in strict mode.\n\n```ts\n// undefined values\nBun.deepEquals({}, { a: undefined }, true); // false\n\n// undefined in arrays\nBun.deepEquals([\"asdf\"], [\"asdf\", undefined], true); // false\n\n// sparse arrays\nBun.deepEquals([, 1], [undefined, 1], true); // false\n\n// object literals vs instances w/ same properties\nclass Foo {\n  a = 1;\n}\nBun.deepEquals(new Foo(), { a: 1 }, true); // false\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/deflate.md", "content": "---\nname: Compress and decompress data with DEFLATE\n---\n\nUse `Bun.deflateSync()` to compress a `Uint8Array` with DEFLATE.\n\n```ts\nconst data = Buffer.from(\"Hello, world!\");\nconst compressed = Bun.deflateSync(\"Hello, world!\");\n// => Uint8Array\n\nconst decompressed = Bun.inflateSync(compressed);\n// => Uint8Array\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/detect-bun.md", "content": "---\nname: Detect when code is executed with Bun\n---\n\nThe recommended way to conditionally detect when code is being executed with `bun` is to check for the existence of the `Bun` global.\n\nThis is similar to how you'd check for the existence of the `window` variable to detect when code is being executed in a browser.\n\n```ts\nif (typeof Bun !== \"undefined\") {\n  // this code will only run when the file is run with Bun\n}\n```\n\n---\n\nIn TypeScript environments, the previous approach will result in a type error unless `bun-types` is globally installed. To avoid this, you can check `process.versions` instead.\n\n```ts\nif (process.versions.bun) {\n  // this code will only run when the file is run with Bun\n}\n```\n"}
{"filename": "docs/guides/util/entrypoint.md", "content": "---\nname: Check if the current file is the entrypoint\n---\n\nBun provides a handful of module-specific utilities on the [`import.meta`](/docs/api/import-meta) object. Use `import.meta.main` to check if the current file is the entrypoint of the current process.\n\n```ts#index.ts\nif(import.meta.main){\n  // this file is directly executed with `bun run`\n}else{\n  // this file is being imported by another file\n}\n```\n\n---\n\nSee [Docs > API > import.meta](/docs/api/import-meta) for complete documentation.\n"}
{"filename": "docs/guides/util/escape-html.md", "content": "---\nname: Escape an HTML string\n---\n\nThe `Bun.escapeHTML()` utility can be used to escape HTML characters in a string. The following replacements are made.\n\n- `\"` becomes `\"&quot;\"`\n- `&` becomes `\"&amp;\"`\n- `'` becomes `\"&#x27;\"`\n- `<` becomes `\"&lt;\"`\n- `>` becomes `\"&gt;\"`\n\nThis function is optimized for large input. Non-string types will be converted to a string before escaping.\n\n```ts\nBun.escapeHTML(\"<script>alert('Hello World!')</script>\");\n// &lt;script&gt;alert(&#x27;Hello World!&#x27;)&lt;&#x2F;script&gt;\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/file-url-to-path.md", "content": "---\nname: Convert a file URL to an absolute path\n---\n\nUse `Bun.fileURLToPath()` to convert a `file://` URL to an absolute path.\n\n```ts\nBun.fileURLToPath(\"file:///path/to/file.txt\");\n// => \"/path/to/file.txt\"\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/gzip.md", "content": "---\nname: Compress and decompress data with gzip\n---\n\nUse `Bun.gzipSync()` to compress a `Uint8Array` with gzip.\n\n```ts\nconst data = Buffer.from(\"Hello, world!\");\nconst compressed = Bun.gzipSync(\"Hello, world!\");\n// => Uint8Array\n\nconst decompressed = Bun.gunzipSync(compressed);\n// => Uint8Array\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/hash-a-password.md", "content": "---\nname: Hash a password\n---\n\nThe `Bun.password.hash()` function provides a fast, built-in mechanism for securely hashing passwords in Bun. No third-party dependencies are required.\n\n```ts\nconst password = \"super-secure-pa$$word\";\n\nconst hash = await Bun.password.hash(password);\n// => $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/...\n```\n\n---\n\nBy default this uses the [Argon2id](https://en.wikipedia.org/wiki/Argon2) algorithm. Pass a second argument to `Bun.hash.password()` to use a different algorithm or configure the hashing parameters.\n\n```ts\nconst password = \"super-secure-pa$$word\";\n\n// use argon2 (default)\nconst argonHash = await Bun.password.hash(password, {\n  memoryCost: 4, // memory usage in kibibytes\n  timeCost: 3, // the number of iterations\n});\n```\n\n---\n\nBun also implements the [bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Specify `algorithm: \"bcrypt\"` to use it.\n\n```ts\n// use bcrypt\nconst bcryptHash = await Bun.password.hash(password, {\n  algorithm: \"bcrypt\",\n  cost: 4, // number between 4-31\n});\n```\n\n---\n\nTo verify a password, use `Bun.password.verify()`. The algorithm and its parameters are stored in the hash itself, so there's no need to re-specify any configuration.\n\n```ts\nconst password = \"super-secure-pa$$word\";\nconst hash = await Bun.password.hash(password);\n\nconst isMatch = await Bun.password.verify(password, hash);\n// => true\n```\n\n---\n\nSee [Docs > API > Hashing](/docs/api/hashing#bun-password) for complete documentation.\n"}
{"filename": "docs/guides/util/import-meta-dir.md", "content": "---\nname: Get the directory of the current file\n---\n\nBun provides a handful of module-specific utilities on the [`import.meta`](/docs/api/import-meta) object.\n\n```ts#/a/b/c.ts\nimport.meta.dir; // => \"/a/b\"\n```\n\n---\n\nSee [Docs > API > import.meta](/docs/api/import-meta) for complete documentation.\n"}
{"filename": "docs/guides/util/import-meta-file.md", "content": "---\nname: Get the file name of the current file\n---\n\nBun provides a handful of module-specific utilities on the [`import.meta`](/docs/api/import-meta) object. Use `import.meta.file` to retreive the name of the current file.\n\n```ts#/a/b/c.ts\nimport.meta.file; // => \"c.ts\"\n```\n\n---\n\nSee [Docs > API > import.meta](/docs/api/import-meta) for complete documentation.\n"}
{"filename": "docs/guides/util/import-meta-path.md", "content": "---\nname: Get the absolute path of the current file\n---\n\nBun provides a handful of module-specific utilities on the [`import.meta`](/docs/api/import-meta) object. Use `import.meta.path` to retreive the absolute path of the current file.\n\n```ts#/a/b/c.ts\nimport.meta.path; // => \"/a/b/c.ts\"\n```\n\n---\n\nSee [Docs > API > import.meta](/docs/api/import-meta) for complete documentation.\n"}
{"filename": "docs/guides/util/index.json", "content": "{\n  \"name\": \"Utilities\",\n  \"description\": \"A collection of guides relating to Bun's array of built-in utility functions\"\n}\n"}
{"filename": "docs/guides/util/main.md", "content": "---\nname: Get the absolute path to the current entrypoint\n---\n\nThe `Bun.main` property contains the absolute path to the current entrypoint.\n\n{% codetabs %}\n\n```ts#foo.ts\nconsole.log(Bun.main);\n```\n\n```ts#index.ts\nimport \"./foo.ts\";\n```\n\n{% /codetabs %}\n\n---\n\nThe printed path corresponds to the file that is executed with `bun run`.\n\n```sh\n$ bun run index.ts\n/path/to/index.ts\n$ bun run foo.ts\n/path/to/foo.ts\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/path-to-file-url.md", "content": "---\nname: Convert an absolute path to a file URL\n---\n\nUse `Bun.pathToFileURL()` to convert an absolute path to a `file://` URL.\n\n```ts\nBun.pathToFileURL(\"/path/to/file.txt\");\n// => \"file:///path/to/file.txt\"\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/sleep.md", "content": "---\nname: Sleep for a fixed number of milliseconds\n---\n\nThe `Bun.sleep` method provides a convenient way to create a void `Promise` that resolves in a fixed number of milliseconds.\n\n```ts\n// sleep for 1 second\nawait Bun.sleep(1000);\n```\n\n---\n\nInternally, this is equivalent to the following snippet that uses [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout).\n\n```ts\nawait new Promise((resolve) => setTimeout(resolve, ms));\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/util/version.md", "content": "---\nname: Get the current Bun version\n---\n\nGet the current version of Bun in a semver format.\n\n```ts#index.ts\nBun.version; // => \"0.6.15\"\n```\n\n---\n\nGet the exact `git` commit of [`oven-sh/bun`](https://github.com/oven-sh/bun) that was compiled to produce this Bun binary.\n\n```ts#index.ts\nBun.revision; // => \"49231b2cb9aa48497ab966fc0bb6b742dacc4994\"\n```\n\n---\n\nSee [Docs > API > Utils](/docs/api/utils) for more useful utilities.\n"}
{"filename": "docs/guides/websocket/compression.md", "content": "---\nname: Enable compression for WebSocket messages\n---\n\nPer-message compression can be enabled with the `perMessageDeflate` parameter. When set, all messages will be compressed using the [permessage-deflate](https://tools.ietf.org/html/rfc7692) WebSocket extension.\n\n```ts\nBun.serve({\n  // ...\n  websocket: {\n    // enable compression\n    perMessageDeflate: true,\n  },\n});\n```\n\n---\n\nTo enable compression for individual messages, pass `true` as the second parameter to `ws.send()`.\n\n```ts\nBun.serve({\n  // ...\n  websocket: {\n    async message(ws, message) {\n      // send a compressed message\n      ws.send(\"Hello world!\", true);\n    },\n  },\n});\n```\n"}
{"filename": "docs/guides/websocket/context.md", "content": "---\nname: Set per-socket contextual data on a WebSocket\n---\n\nWhen building a WebSocket server, it's typically necessary to store some identifying information or context associated with each connected client.\n\nWith [Bun.serve()](/docs/api/websockets#contextual-data), this \"contextual data\" is set when the connection is initially upgraded by passing a `data` parameter in the `server.upgrade()` call.\n\n```ts\nBun.serve<{ socketId: number }>({\n  fetch(req, server) {\n    const success = server.upgrade(req, {\n      data: {\n        socketId: Math.random(),\n      },\n    });\n    if (success) return undefined;\n\n    // handle HTTP request normally\n    // ...\n  },\n  websocket: {\n    // define websocket handlers\n    async message(ws, message) {\n      // the contextual dta is available as the `data` property\n      // on the WebSocket instance\n      console.log(`Received ${message} from ${ws.data.socketId}}`);\n    },\n  },\n});\n```\n\n---\n\nIt's common to read cookies/headers from the incoming request to identify the connecting client.\n\n```ts\ntype WebSocketData = {\n  createdAt: number;\n  token: string;\n  userId: string;\n};\n\n// TypeScript: specify the type of `data`\nBun.serve<WebSocketData>({\n  async fetch(req, server) {\n    // use a library to parse cookies\n    const cookies = parseCookies(req.headers.get(\"Cookie\"));\n    const token = cookies[\"X-Token\"];\n    const user = await getUserFromToken(ws.data.authToken);\n\n    const upgraded = server.upgrade(req, {\n      data: {\n        createdAt: Date.now(),\n        token: cookies[\"X-Token\"],\n        userId: user.id,\n      },\n    });\n\n    if (upgraded) return undefined;\n  },\n  websocket: {\n    async message(ws, message) {\n      // save the message to a database\n      await saveMessageToDatabase({\n        message: String(message),\n        userId: ws.data.userId,\n      });\n    },\n  },\n});\n```\n"}
{"filename": "docs/guides/websocket/index.json", "content": "{\n  \"name\": \"WebSocket\",\n  \"description\": \"A collection of guides relating to building WebSocket servers with Bun\"\n}\n"}
{"filename": "docs/guides/websocket/pubsub.md", "content": "---\nname: Build a publish-subscribe WebSocket server\n---\n\nBun's server-side `WebSocket` API provides a native pub-sub API. Sockets can be subscribed to a set of named channels using `socket.subscribe(<name>)`; messages can be published to a channel using `socket.publish(<name>, <message>)`.\n\nThis code snippet implements a simple single-channel chat server.\n\n```ts\nconst server = Bun.serve<{ username: string }>({\n  fetch(req, server) {\n    const cookies = req.headers.get(\"cookie\");\n    const username = getUsernameFromCookies(cookies);\n    const success = server.upgrade(req, { data: { username } });\n    if (success) return undefined;\n\n    return new Response(\"Hello world\");\n  },\n  websocket: {\n    open(ws) {\n      const msg = `${ws.data.username} has entered the chat`;\n      ws.subscribe(\"the-group-chat\");\n      ws.publish(\"the-group-chat\", msg);\n    },\n    message(ws, message) {\n      // the server re-broadcasts incoming messages to everyone\n      ws.publish(\"the-group-chat\", `${ws.data.username}: ${message}`);\n    },\n    close(ws) {\n      const msg = `${ws.data.username} has left the chat`;\n      ws.publish(\"the-group-chat\", msg);\n      ws.unsubscribe(\"the-group-chat\");\n    },\n  },\n});\n\nconsole.log(`Listening on ${server.hostname}:${server.port}`);\n```\n"}
{"filename": "docs/guides/websocket/simple.md", "content": "---\nname: Build a simple WebSocket server\n---\n\nStart a simple WebSocket server using [`Bun.serve`](/docs/api/http).\n\nInside `fetch`, we attempt to upgrade incoming `ws:` or `wss:` requests to WebSocket connections.\n\n```ts\nconst server = Bun.serve<{ authToken: string }>({\n  fetch(req, server) {\n    const success = server.upgrade(req);\n    if (success) {\n      // Bun automatically returns a 101 Switching Protocols\n      // if the upgrade succeeds\n      return undefined;\n    }\n\n    // handle HTTP request normally\n    return new Response(\"Hello world!\");\n  },\n  websocket: {\n    // this is called when a message is received\n    async message(ws, message) {\n      console.log(`Received ${message}`);\n      // send back a message\n      ws.send(`You said: ${message}`);\n    },\n  },\n});\n\nconsole.log(`Listening on localhost:\\${server.port}`);\n```\n"}
{"filename": "docs/guides/websocket/upgrade.md", "content": "---\nname: Upgrade an HTTP request to a WebSocket connection\n---\n\nInside `fetch`, use the `server.upgrade()` function to upgrade an incoming `Request` to a WebSocket connection. Bun automatically returns a 101 Switching Protocols response if the upgrade succeeds.\n\nRefer to the [WebSocket docs](/docs/api/websockets) for more information on building WebSocket servers.\n\n```ts\nconst server = Bun.serve<{ authToken: string }>({\n  fetch(req, server) {\n    const success = server.upgrade(req);\n    if (success) {\n      // Bun automatically returns a 101 Switching Protocols\n      // if the upgrade succeeds\n      return undefined;\n    }\n\n    // handle HTTP request normally\n    return new Response(\"Hello world!\");\n  },\n  websocket: {\n    // define websocket handlers\n  },\n});\n\nconsole.log(`Listening on localhost:\\${server.port}`);\n```\n"}
{"filename": "docs/guides/write-file/basic.md", "content": "---\nname: Write a string to a file\n---\n\nThis code snippet writes a string to disk at a particular _absolute path_.\n\nIt uses the fast [`Bun.write()`](/docs/api/file-io#writing-files-bun-write) API to efficiently write data to disk. The first argument is a _destination_; the second is the _data_ to write.\n\n```ts\nconst path = \"/path/to/file.txt\";\nawait Bun.write(path, \"Lorem ipsum\");\n```\n\n---\n\nAny relative paths will be resolved relative to the project root (the nearest directory containing a `package.json` file).\n\n```ts\nconst path = \"./file.txt\";\nawait Bun.write(path, \"Lorem ipsum\");\n```\n\n---\n\nYou can pass a `BunFile` as the destination. `Bun.write()` will write the data to its associated path.\n\n```ts\nconst path = Bun.file(\"./file.txt\");\nawait Bun.write(path, \"Lorem ipsum\");\n```\n\n---\n\n`Bun.write()` returns the number of bytes written to disk.\n\n```ts\nconst path = \"./file.txt\";\nconst bytes = await Bun.write(path, \"Lorem ipsum\");\n// => 11\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/blob.md", "content": "---\nname: Write a Blob to a file\n---\n\nThis code snippet writes a `Blob` to disk at a particular path.\n\nIt uses the fast [`Bun.write()`](/docs/api/file-io#writing-files-bun-write) API to efficiently write data to disk. The first argument is a _destination_, like an absolute path or `BunFile` instance. The second argument is the _data_ to write.\n\n```ts\nconst path = \"/path/to/file.txt\";\nawait Bun.write(path, \"Lorem ipsum\");\n```\n\n---\n\nThe `BunFile` class extends `Blob`, so you can pass a `BunFile` directly into `Bun.write()` as well.\n\n```ts\nconst path = \"./out.txt\";\nconst data = Bun.file(\"./in.txt\");\n\n// write the contents of ./in.txt to ./out.txt\nawait Bun.write(path, data);\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/cat.md", "content": "---\nname: Write a file to stdout\n---\n\nBun exposes `stdout` as a `BunFile` with the `Bun.stdout` property. This can be used as a destination for [`Bun.write()`](/docs/api/file-io#writing-files-bun-write).\n\nThis code writes a file to `stdout` similar to the `cat` command in Unix.\n\n```ts#cat.ts\nconst path = \"/path/to/file.txt\";\nconst file = Bun.file(path);\nawait Bun.write(Bun.stdout, file);\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/file-cp.md", "content": "---\nname: Copy a file to another location\n---\n\nThis code snippet copies a file to another location on disk.\n\nIt uses the fast [`Bun.write()`](/docs/api/file-io#writing-files-bun-write) API to efficiently write data to disk. The first argument is a _destination_, like an absolute path or `BunFile` instance. The second argument is the _data_ to write.\n\n```ts\nconst file = Bun.file(\"/path/to/original.txt\");\nawait Bun.write(\"/path/to/copy.txt\", file);\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/filesink.md", "content": "---\nname: Write a file incrementally\n---\n\nBun provides an API for incrementally writing to a file. This is useful for writing large files, or for writing to a file over a long period of time.\n\nCall `.writer()` on a `BunFile` to retrieve a `FileSink` instance. This instance can be used to efficiently buffer data and periodically \"flush\" it to disk. You can write & flush many times.\n\n```ts\nconst file = Bun.file(\"/path/to/file.txt\");\nconst writer = file.writer();\n\nwriter.write(\"lorem\");\nwriter.write(\"ipsum\");\nwriter.write(\"dolor\");\n\nwriter.flush();\n\n// continue writing & flushing\n```\n\n---\n\nThe `.write()` method can accept strings or binary data.\n\n```ts\nw.write(\"hello\");\nw.write(Buffer.from(\"there\"));\nw.write(new Uint8Array([0, 255, 128]));\nwriter.flush();\n```\n\n---\n\nThe `FileSink` will also auto-flush when its internal buffer is full. You can configure the buffer size with the `highWaterMark` option.\n\n```ts\nconst file = Bun.file(\"/path/to/file.txt\");\nconst writer = file.writer({ highWaterMark: 1024 * 1024 }); // 1MB\n```\n\n---\n\nWhen you're done writing to the file, call `.end()` to auto-flush the buffer and close the file.\n\n```ts\nwriter.end();\n```\n\n---\n\nFull documentation: [FileSink](/docs/api/file-io#incremental-writing-with-filesink).\n"}
{"filename": "docs/guides/write-file/index.json", "content": "{\n  \"name\": \"Writing files\",\n  \"description\": \"A collection of guides for writing files with Bun\"\n}\n"}
{"filename": "docs/guides/write-file/response.md", "content": "---\nname: Write a Response to a file\n---\n\nThis code snippet writes a `Response` to disk at a particular path. Bun will consume the `Response` body according to its `Content-Type` header.\n\nIt uses the fast [`Bun.write()`](/docs/api/file-io#writing-files-bun-write) API to efficiently write data to disk. The first argument is a _destination_, like an absolute path or `BunFile` instance. The second argument is the _data_ to write.\n\n```ts\nconst result = await fetch(\"https://bun.sh\");\nconst path = \"./file.txt\";\nawait Bun.write(path, result);\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/stdout.md", "content": "---\nname: Write to stdout\n---\n\nThe `console.log` function writes to `stdout`. It will automatically append a line break at the end of the printed data.\n\n```ts\nconsole.log(\"Lorem ipsum\");\n```\n\n---\n\nFor more advanced use cases, Bun exposes `stdout` as a `BunFile` via the `Bun.stdout` property. This can be used as a destination for [`Bun.write()`](/docs/api/file-io#writing-files-bun-write).\n\n```ts\nawait Bun.write(Bun.stdout, \"Lorem ipsum\");\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/stream.md", "content": "---\nname: Write a ReadableStream to a file\n---\n\nTo write a `ReadableStream` to disk, first create a `Response` instance from the stream. This `Response` can then be written to disk using [`Bun.write()`](/docs/api/file-io#writing-files-bun-write).\n\n```ts\nconst stream: ReadableStream = ...;\nconst path = \"./file.txt\";\nconst response = new Response(stream);\n\nawait Bun.write(path, response);\n```\n\n---\n\nSee [Docs > API > File I/O](/docs/api/file-io#writing-files-bun-write) for complete documentation of `Bun.write()`.\n"}
{"filename": "docs/guides/write-file/unlink.md", "content": "---\nname: Delete a file\n---\n\nTo synchronously delete a file with Bun, use the `unlinkSync` function from the [`node:fs`](https://nodejs.org/api/fs.html#fs_fs_unlink_path_callback) module. (Currently, there is no `Bun` API for deleting files.)\n\n```ts\nimport { unlinkSync } from \"node:fs\";\n\nconst path = \"/path/to/file.txt\";\nunlinkSync(path);\n```\n\n---\n\nTo remove a file asynchronously, use the `unlink` function from the [`node:fs/promises`](https://nodejs.org/api/fs.html#fs_fspromises_unlink_path) module.\n\n```ts\nimport { unlink } from \"node:fs/promises\";\n\nconst path = \"/path/to/file.txt\";\nawait unlink(path);\n```\n"}
{"filename": "docs/index.md", "content": "Bun is an all-in-one toolkit for JavaScript and TypeScript apps. It ships as a single executable called `bun\u200b`.\n\nAt its core is the _Bun runtime_, a fast JavaScript runtime designed as a drop-in replacement for Node.js. It's written in Zig and powered by JavaScriptCore under the hood, dramatically reducing startup times and memory usage.\n\n```bash\n$ bun run index.tsx  # TS and JSX supported out of the box\n```\n\n\u200b\u200bThe `bun\u200b` command-line tool also implements a test runner, script runner, and Node.js-compatible package manager, all significantly faster than existing tools and usable in existing Node.js projects with little to no changes necessary.\n\n```bash\n$ bun run start                 # run the `start` script\n$ bun install <pkg>\u200b             # install a package\n$ bun build ./index.tsx         # bundle a project for browsers\n$ bun test                      # run tests\n$ bunx cowsay \"Hello, world!\"   # execute a package\n```\n\n{% callout type=\"note\" %}\n**\u200b\u200bBun is still under development.** Use it to speed up your development workflows or run simpler production code in resource-constrained environments like serverless functions. We're working on more complete Node.js compatibility and integration with existing frameworks. Join the [Discord](https://bun.sh/discord) and watch the [GitHub repository](https://github.com/oven-sh/bun) to keep tabs on future releases.\n{% /callout %}\n\nGet started with one of the quick links below, or read on to learn more about Bun.\n\n{% block className=\"gap-2 grid grid-flow-row grid-cols-1 md:grid-cols-2\" %}\n{% arrowbutton href=\"/docs/installation\" text=\"Install Bun\" /%}\n{% arrowbutton href=\"/docs/quickstart\" text=\"Do the quickstart\" /%}\n{% arrowbutton href=\"/docs/cli/install\" text=\"Install a package\" /%}\n{% arrowbutton href=\"/docs/templates\" text=\"Use a project template\" /%}\n{% arrowbutton href=\"/docs/bundler\" text=\"Bundle code for production\" /%}\n{% arrowbutton href=\"/docs/api/http\" text=\"Build an HTTP server\" /%}\n{% arrowbutton href=\"/docs/api/websockets\" text=\"Build a Websocket server\" /%}\n{% arrowbutton href=\"/docs/api/file-io\" text=\"Read and write files\" /%}\n{% arrowbutton href=\"/docs/api/sqlite\" text=\"Run SQLite queries\" /%}\n{% arrowbutton href=\"/docs/cli/test\" text=\"Write and run tests\" /%}\n{% /block %}\n\n## What is a runtime?\n\nJavaScript (or, more formally, ECMAScript) is just a _specification_ for a programming language. Anyone can write a JavaScript _engine_ that ingests a valid JavaScript program and executes it. The two most popular engines in use today are V8 (developed by Google) and JavaScriptCore (developed by Apple). Both are open source.\n\n### Browsers\n\nBut most JavaScript programs don't run in a vacuum. They need a way to access the outside world to perform useful tasks. This is where _runtimes_ come in. They implement additional APIs that are then made available to the JavaScript programs they execute. Notably, browsers ship with JavaScript runtimes that implement a set of Web-specific APIs that are exposed via the global `window` object. Any JavaScript code executed by the browser can use these APIs to implement interactive or dynamic behavior in the context of the current webpage.\n\n<!-- JavaScript runtime that exposes  JavaScript engines are designed to run \"vanilla\" JavaScript programs, but it's often JavaScript _runtimes_ use an engine internally to execute the code and implement additional APIs that are then made available to executed programs.\nJavaScript was [initially designed](https://en.wikipedia.org/wiki/JavaScript) as a language to run in web browsers to implement interactivity and dynamic behavior in web pages. Browsers are the first JavaScript runtimes. JavaScript programs that are executed in browsers have access to a set of Web-specific global APIs on the `window` object. -->\n\n### Node.js\n\nSimilarly, Node.js is a JavaScript runtime that can be used in non-browser environments, like servers. JavaScript programs executed by Node.js have access to a set of Node.js-specific [globals](https://nodejs.org/api/globals.html) like `Buffer`, `process`, and `__dirname` in addition to built-in modules for performing OS-level tasks like reading/writing files (`node:fs`) and networking (`node:net`, `node:http`). Node.js also implements a CommonJS-based module system and resolution algorithm that pre-dates JavaScript's native module system.\n\n<!-- Bun.js prefers Web API compatibility instead of designing new APIs when possible. Bun.js also implements some Node.js APIs. -->\n\nBun is designed as a faster, leaner, more modern replacement for Node.js.\n\n<!-- ## Why a new runtime?\n\nBun is designed as a faster, leaner, more modern replacement for Node.js. Node.js is burdened by ingrained performance issues, backwards compatibility concerns, and slow development velocity\u2014inevitable issues for a project of its age and magnitude. -->\n\n## Design goals\n\nBun is designed from the ground-up with today's JavaScript ecosystem in mind.\n\n- **Speed**. Bun processes start [4x faster than Node.js](https://twitter.com/jarredsumner/status/1499225725492076544) currently (try it yourself!)\n- **TypeScript & JSX support**. You can directly execute `.jsx`, `.ts`, and `.tsx` files; Bun's transpiler converts these to vanilla JavaScript before execution.\n- **ESM & CommonJS compatibility**. The world is moving towards ES modules (ESM), but millions of packages on npm still require CommonJS. Bun recommends ES modules, but supports CommonJS.\n- **Web-standard APIs**. Bun implements standard Web APIs like `fetch`, `WebSocket`, and `ReadableStream`. Bun is powered by the JavaScriptCore engine, which is developed by Apple for Safari, so some APIs like [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) and [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) directly use [Safari's implementation](https://github.com/oven-sh/bun/blob/HEAD/src/bun.js/bindings/webcore/JSFetchHeaders.cpp).\n- **Node.js compatibility**. In addition to supporting Node-style module resolution, Bun aims for full compatibility with built-in Node.js globals (`process`, `Buffer`) and modules (`path`, `fs`, `http`, etc.) _This is an ongoing effort that is not complete._ Refer to the compatibility page for the current status.\n\nBun is more than a runtime. The long-term goal is to be a cohesive, infrastructural toolkit for building apps with JavaScript/TypeScript, including a package manager, transpiler, bundler, script runner, test runner, and more.\n\n<!-- - tsconfig.json `\"paths\"` is natively supported, along with `\"exports\"` in package.json\n- `fs`, `path`, and `process` from Node.js are partially implemented\n- Web APIs like [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch), [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response), [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) and more are built-in\n- [`HTMLRewriter`](https://developers.cloudflare.com/workers/runtime-apis/html-rewriter/) makes it easy to transform HTML in Bun.js\n- `.env` files automatically load into `process.env` and `Bun.env`\n- top level await -->\n"}
{"filename": "docs/install/cache.md", "content": "All packages downloaded from the registry are stored in a global cache at `~/.bun/install/cache`. They are stored in subdirectories named like `${name}@${version}`, so multiple versions of a package can be cached.\n\n{% details summary=\"Configuring cache behavior\" %}\n\n```toml\n[install.cache]\n# the directory to use for the cache\ndir = \"~/.bun/install/cache\"\n\n# when true, don't load from the global cache.\n# Bun may still write to node_modules/.cache\ndisable = false\n\n# when true, always resolve the latest versions from the registry\ndisableManifest = false\n```\n\n{% /details %}\n\n## Minimizing re-downloads\n\nBun strives to avoid re-downloading packages multiple times. When installing a package, if the cache already contains a version in the range specified by `package.json`, Bun will use the cached package instead of downloading it again.\n\n{% details summary=\"Installation details\" %}\nIf the semver version has pre-release suffix (`1.0.0-beta.0`) or a build suffix (`1.0.0+20220101`), it is replaced with a hash of that value instead, to reduce the chances of errors associated with long file paths.\n\nWhen the `node_modules` folder exists, before installing, Bun checks that `node_modules` contains all expected packages with appropriate versions. If so `bun install` completes. Bun uses a custom JSON parser which stops parsing as soon as it finds `\"name\"` and `\"version\"`.\n\nIf a package is missing or has a version incompatible with the `package.json`, Bun checks for a compatible module in the cache. If found, it is installed into `node_modules`. Otherwise, the package will be downloaded from the registry then installed.\n{% /details %}\n\n## Fast copying\n\nOnce a package is downloaded into the cache, Bun still needs to copy those files into `node_modules`. Bun uses the fastest syscalls available to perform this task. On Linux, it uses hardlinks; on macOS, it uses `clonefile`.\n\n## Saving disk space\n\nSince Bun uses hardlinks to \"copy\" a module into a project's `node_modules` directory on Linux, the contents of the package only exist in a single location on disk, greatly reducing the amount of disk space dedicated to `node_modules`.\n\nThis benefit does not extend to macOS, which uses `clonefile` for performance reasons.\n\n{% details summary=\"Installation strategies\" %}\nThis behavior is configurable with the `--backend` flag, which is respected by all of Bun's package management commands.\n\n- **`hardlink`**: Default on Linux.\n- **`clonefile`** Default on macOS.\n- **`clonefile_each_dir`**: Similar to `clonefile`, except it clones each file individually per directory. It is only available on macOS and tends to perform slower than `clonefile`.\n- **`copyfile`**: The fallback used when any of the above fail. It is the slowest option. On macOS, it uses `fcopyfile()`; on Linux it uses `copy_file_range()`.\n  **`symlink`**: Currently used only `file:` (and eventually `link:`) dependencies. To prevent infinite loops, it skips symlinking the `node_modules` folder.\n\nIf you install with `--backend=symlink`, Node.js won't resolve node_modules of dependencies unless each dependency has its own `node_modules` folder or you pass `--preserve-symlinks` to `node`. See [Node.js documentation on `--preserve-symlinks`](https://nodejs.org/api/cli.html#--preserve-symlinks).\n\n```bash\n$ bun install --backend symlink\n$ node --preserve-symlinks ./foo.js\n```\n\nBun's runtime does not currently expose an equivalent of `--preserve-symlinks`.\n{% /details %}\n"}
{"filename": "docs/install/index.md", "content": "The `bun` CLI contains an `npm`-compatible package manager designed to be a faster replacement for existing package management tools like `npm`, `yarn`, and `pnpm`. It's designed for Node.js compatibility; use it in any Bun or Node.js project.\n\n{% callout %}\n\n**\u26a1\ufe0f 80x faster** \u2014 Switch from `npm install` to `bun install` in any Node.js project to make your installations up to 80x faster.\n\n{% image src=\"https://user-images.githubusercontent.com/709451/147004342-571b6123-17a9-49a2-8bfd-dcfc5204047e.png\" height=\"200\" /%}\n\n{% /callout %}\n\n{% details summary=\"For Linux users\" %}\nThe minimum Linux Kernel version is 5.1. If you're on Linux kernel 5.1 - 5.5, `bun install` should still work, but HTTP requests will be slow due to a lack of support for io_uring's `connect()` operation.\n\nIf you're using Ubuntu 20.04, here's how to install a [newer kernel](https://wiki.ubuntu.com/Kernel/LTSEnablementStack):\n\n```bash\n# If this returns a version >= 5.6, you don't need to do anything\nuname -r\n\n# Install the official Ubuntu hardware enablement kernel\nsudo apt install --install-recommends linux-generic-hwe-20.04\n```\n\n{% /details %}\n\n## Manage dependencies\n\n### `bun install`\n\nTo install all dependencies of a project:\n\n```bash\n$ bun install\n```\n\nOn Linux, `bun install` tends to install packages 20-100x faster than `npm install`. On macOS, it's more like 4-80x.\n\n![package install benchmark](https://user-images.githubusercontent.com/709451/147004342-571b6123-17a9-49a2-8bfd-dcfc5204047e.png)\n\nRunning `bun install` will:\n\n- **Install** all `dependencies`, `devDependencies`, and `optionalDependencies`. Bun does not install `peerDependencies` by default.\n- **Run** your project's `{pre|post}install` scripts at the appropriate time. For security reasons Bun _does not execute_ lifecycle scripts of installed dependencies.\n- **Write** a `bun.lockb` lockfile to the project root.\n\nTo install in production mode (i.e. without `devDependencies`):\n\n```bash\n$ bun install --production\n```\n\nTo install dependencies without allowing changes to lockfile (useful on CI):\n\n```bash\n$ bun install --frozen-lockfile\n```\n\nTo perform a dry run (i.e. don't actually install anything):\n\n```bash\n$ bun install --dry-run\n```\n\nTo modify logging verbosity:\n\n```bash\n$ bun install --verbose # debug logging\n$ bun install --silent  # no logging\n```\n\n{% details summary=\"Configuring behavior\" %}\nThe default behavior of `bun install` can be configured in `bun.toml`:\n\n```toml\n[install]\n\n# whether to install optionalDependencies\noptional = true\n\n# whether to install devDependencies\ndev = true\n\n# whether to install peerDependencies\npeer = false\n\n# equivalent to `--production` flag\nproduction = false\n\n# equivalent to `--frozen-lockfile` flag\nfrozenLockfile = false\n\n# equivalent to `--dry-run` flag\ndryRun = false\n```\n\n{% /details %}\n\n### `bun add`\n\nTo add a particular package:\n\n```bash\n$ bun add preact\n```\n\nTo specify a version, version range, or tag:\n\n```bash\n$ bun add zod@3.20.0\n$ bun add zod@^3.0.0\n$ bun add zod@latest\n```\n\nTo add a package as a dev dependency (`\"devDependencies\"`):\n\n```bash\n$ bun add --dev @types/react\n$ bun add -d @types/react\n```\n\nTo add a package as an optional dependency (`\"optionalDependencies\"`):\n\n```bash\n$ bun add --optional lodash\n```\n\nTo install a package globally:\n\n```bash\n$ bun add --global cowsay # or `bun add -g cowsay`\n$ cowsay \"Bun!\"\n ______\n< Bun! >\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n{% details summary=\"Configuring global installation behavior\" %}\n\n```toml\n[install]\n# where `bun install --global` installs packages\nglobalDir = \"~/.bun/install/global\"\n\n# where globally-installed package bins are linked\nglobalBinDir = \"~/.bun/bin\"\n```\n\n{% /details %}\nTo view a complete list of options for a given command:\n\n```bash\n$ bun add --help\n```\n\n### `bun remove`\n\nTo remove a dependency:\n\n```bash\n$ bun remove preact\n```\n\n## Git dependencies\n\nTo add a dependency from a git repository:\n\n```bash\n$ bun install git@github.com:moment/moment.git\n```\n\nBun supports a variety of protocols, including [`github`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#github-urls), [`git`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#git-urls-as-dependencies), `git+ssh`, `git+https`, and many more.\n\n```json\n{\n  \"dependencies\": {\n    \"dayjs\": \"git+https://github.com/iamkun/dayjs.git\",\n    \"lodash\": \"git+ssh://github.com/lodash/lodash.git#4.17.21\",\n    \"moment\": \"git@github.com:moment/moment.git\",\n    \"zod\": \"github:colinhacks/zod\"\n  }\n}\n```\n\n## Tarball dependencies\n\nA package name can correspond to a publically hosted `.tgz` file. During `bun install`, Bun will download and install the package from the specified tarball URL, rather than from the package registry.\n\n```json#package.json\n{\n  \"dependencies\": {\n    \"zod\": \"https://registry.npmjs.org/zod/-/zod-3.21.4.tgz\"\n  }\n}\n```\n"}
{"filename": "docs/install/lockfile.md", "content": "Running `bun install` will create a binary lockfile called `bun.lockb`.\n\n#### Why is it binary?\n\nIn a word: Performance. Bun\u2019s lockfile saves & loads incredibly quickly, and saves a lot more data than what is typically inside lockfiles.\n\n#### How do I inspect Bun's lockfile?\n\nRun `bun install -y` to generate a Yarn-compatible `yarn.lock` (v1) that can be inspected more easily.\n\n#### How do I `git diff` Bun's lockfile?\n\nTo add to the global gitattributes file:\n\n- First try `$XDG_CONFIG_HOME/git/attributes`\n- If `$XDG_CONFIG_HOME` is not set, try `~/.config/git/attributes`\n\nFor example, on macOS, add the following to `~/.config/git/attributes`:\n\n```\n*.lockb diff=lockb\n```\n\nThen add the following to `~/.gitconfig`:\n\n```\n[diff \"lockb\"]\n    textconv = bun\n    binary = true\n```\n\nTo only add to the local gitattributes file:\n\n```sh\n$ git config diff.lockb.textconv bun\n$ git config diff.lockb.binary true\n```\n\n**Why this works:**\n\n- `textconv` tells git to run `bun` on the file before diffing\n- `binary` tells git to treat the file as binary (so it doesn't try to diff it line-by-line)\n\nRunning `bun` on a lockfile will print a human-readable diff. So we just need to tell `git` to run `bun` on the lockfile before diffing it.\n\n#### Platform-specific dependencies?\n\nBun stores normalized `cpu` and `os` values from npm in the lockfile, along with the resolved packages. It skips downloading, extracting, and installing packages disabled for the current target at runtime. This means the lockfile won\u2019t change between platforms/architectures even if the packages ultimately installed do change.\n\n#### What does Bun's lockfile store?\n\nPackages, metadata for those packages, the hoisted install order, dependencies for each package, what packages those dependencies resolved to, an integrity hash (if available), what each package was resolved to, and which version (or equivalent).\n\n#### Why is Bun's lockfile fast?\n\nIt uses linear arrays for all data. [Packages](https://github.com/oven-sh/bun/blob/be03fc273a487ac402f19ad897778d74b6d72963/src/install/install.zig#L1825) are referenced by an auto-incrementing integer ID or a hash of the package name. Strings longer than 8 characters are de-duplicated. Prior to saving on disk, the lockfile is garbage-collected & made deterministic by walking the package tree and cloning the packages in dependency order.\n\n#### Can I opt out?\n\nTo install without creating a lockfile:\n\n```bash\n$ bun install --no-save\n```\n\nTo install a Yarn lockfile _in addition_ to `bun.lockb`.\n\n{% codetabs %}\n\n```bash#CLI\u00a0flag\n$ bun install --yarn\n```\n\n```toml#bunfig.toml\n[install.lockfile]\n# whether to save a non-Bun lockfile alongside bun.lockb\n# only \"yarn\" is supported\nprint = \"yarn\"\n```\n\n{% /codetabs %}\n\n{% details summary=\"Configuring lockfile\" %}\n\n```toml\n[install.lockfile]\n\n# path to read bun.lockb from\npath = \"bun.lockb\"\n\n# path to save bun.lockb to\nsavePath = \"bun.lockb\"\n\n# whether to save the lockfile to disk\nsave = true\n\n# whether to save a non-Bun lockfile alongside bun.lockb\n# only \"yarn\" is supported\nprint = \"yarn\"\n```\n\n{% /details %}\n"}
{"filename": "docs/install/registries.md", "content": "The default registry is `registry.npmjs.org`. This can be globally configured in `bunfig.toml`:\n\n```toml\n[install]\n# set default registry as a string\nregistry = \"https://registry.npmjs.org\"\n# set a token\nregistry = { url = \"https://registry.npmjs.org\", token = \"123456\" }\n# set a username/password\nregistry = \"https://username:password@registry.npmjs.org\"\n```\n\nTo configure a private registry scoped to a particular organization:\n\n```toml\n[install.scopes]\n# registry as string\n\"@myorg1\" = \"https://username:password@registry.myorg.com/\"\n\n# registry with username/password\n# you can reference environment variables\n\"@myorg2\" = { username = \"myusername\", password = \"$NPM_PASS\", url = \"https://registry.myorg.com/\" }\n\n# registry with token\n\"@myorg3\" = { token = \"$npm_token\", url = \"https://registry.myorg.com/\" }\n```\n\n### `.npmrc`\n\nBun does not currently read `.npmrc` files. For private registries, migrate your registry configuration to `bunfig.toml` as documented above.\n"}
{"filename": "docs/install/utilities.md", "content": "The `bun pm` command group provides a set of utilities for working with Bun's package manager.\n\nTo print the path to the `bin` directory for the local project:\n\n```bash\n$ bun pm bin\n/path/to/current/project/node_modules/.bin\n```\n\nTo print the path to the global `bin` directory:\n\n```bash\n$ bun pm bin -g\n<$HOME>/.bun/bin\n```\n\nTo print a list of installed dependencies in the current project and their resolved versions, excluding their dependencies.\n\n```bash\n$ bun pm ls\n/path/to/project node_modules (135)\n\u251c\u2500\u2500 eslint@8.38.0\n\u251c\u2500\u2500 react@18.2.0\n\u251c\u2500\u2500 react-dom@18.2.0\n\u251c\u2500\u2500 typescript@5.0.4\n\u2514\u2500\u2500 zod@3.21.4\n```\n\nTo print all installed dependencies, including nth-order dependencies.\n\n```bash\n$ bun pm ls --all\n/path/to/project node_modules (135)\n\u251c\u2500\u2500 @eslint-community/eslint-utils@4.4.0\n\u251c\u2500\u2500 @eslint-community/regexpp@4.5.0\n\u251c\u2500\u2500 @eslint/eslintrc@2.0.2\n\u251c\u2500\u2500 @eslint/js@8.38.0\n\u251c\u2500\u2500 @nodelib/fs.scandir@2.1.5\n\u251c\u2500\u2500 @nodelib/fs.stat@2.0.5\n\u251c\u2500\u2500 @nodelib/fs.walk@1.2.8\n\u251c\u2500\u2500 acorn@8.8.2\n\u251c\u2500\u2500 acorn-jsx@5.3.2\n\u251c\u2500\u2500 ajv@6.12.6\n\u251c\u2500\u2500 ansi-regex@5.0.1\n\u251c\u2500\u2500 ...\n```\n\nTo print the path to Bun's global module cache:\n\n```bash\n$ bun pm cache\n```\n\nTo clear Bun's global module cache:\n\n```bash\n$ bun pm cache rm\n```\n"}
{"filename": "docs/install/workspaces.md", "content": "Bun supports [`workspaces`](https://docs.npmjs.com/cli/v9/using-npm/workspaces?v=true#description) in `package.json`. Workspaces make it easy to develop complex software as a _monorepo_ consisting of several independent packages.\n\nTo try it, specify a list of sub-packages in the `workspaces` field of your `package.json`; it's conventional to place these sub-packages in a directory called `packages`.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"workspaces\": [\"packages/*\"]\n}\n```\n\n{% callout %}\n**Glob support** \u2014 Bun v0.5.8 added support for simple `<directory>/*` globs in `\"workspaces\"`. Full glob syntax (e.g. `**` and `?`) is not yet supported (soon!).\n{% /callout %}\n\nThis has a couple major benefits.\n\n- **Code can be split into logical parts.** If one package relies on another, you can simply add it as a dependency with `bun add`. If package `b` depends on `a`, `bun install` will symlink your local `packages/a` directory into the `node_modules` folder of `b`, instead of trying to download it from the npm registry.\n- **Dependencies can be de-duplicated.** If `a` and `b` share a common dependency, it will be _hoisted_ to the root `node_modules` directory. This reduces redundant disk usage and minimizes \"dependency hell\" issues associated with having multiple versions of a package installed simultaneously.\n\n{% callout %}\n\u26a1\ufe0f **Speed** \u2014 Installs are fast, even for big monorepos. Bun installs the [Remix](https://github.com/remix-run/remix) monorepo in about `500ms` on Linux.\n\n- 28x faster than `npm install`\n- 12x faster than `yarn install` (v1)\n- 8x faster than `pnpm install`\n\n{% image src=\"https://user-images.githubusercontent.com/709451/212829600-77df9544-7c9f-4d8d-a984-b2cd0fd2aa52.png\" /%}\n{% /callout %}\n"}
{"filename": "docs/installation.md", "content": "Bun ships as a single executable that can be installed a few different ways.\n\n{% callout %}\n**Windows users** \u2014 Bun does not currently provide a native Windows build. We're working on this; progress can be tracked at [this issue](https://github.com/oven-sh/bun/issues/43). In the meantime, use one of the installation methods below for Windows Subsystem for Linux.\n\n**Linux users** \u2014 The `unzip` package is required to install Bun. Kernel version 5.6 or higher is strongly recommended, but the minimum is 5.1.\n{% /callout %}\n\n{% codetabs %}\n\n```bash#Native\n$ curl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL\n```\n\n```bash#NPM\n$ npm install -g bun # the last `npm` command you'll ever need\n```\n\n```bash#Homebrew\n$ brew tap oven-sh/bun # for macOS and Linux\n$ brew install bun\n```\n\n```bash#Docker\n$ docker pull oven/bun\n$ docker run --rm --init --ulimit memlock=-1:-1 oven/bun\n```\n\n```bash#Proto\n$ proto install bun\n```\n\n{% /codetabs %}\n\n## Upgrading\n\nOnce installed, the binary can upgrade itself.\n\n```sh\n$ bun upgrade\n```\n\n{% callout %}\n**Homebrew users** \u2014 To avoid conflicts with Homebrew, use `brew upgrade bun` instead.\n\n**proto users** - Use `proto install bun --pin` instead.\n{% /callout %}\n\nBun automatically releases an (untested) canary build on every commit to `main`. To upgrade to the latest canary build:\n\n```sh\n$ bun upgrade --canary\n```\n\n[View canary build](https://github.com/oven-sh/bun/releases/tag/canary)\n\n<!--\n## Native\n\nWorks on macOS x64 & Silicon, Linux x64, Windows Subsystem for Linux.\n\n```sh\n$ curl -fsSL https://bun.sh/install | bash\n```\n\nOnce installed, the binary can upgrade itself.\n\n```sh\n$ bun upgrade\n```\n\nBun automatically releases an (untested) canary build on every commit to `main`. To upgrade to the latest canary build:\n\n```sh\n$ bun upgrade --canary\n```\n\n## Homebrew\n\nWorks on macOS and Linux\n\n```sh\n$ brew tap oven-sh/bun\n$ brew install bun\n```\n\nHomebrew recommends using `brew upgrade <package>` to install newer versions.\n\n## Docker\n\nWorks on Linux x64\n\n```sh\n# this is a comment\n$ docker pull oven/bun:edge\nthis is some output\n$ docker run --rm --init --ulimit memlock=-1:-1 oven/bun:edge\n$ docker run --rm --init --ulimit memlock=-1:-1 oven/bun:edge\nthis is some output\n``` -->\n\n## TypeScript\n\nTo install TypeScript definitions for Bun's built-in APIs in your project, install `bun-types`.\n\n```sh\n$ bun add -d bun-types # dev dependency\n```\n\nThen include `\"bun-types\"` in the `compilerOptions.types` in your `tsconfig.json`:\n\n```json-diff\n  {\n    \"compilerOptions\": {\n+     \"types\": [\"bun-types\"]\n    }\n  }\n```\n\nRefer to [Ecosystem > TypeScript](/docs/runtime/typescript) for a complete guide to TypeScript support in Bun.\n\n## Completions\n\nShell auto-completion should be configured automatically when Bun is installed.\n\nIf not, run the following command. It uses `$SHELL` to determine which shell you're using and writes a completion file to the appropriate place on disk. It's automatically re-run on every `bun upgrade`.\n\n```bash\n$ bun completions\n```\n\nTo write the completions to a custom location:\n\n```bash\n$ bun completions > path-to-file      # write to file\n$ bun completions /path/to/directory  # write into directory\n```\n"}
{"filename": "docs/nav.ts", "content": "export type Nav = {\n  items: NavItem[];\n};\n\nexport type NavItem = NavPage | NavDivider;\nexport type NavPage = {\n  type: \"page\";\n  slug: string;\n  title: string;\n  disabled?: boolean;\n  href?: string;\n};\ntype NavDivider = {\n  type: \"divider\";\n  title: string;\n};\n\nfunction page(slug: string, title: string, props: { disabled?: boolean; href?: string; description: string }): NavPage {\n  return { type: \"page\", slug, title, ...props };\n}\nfunction divider(title: string): NavDivider {\n  return { type: \"divider\", title };\n}\n\nexport default {\n  items: [\n    divider(\"Intro\"),\n    page(\"index\", \"What is Bun?\", {\n      description:\n        \"Bun is an all-in-one runtime for JavaScript and TypeScript apps. Run, bundle, and test apps with one fast tool.\",\n    }),\n    page(\"installation\", \"Installation\", {\n      description: \"Install Bun with npm, Homebrew, Docker, or the official install script.\",\n    }),\n    page(\"quickstart\", \"Quickstart\", {\n      description: \"Get started with Bun by building and running a simple HTTP server in 6 lines of TypeScript.\",\n    }),\n    page(\"templates\", \"Templates\", {\n      description: \"Hit the ground running with one of Bun's official templates, or download a template from GitHub.\",\n    }),\n    page(\"guides\", \"Guides\", {\n      description: \"A set of walkthrough guides and code snippets for performing common tasks with Bun\",\n      href: \"/guides\",\n    }),\n\n    // page(\"typescript\", \"TypeScript\"),\n\n    // divider(\"CLI\"),\n    // page(\"cli/run\", \"`bun run`\", {\n    //   description:\n    //     \"Use `bun run` to execute JavaScript/TypeScript files, package.json scripts, and executable packages.\",\n    // }),\n    // page(\"cli/install\", \"`bun install`\", {\n    //   description: \"A 100x faster npm client with workspaces, git dependencies, and private registry support.\",\n    // }),\n    // page(\"cli/test\", \"`bun test`\", {\n    //   description: \"Bun's test runner uses Jest-compatible syntax but runs 100x faster.\",\n    // }),\n    // page(\"cli/create\", \"`bun create`\", {\n    //   description: \"Scaffold a new Bun project from an official template or GitHub repo.\",\n    // }),\n    // page(\"cli/bunx\", \"`bunx`\", {\n    //   description:\n    //     \"Use `bunx` to auto-install and run executable packages from npm, or use locally installed command-line tools.\",\n    // }),\n    // page(\"cli/deploy\", \"`bun deploy`\", {\n    //   disabled: true,\n    //   description: \"Deploy your Bun app to the cloud (eventually)\",\n    // }),\n\n    // page(\"bundler\", \"Bundler\"),\n    // page(\"cli/bun-install\", \"`bun install`\"),\n    // page(\"cli/bun-create\", \"`bun create`\"),\n    // page(\"cli/bun-upgrade\", \"`bun upgrade`\"),\n    // page(\"cli/bun-bun\", \"`bun bun`\"),\n    // page(\"cli/bun-init\", \"`bun init`\"),\n    // page(\"cli/bun-completions\", \"`bun completions`\"),\n    // page(\"bundev\", \"Dev server\"),\n    // page(\"benchmarks\", \"Benchmarks\"),\n\n    // divider(\"Runtime\"),\n    divider(\"Runtime\"),\n    page(\"cli/run\", \"`bun run`\", {\n      description: \"Use `bun run` to execute JavaScript/TypeScript files and package.json scripts.\",\n    }),\n    // page(\"runtime/index\", \"Overview\", {\n    //   description: `Bun is a new JavaScript runtime designed to be a faster, leaner, more modern replacement for Node.js.`,\n    // }),\n    // page(\"runtime/performance\", \"Performance\", {\n    //   description: `Bun is a new JavaScript runtime designed to be a faster, leaner, more modern replacement for Node.js.`,\n    // }),\n    page(\"runtime/loaders\", \"File types\", {\n      description: `Bun's runtime supports JavaScript/TypeScript files, JSX syntax, Wasm, JSON/TOML imports, and more.`,\n    }),\n    page(\"runtime/typescript\", \"TypeScript\", {\n      description: `Bun can directly execute TypeScript files without additional configuration.`,\n    }),\n    page(\"runtime/jsx\", \"JSX\", {\n      description: `Bun can directly execute TypeScript files without additional configuration.`,\n    }),\n    // page(\"runtime/apis\", \"APIs\", {\n    //   description: `Bun is a new JavaScript runtime designed to be a faster, leaner, more modern replacement for Node.js.`,\n    // }),\n    page(\"runtime/bun-apis\", \"Bun APIs\", {\n      description: `Bun provides a set of highly optimized native APIs for performing common tasks.`,\n    }),\n    page(\"runtime/web-apis\", \"Web APIs\", {\n      description: `Bun implements an array of Web-standard APIs like fetch, URL, and WebSocket.`,\n    }),\n    page(\"runtime/nodejs-apis\", \"Node.js compatibility\", {\n      description: `Bun aims for full Node.js compatibility. This page tracks the current compatibility status.`,\n    }),\n    page(\"runtime/plugins\", \"Plugins\", {\n      description: `Implement custom loaders and module resolution logic with Bun's plugin system.`,\n    }),\n\n    // page(\"runtime/nodejs\", \"Node.js compatibility\", {\n    //   description: `Track the status of Bun's API compatibility with Node.js.`,\n    // }),\n    // page(\"runtime/web-apis\", \"Web APIs\"),\n    // page(\"runtime/loaders\", \"Loaders\"),\n\n    page(\"runtime/hot\", \"Watch mode\", {\n      description: `Reload your application & tests automatically.`,\n    }),\n    page(\"runtime/modules\", \"Module resolution\", {\n      description: `Bun uses ESM and implements an extended version of the Node.js module resolution algorithm.`,\n    }),\n    page(\"runtime/autoimport\", \"Auto-install\", {\n      description: `Never use node_modules again. Bun can optionally auto-install your dependencies on the fly.`,\n    }),\n    page(\"runtime/configuration\", \"Configuration\", {\n      description: `Bun's runtime is configurable with environment variables and the bunfig.toml config file.`,\n    }),\n    page(\"runtime/debugger\", \"Debugger\", {\n      description: `Debug your code with Bun's web-based debugger or VS Code extension`,\n    }),\n    page(\"runtime/framework\", \"Framework API\", {\n      disabled: true,\n      description:\n        \"Coming soon. Use the Framework API to build a fast, cloud-ready framework on top of Bun's bundler and runtime.\",\n    }),\n\n    divider(\"Package manager\"),\n    page(\"cli/install\", \"`bun install`\", {\n      description:\n        \"Install all dependencies with `bun install`, or manage dependencies with `bun add` and `bun remove`.\",\n    }),\n    page(\"install/cache\", \"Global cache\", {\n      description:\n        \"Bun's package manager installs all packages into a shared global cache to avoid redundant re-downloads.\",\n    }),\n    page(\"install/workspaces\", \"Workspaces\", {\n      description: \"Bun's package manager supports workspaces and mono-repo development workflows.\",\n    }),\n    page(\"install/lockfile\", \"Lockfile\", {\n      description:\n        \"Bun's binary lockfile `bun.lockb` tracks your resolved dependency ytrr, making future installs fast and repeatable.\",\n    }),\n    page(\"install/registries\", \"Scopes and registries\", {\n      description: \"How to configure private scopes and custom package registries.\",\n    }),\n    page(\"install/utilities\", \"Utilities\", {\n      description: \"Use `bun pm` to introspect your global module cache or project dependency tree.\",\n    }),\n\n    divider(\"Bundler\"),\n    page(\"bundler\", \"`Bun.build`\", {\n      description: \"Bundle code for comsumption in the browser with Bun's native bundler.\",\n    }),\n    // page(\"bundler/intro\", \"How bundlers work\", {\n    //   description: \"A visual introduction to bundling\",\n    // }),\n    page(\"bundler/loaders\", \"Loaders\", {\n      description: \"Bun's built-in loaders for the bundler and runtime\",\n    }),\n    page(\"bundler/plugins\", \"Plugins\", {\n      description: `Implement custom loaders and module resolution logic with Bun's plugin system.`,\n    }),\n    page(\"bundler/executables\", \"Executables\", {\n      description: \"Compile a TypeScript or JavaScript file to a standalone executable\",\n    }),\n    page(\"bundler/macros\", \"Macros\", {\n      description: `Run JavaScript functions at bundle-time and inline the results into your bundle`,\n    }),\n    page(\"bundler/vs-esbuild\", \"vs esbuild\", {\n      description: `Guides for migrating from other bundlers to Bun.`,\n    }),\n\n    divider(\"Test runner\"),\n    page(\"cli/test\", \"`bun test`\", {\n      description: \"Bun's test runner uses Jest-compatible syntax but runs 100x faster.\",\n    }),\n    page(\"test/writing\", \"Writing tests\", {\n      description:\n        \"Write your tests using Jest-like expect matchers, plus setup/teardown hooks, snapshot testing, and more\",\n    }),\n    page(\"test/hot\", \"Watch mode\", {\n      description: \"Reload your tests automatically on change.\",\n    }),\n    page(\"test/lifecycle\", \"Lifecycle hooks\", {\n      description: \"Add lifecycle hooks to your tests that run before/after each test or test run\",\n    }),\n    page(\"test/mocks\", \"Mocks\", {\n      description: \"Mocks functions and track method calls\",\n    }),\n    page(\"test/snapshots\", \"Snapshots\", {\n      description: \"Add lifecycle hooks to your tests that run before/after each test or test run\",\n    }),\n    page(\"test/time\", \"Dates and times\", {\n      description: \"Control the date & time in your tests for more reliable and deterministic tests\",\n    }),\n    page(\"test/dom\", \"DOM testing\", {\n      description: \"Write headless tests for UI and React/Vue/Svelte/Lit components with happy-dom\",\n    }),\n    page(\"test/coverage\", \"Code coverage\", {\n      description: \"Generate code coverage reports with `bun test --coverage`\",\n    }),\n\n    divider(\"Package runner\"),\n    page(\"cli/bunx\", \"`bunx`\", {\n      description: \"Use `bunx` to auto-install and run executable packages from npm.\",\n    }),\n\n    // page(\"runtime/nodejs\", \"Node.js APIs\"),\n\n    // divider(\"Ecosystem\"),\n    // page(\"ecosystem/react\", \"React\", {\n    //   description: `The Bun runtime supports JSX syntax out of the box and optimizes server-side rendering.`,\n    // }),\n    // page(\"ecosystem/express\", \"Express\", {\n    //   description: `Servers built with Express and other major Node.js HTTP libraries work out of the box.`,\n    // }),\n    // page(\"ecosystem/elysia\", \"Elysia\", {\n    //   description: `Get started with Elysia, a Bun-native framework designed for the edge.`,\n    // }),\n    // page(\"ecosystem/hono\", \"Hono\", {\n    //   description: `Hono is an ultra-fast, Bun-friendly web framework designed for edge environments.`,\n    // }),\n    // page(\"ecosystem/buchta\", \"Buchta\", {\n    //   description: `Buchta is a Bun-native fullstack framework for Svelte and Preact apps.`,\n    // }),\n    // page(\"ecosystem/stric\", \"Stric\", {\n    //   description: `Stric is a minimalist, fast web framework for Bun.`,\n    // }),\n    // page(\"ecosystem/awesome\", \"Awesome\", {\n    //   href: \"https://github.com/apvarun/awesome-bun\",\n    //   description: ``,\n    // }),\n\n    divider(\"API\"),\n    page(\"api/http\", \"HTTP server\", {\n      description: `Bun implements Web-standard fetch, plus a Bun-native API for building fast HTTP servers.`,\n    }), // \"`Bun.serve`\"),\n    page(\"api/websockets\", \"WebSockets\", {\n      description: `Bun supports server-side WebSockets with on-the-fly compression, TLS support, and a Bun-native pubsub API.`,\n    }), // \"`Bun.serve`\"),\n    page(\"api/workers\", \"Workers\", {\n      description: `Run code in a separate thread with Bun's native Worker API.`,\n    }), // \"`Worker`\"),\n    page(\"api/binary-data\", \"Binary data\", {\n      description: `How to represent and manipulate binary data in Bun.`,\n    }), // \"`Bun.serve`\"),\n    page(\"api/streams\", \"Streams\", {\n      description: `Reading, writing, and manipulating streams of data in Bun.`,\n    }), // \"`Bun.serve`\"),\n    page(\"api/file-io\", \"File I/O\", {\n      description: `Read and write files fast with Bun's heavily optimized file system API.`,\n    }), // \"`Bun.write`\"),\n    page(\"api/import-meta\", \"import.meta\", {\n      description: `Module-scoped metadata and utilities`,\n    }), // \"`bun:sqlite`\"),\n    page(\"api/sqlite\", \"SQLite\", {\n      description: `The fastest SQLite driver for JavaScript is baked directly into Bun.`,\n    }), // \"`bun:sqlite`\"),\n    page(\"api/file-system-router\", \"FileSystemRouter\", {\n      description: `Resolve incoming HTTP requests against a local file system directory with Bun's fast, Next.js-compatible router.`,\n    }), // \"`Bun.FileSystemRouter`\"),\n    page(\"api/tcp\", \"TCP sockets\", {\n      description: `Bun's native API implements Web-standard TCP Sockets, plus a Bun-native API for building fast TCP servers.`,\n    }), // \"`Bun.{listen|connect}`\")\n    page(\"api/globals\", \"Globals\", {\n      description: `Bun implements a range of Web APIs, Node.js APIs, and Bun-native APIs that are available in the global scope.`,\n    }), // \"`Bun.write`\"),\n    page(\"api/spawn\", \"Child processes\", {\n      description: `Spawn sync and async child processes with easily configurable input and output streams.`,\n    }), // \"`Bun.spawn`\"),\n    page(\"api/transpiler\", \"Transpiler\", {\n      description: `Bun exposes its internal transpiler as a pluggable API.`,\n    }), // \"`Bun.Transpiler`\"),\n    page(\"api/hashing\", \"Hashing\", {\n      description: `Native support for a range of fast hashing algorithms.`,\n    }), // \"`Bun.serve`\"),\n    page(\"api/console\", \"Console\", {\n      description: `Bun implements a Node.js-compatible \\`console\\` object with colorized output and deep pretty-printing.`,\n    }), // \"`Node-API`\"),\n    page(\"api/ffi\", \"FFI\", {\n      description: `Call native code from JavaScript with Bun's foreign function interface (FFI) API.`,\n    }), // \"`bun:ffi`\"),\n    page(\"api/html-rewriter\", \"HTMLRewriter\", {\n      description: `Parse and transform HTML with Bun's native HTMLRewriter API, inspired by Cloudflare Workers.`,\n    }), // \"`HTMLRewriter`\"),\n    page(\"api/test\", \"Testing\", {\n      description: `Bun's built-in test runner is fast and uses Jest-compatible syntax.`,\n    }), // \"`bun:test`\"),\n    page(\"api/utils\", \"Utils\", {\n      description: `Bun implements a set of utilities that are commonly required by developers.`,\n    }), // \"`Bun.peek`\"),\n    // page(\"api/dns\", \"DNS\", {\n    //   description: `Resolve domain names to IP addresses.`,\n    // }), // \"`bun:dns`\"),\n    page(\"api/node-api\", \"Node-API\", {\n      description: `Bun implements the Node-API spec for building native addons.`,\n    }), // \"`Node-API`\"),\n\n    // divider(\"Dev Server\"),\n    // page(\"bun-dev\", \"Vanilla\"),\n    // page(\"dev/css\", \"CSS\"),\n    // page(\"dev/frameworks\", \"Frameworks\"),\n    // page(\"dev/nextjs\", \"Next.js\"),\n    // page(\"dev/cra\", \"Create React App\"),\n\n    divider(\"Project\"),\n    page(\"project/roadmap\", \"Roadmap\", {\n      description: `Track Bun's near-term and long-term goals.`,\n    }),\n\n    page(\"project/benchmarking\", \"Benchmarking\", {\n      description: `Bun is designed for performance. Learn how to benchmark Bun yourself.`,\n    }),\n    page(\"project/development\", \"Development\", {\n      description: \"Learn how to contribute to Bun and get your local development environment up and running.\",\n    }),\n    page(\"project/licensing\", \"License\", {\n      description: `Bun is a MIT-licensed project with a large number of statically-linked dependencies with various licenses.`,\n    }),\n\n    // misc\n    // page(\"roadmap\", \"Roadmap\"),\n    // page(\"troubleshooting\", \"Troubleshooting\"),\n    // page(\"bunfig\", \"bunfig.toml\"),\n    // page(\"upgrading-webkit\", \"Upgrading WebKit\"),\n    // page(\"bun-flavored-toml\", \"Bun-flavored TOML\"),\n  ],\n} satisfies Nav;\n"}
{"filename": "docs/project/benchmarking.md", "content": "Bun is designed for speed. Hot paths are extensively profiled and benchmarked. The source code for all of Bun's public benchmarks can be found in the [`/bench`](https://github.com/oven-sh/bun/tree/main/bench) directory of the Bun repo.\n\n## Measuring time\n\nTo precisely measure time, Bun offers two runtime APIs functions:\n\n1. The Web-standard [`performance.now()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) function\n2. `Bun.nanoseconds()` which is similar to `performance.now()` except it returns the current time since the application started in nanoseconds. You can use `performance.timeOrigin` to convert this to a Unix timestamp.\n\n## Benchmarking tools\n\nWhen writing your own benchmarks, it's important to choose the right tool.\n\n- For microbenchmarks, a great general-purpose tool is [`mitata`](https://github.com/evanwashere/mitata).\n- For load testing, you _must use_ an HTTP benchmarking tool that is at least as fast as `Bun.serve()`, or your results will be skewed. Some popular Node.js-based benchmarking tools like [`autocannon`](https://github.com/mcollina/autocannon) are not fast enough. We recommend one of the following:\n  - [`bombardier`](https://github.com/codesenberg/bombardier)\n  - [`oha`](https://github.com/hatoo/oha)\n  - [`http_load_test`](https://github.com/uNetworking/uSockets/blob/master/examples/http_load_test.c)\n- For benchmarking scripts or CLI commands, we recommend [`hyperfine`](https://github.com/sharkdp/hyperfine).\n\n## Measuring memory usage\n\nBun has two heaps. One heap is for the JavaScript runtime and the other heap is for everything else.\n\n{% anchor id=\"bunjsc\" /%}\n\n### JavaScript heap stats\n\nThe `bun:jsc` module exposes a few functions for measuring memory usage:\n\n```ts\nimport { heapStats } from \"bun:jsc\";\nconsole.log(heapStats());\n```\n\n{% details summary=\"View example statistics\"  %}\n\n```ts\n{\n  heapSize: 1657575,\n  heapCapacity: 2872775,\n  extraMemorySize: 598199,\n  objectCount: 13790,\n  protectedObjectCount: 62,\n  globalObjectCount: 1,\n  protectedGlobalObjectCount: 1,\n  // A count of every object type in the heap\n  objectTypeCounts: {\n    CallbackObject: 25,\n    FunctionExecutable: 2078,\n    AsyncGeneratorFunction: 2,\n    'RegExp String Iterator': 1,\n    FunctionCodeBlock: 188,\n    ModuleProgramExecutable: 13,\n    String: 1,\n    UnlinkedModuleProgramCodeBlock: 13,\n    JSON: 1,\n    AsyncGenerator: 1,\n    Symbol: 1,\n    GetterSetter: 68,\n    ImportMeta: 10,\n    DOMAttributeGetterSetter: 1,\n    UnlinkedFunctionCodeBlock: 174,\n    RegExp: 52,\n    ModuleLoader: 1,\n    Intl: 1,\n    WeakMap: 4,\n    Generator: 2,\n    PropertyTable: 95,\n    'Array Iterator': 1,\n    JSLexicalEnvironment: 75,\n    UnlinkedFunctionExecutable: 2067,\n    WeakSet: 1,\n    console: 1,\n    Map: 23,\n    SparseArrayValueMap: 14,\n    StructureChain: 19,\n    Set: 18,\n    'String Iterator': 1,\n    FunctionRareData: 3,\n    JSGlobalLexicalEnvironment: 1,\n    Object: 481,\n    BigInt: 2,\n    StructureRareData: 55,\n    Array: 179,\n    AbortController: 2,\n    ModuleNamespaceObject: 11,\n    ShadowRealm: 1,\n    'Immutable Butterfly': 103,\n    Primordials: 1,\n    'Set Iterator': 1,\n    JSGlobalProxy: 1,\n    AsyncFromSyncIterator: 1,\n    ModuleRecord: 13,\n    FinalizationRegistry: 1,\n    AsyncIterator: 1,\n    InternalPromise: 22,\n    Iterator: 1,\n    CustomGetterSetter: 65,\n    Promise: 19,\n    WeakRef: 1,\n    InternalPromisePrototype: 1,\n    Function: 2381,\n    AsyncFunction: 2,\n    GlobalObject: 1,\n    ArrayBuffer: 2,\n    Boolean: 1,\n    Math: 1,\n    CallbackConstructor: 1,\n    Error: 2,\n    JSModuleEnvironment: 13,\n    WebAssembly: 1,\n    HashMapBucket: 300,\n    Callee: 3,\n    symbol: 37,\n    string: 2484,\n    Performance: 1,\n    ModuleProgramCodeBlock: 12,\n    JSSourceCode: 13,\n    JSPropertyNameEnumerator: 3,\n    NativeExecutable: 290,\n    Number: 1,\n    Structure: 1550,\n    SymbolTable: 108,\n    GeneratorFunction: 2,\n    'Map Iterator': 1\n  },\n  protectedObjectTypeCounts: {\n    CallbackConstructor: 1,\n    BigInt: 1,\n    RegExp: 2,\n    GlobalObject: 1,\n    UnlinkedModuleProgramCodeBlock: 13,\n    HashMapBucket: 2,\n    Structure: 41,\n    JSPropertyNameEnumerator: 1\n  }\n}\n```\n\n{% /details %}\n\nJavaScript is a garbage-collected language, not reference counted. It's normal and correct for objects to not be freed immediately in all cases, though it's not normal for objects to never be freed.\n\nTo force garbage collection to run manually:\n\n```js\nBun.gc(true); // synchronous\nBun.gc(false); // asynchronous\n```\n\nHeap snapshots let you inspect what objects are not being freed. You can use the `bun:jsc` module to take a heap snapshot and then view it with Safari or WebKit GTK developer tools. To generate a heap snapshot:\n\n```ts\nimport { generateHeapSnapshot } from \"bun\";\n\nconst snapshot = generateHeapSnapshot();\nawait Bun.write(\"heap.json\", JSON.stringify(snapshot, null, 2));\n```\n\nTo view the snapshot, open the `heap.json` file in Safari's Developer Tools (or WebKit GTK)\n\n1. Open the Developer Tools\n2. Click \"Timeline\"\n3. Click \"JavaScript Allocations\" in the menu on the left. It might not be visible until you click the pencil icon to show all the timelines\n4. Click \"Import\" and select your heap snapshot JSON\n\n{% image alt=\"Import heap json\" src=\"https://user-images.githubusercontent.com/709451/204428943-ba999e8f-8984-4f23-97cb-b4e3e280363e.png\" caption=\"Importing a heap snapshot\" /%}\n\nOnce imported, you should see something like this:\n\n{% image alt=\"Viewing heap snapshot in Safari\" src=\"https://user-images.githubusercontent.com/709451/204429337-b0d8935f-3509-4071-b991-217794d1fb27.png\" caption=\"Viewing heap snapshot in Safari Dev Tools\" /%}\n\n### Native heap stats\n\nBun uses mimalloc for the other heap. To report a summary of non-JavaScript memory usage, set the `MIMALLOC_SHOW_STATS=1` environment variable. and stats will print on exit.\n\n```js\nMIMALLOC_SHOW_STATS=1 bun script.js\n\n# will show something like this:\nheap stats:    peak      total      freed    current       unit      count\n  reserved:   64.0 MiB   64.0 MiB      0       64.0 MiB                        not all freed!\n committed:   64.0 MiB   64.0 MiB      0       64.0 MiB                        not all freed!\n     reset:      0          0          0          0                            ok\n   touched:  128.5 KiB  128.5 KiB    5.4 MiB   -5.3 MiB                        ok\n  segments:      1          1          0          1                            not all freed!\n-abandoned:      0          0          0          0                            ok\n   -cached:      0          0          0          0                            ok\n     pages:      0          0         53        -53                            ok\n-abandoned:      0          0          0          0                            ok\n -extended:      0\n -noretire:      0\n     mmaps:      0\n   commits:      0\n   threads:      0          0          0          0                            ok\n  searches:     0.0 avg\nnuma nodes:       1\n   elapsed:       0.068 s\n   process: user: 0.061 s, system: 0.014 s, faults: 0, rss: 57.4 MiB, commit: 64.0 MiB\n```\n"}
{"filename": "docs/project/development.md", "content": "Configuring a development environment for Bun can take 10-30 minutes depending on your internet connection and computer speed. You will need ~10GB of free disk space for the repository and build artifacts.\n\nIf you are using Windows, you must use a WSL environment as Bun does not yet compile on Windows natively.\n\nBefore starting, you will need to already have a release build of Bun installed, as we use our bundler to transpile and minify our code.\n\n{% codetabs %}\n\n```bash#Native\n$ curl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL\n```\n\n```bash#npm\n$ npm install -g bun # the last `npm` command you'll ever need\n```\n\n```bash#Homebrew\n$ brew tap oven-sh/bun # for macOS and Linux\n$ brew install bun\n```\n\n```bash#Docker\n$ docker pull oven/bun\n$ docker run --rm --init --ulimit memlock=-1:-1 oven/bun\n```\n\n```bash#proto\n$ proto install bun\n```\n\n{% /codetabs %}\n\n## Install LLVM\n\nBun requires LLVM 15 and Clang 15 (`clang` is part of LLVM). This version requirement is to match WebKit (precompiled), as mismatching versions will cause memory allocation failures at runtime. In most cases, you can install LLVM through your system package manager:\n\n{% codetabs %}\n\n```bash#macOS (Homebrew)\n$ brew install llvm@15\n```\n\n```bash#Ubuntu/Debian\n$ # LLVM has an automatic installation script that is compatible with all versions of Ubuntu\n$ wget https://apt.llvm.org/llvm.sh -O - | sudo bash -s -- 15 all\n```\n\n```bash#Arch\n$ sudo pacman -S llvm clang lld\n```\n\n{% /codetabs %}\n\nIf none of the above solutions apply, you will have to install it [manually](https://github.com/llvm/llvm-project/releases/tag/llvmorg-15.0.7).\n\nMake sure LLVM 15 is in your path:\n\n```bash\n$ which clang-15\n```\n\nIf not, run this to manually link it:\n\n{% codetabs %}\n\n```bash#macOS (Homebrew)\n# use fish_add_path if you're using fish\n$ export PATH=\"$PATH:$(brew --prefix llvm@15)/bin\"\n$ export LDFLAGS=\"$LDFLAGS -L$(brew --prefix llvm@15)/lib\"\n$ export CPPFLAGS=\"$CPPFLAGS -I$(brew --prefix llvm@15)/include\"\n```\n\n{% /codetabs %}\n\n## Install Dependencies\n\nUsing your system's package manager, install the rest of Bun's dependencies:\n\n{% codetabs %}\n\n```bash#macOS (Homebrew)\n$ brew install automake ccache cmake coreutils esbuild gnu-sed go libiconv libtool ninja pkg-config rust\n```\n\n```bash#Ubuntu/Debian\n$ sudo apt install cargo ccache cmake git golang libtool ninja-build pkg-config rustc esbuild\n```\n\n```bash#Arch\n$ pacman -S base-devel ccache cmake esbuild git go libiconv libtool make ninja pkg-config python rust sed unzip\n```\n\n{% /codetabs %}\n\n{% details summary=\"Ubuntu \u2014\u00a0Unable to locate package esbuild\" %}\n\nThe `apt install esbuild` command may fail with an `Unable to locate package` error if you are using a Ubuntu mirror that does not contain an exact copy of the original Ubuntu server. Note that the same error may occur if you are not using any mirror but have the Ubuntu Universe enabled in the `sources.list`. In this case, you can install esbuild manually:\n\n```bash\n$ curl -fsSL https://esbuild.github.io/dl/latest | sh\n$ chmod +x ./esbuild\n$ sudo mv ./esbuild /usr/local/bin\n```\n\n{% /details %}\n\nIn addition to this, you will need an npm package manager (`bun`, `npm`, etc) to install the `package.json` dependencies.\n\n## Install Zig\n\nZig can be installed either with our npm package [`@oven/zig`](https://www.npmjs.com/package/@oven/zig), or by using [zigup](https://github.com/marler8997/zigup).\n\n```bash\n$ bun install -g @oven/zig\n$ zigup 0.12.0-dev.163+6780a6bbf\n```\n\n{% callout %}\nWe last updated Zig on **July 18th, 2023**\n{% /callout %}\n\n## First Build\n\nAfter cloning the repository, run the following command to run the first build. This may take a while as it will clone submodules and build dependencies.\n\n```bash\n$ make setup\n```\n\nThe binary will be located at `packages/debug-bun-{platform}-{arch}/bun-debug`. It is recommended to add this to your `$PATH`. To verify the build worked, lets print the version number on the development build of Bun.\n\n```bash\n$ packages/debug-bun-*/bun-debug --version\nbun 0.x.y__dev\n```\n\nNote: `make setup` is just an alias for the following:\n\n```bash\n$ make assert-deps submodule npm-install-dev node-fallbacks runtime_js fallback_decoder bun_error mimalloc picohttp zlib boringssl libarchive lolhtml sqlite usockets uws tinycc c-ares zstd base64 cpp zig link\n```\n\n## Rebuilding\n\nBun uses a series of make commands to rebuild parts of the codebase. The general rule for rebuilding is there is `make link` to rerun the linker, and then different make targets for different parts of the codebase. Do not pass `-j` to make as these scripts will break if run out of order, and multiple cores will be used when possible during the builds.\n\n{% table %}\n\n- What changed\n- Run this command\n\n---\n\n- Zig Code\n- `make zig`\n\n---\n\n- C++ Code\n- `make cpp`\n\n---\n\n- Zig + C++ Code\n- `make dev` (combination of the above two)\n\n---\n\n- JS/TS Code in `src/js`\n- `make js` (in bun-debug, js is loaded from disk without a recompile). If you change the names of any file or add/remove anything, you must also run `make dev`.\n\n---\n\n- `*.classes.ts`\n- `make generate-classes dev`\n\n---\n\n- JSSink\n- `make generate-sink cpp`\n\n---\n\n- `src/node_fallbacks/*`\n- `make node-fallbacks zig`\n\n---\n\n- `identifier_data.zig`\n- `make identifier-cache zig`\n\n---\n\n- Code using `cppFn`/`JSC.markBinding`\n- `make headers` (TODO: explain explain what this is used for and why it's useful)\n\n{% /table %}\n\n`make setup` cloned a bunch of submodules and built the subprojects. When a submodule is out of date, run `make submodule` to quickly reset/update all your submodules, then you can rebuild individual submodules with their respective command.\n\n{% table %}\n\n- Dependency\n- Run this command\n\n---\n\n- WebKit\n- `bun install` (it is a prebuilt package)\n\n---\n\n- uWebSockets\n- `make uws`\n\n---\n\n- Mimalloc\n- `make mimalloc`\n\n---\n\n- PicoHTTPParser\n- `make picohttp`\n\n---\n\n- zlib\n- `make zlib`\n\n---\n\n- BoringSSL\n- `make boringssl`\n\n---\n\n- libarchive\n- `make libarchive`\n\n---\n\n- lolhtml\n- `make lolhtml`\n\n---\n\n- sqlite\n- `make sqlite`\n\n---\n\n- TinyCC\n- `make tinycc`\n\n---\n\n- c-ares\n- `make c-ares`\n\n---\n\n- zstd\n- `make zstd`\n\n---\n\n- Base64\n- `make base64`\n\n{% /table %}\n\nThe above will probably also need Zig and/or C++ code rebuilt.\n\n## VSCode\n\nVSCode is the recommended IDE for working on Bun, as it has been configured. Once opening, you can run `Extensions: Show Recommended Extensions` to install the recommended extensions for Zig and C++. ZLS is automatically configured.\n\n### ZLS\n\nZLS is the language server for Zig. The latest binary that the extension auto-updates may not function with the version of Zig that Bun uses. It may be more reliable to build ZLS from source:\n\n```bash\n$ git clone https://github.com/zigtools/zls\n$ cd zls\n$ git checkout f91ff831f4959efcb7e648dba4f0132c296d26c0\n$ zig build\n```\n\nThen add absolute paths to Zig and ZLS in your vscode config:\n\n```json\n{\n  \"zig.zigPath\": \"/path/to/zig/install/zig\",\n  \"zig.zls.path\": \"/path/to/zls/zig-out/bin/zls\"\n}\n```\n\n## JavaScript builtins\n\nWhen you change anything in `src/js/builtins/*` or switch branches, run this:\n\n```bash\n$ make js cpp\n```\n\nThat inlines the TypeScript code into C++ headers.\n\n{% callout %}\nMake sure you have `ccache` installed, otherwise regeneration will take much longer than it should.\n{% /callout %}\n\nFor more information on how `src/js` works, see `src/js/README.md` in the codebase.\n\n## Code generation scripts\n\nBun leverages a lot of code generation scripts.\n\nThe [./src/bun.js/bindings/headers.h](https://github.com/oven-sh/bun/blob/main/src/bun.js/bindings/headers.h) file has bindings to & from Zig <> C++ code. This file is generated by running the following:\n\n```bash\n$ make headers\n```\n\nThis ensures that the types for Zig and the types for C++ match up correctly, by using comptime reflection over functions exported/imported.\n\nTypeScript files that end with `*.classes.ts` are another code generation script. They generate C++ boilerplate for classes implemented in Zig. The generated code lives in:\n\n- [src/bun.js/bindings/ZigGeneratedClasses.cpp](https://github.com/oven-sh/bun/tree/main/src/bun.js/bindings/ZigGeneratedClasses.cpp)\n- [src/bun.js/bindings/ZigGeneratedClasses.h](https://github.com/oven-sh/bun/tree/main/src/bun.js/bindings/ZigGeneratedClasses.h)\n- [src/bun.js/bindings/generated_classes.zig](https://github.com/oven-sh/bun/tree/main/src/bun.js/bindings/generated_classes.zig)\n  To generate the code, run:\n\n```bash\n$ make codegen\n```\n\nLastly, we also have a [code generation script](src/bun.js/scripts/generate-jssink.js) for our native stream implementations.\nTo run that, run:\n\n```bash\n$ make generate-sink\n```\n\nYou probably won't need to run that one much.\n\n## Modifying ESM modules\n\nCertain modules like `node:fs`, `node:stream`, `bun:sqlite`, and `ws` are implemented in JavaScript. These live in `src/js/{node,bun,thirdparty}` files and are pre-bundled using Bun. The bundled code is committed so CI builds can run without needing a copy of Bun.\n\nWhen these are changed, run:\n\n```\n$ make js\n```\n\nIn debug builds, Bun automatically loads these from the filesystem, wherever it was compiled, so no need to re-run `make dev`. In release builds, this same behavior can be done via the environment variable `BUN_OVERRIDE_MODULE_PATH`. When set to the repository root, Bun will read from the bundled modules in the repository instead of the ones baked into the binary.\n\n## Release build\n\nTo build a release build of Bun, run:\n\n```bash\n$ make release-bindings -j12\n$ make release\n```\n\nThe binary will be located at `packages/bun-{platform}-{arch}/bun`.\n\n## Valgrind\n\nOn Linux, valgrind can help find memory issues.\n\nKeep in mind:\n\n- JavaScriptCore doesn't support valgrind. It will report spurious errors.\n- Valgrind is slow\n- Mimalloc will sometimes cause spurious errors when debug build is enabled\n\nYou'll need a very recent version of Valgrind due to DWARF 5 debug symbols. You may need to manually compile Valgrind instead of using it from your Linux package manager.\n\n`--fair-sched=try` is necessary if running multithreaded code in Bun (such as the bundler). Otherwise it will hang.\n\n```bash\n$ valgrind --fair-sched=try --track-origins=yes bun-debug <args>\n```\n\n## Updating `WebKit`\n\nThe Bun team will occasionally bump the version of WebKit used in Bun. When this happens, you may see something like this with you run `git status`.\n\n```bash\n$ git status\nOn branch my-branch\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   src/bun.js/WebKit (new commits)\n```\n\nFor performance reasons, `make submodule` does not automatically update the WebKit submodule. To update, run the following commands from the root of the Bun repo:\n\n```bash\n$ bun install\n$ make cpp\n```\n\n<!-- Check the [Bun repo](https://github.com/oven-sh/bun/tree/main/src/bun.js) to get the hash of the commit of WebKit is currently being used.\n\n{% image width=\"270\" src=\"https://github.com/oven-sh/bun/assets/3084745/51730b73-89ef-4358-9a41-9563a60a54be\" /%} -->\n\n<!--\n```bash\n$ cd src/bun.js/WebKit\n$ git fetch\n$ git checkout <hash>\n``` -->\n\n## Troubleshooting\n\n### 'span' file not found on Ubuntu\n\n> \u26a0\ufe0f Please note that the instructions below are specific to issues occurring on Ubuntu. It is unlikely that the same issues will occur on other Linux distributions.\n\nThe Clang compiler typically uses the `libstdc++` C++ standard library by default. `libstdc++` is the default C++ Standard Library implementation provided by the GNU Compiler Collection (GCC). While Clang may link against the `libc++` library, this requires explicitly providing the `-stdlib` flag when running Clang.\n\nBun relies on C++20 features like `std::span`, which are not available in GCC versions lower than 11. GCC 10 doesn't have all of the C++20 features implemented. As a result, running `make setup` may fail with the following error:\n\n```\nfatal error: 'span' file not found\n#include <span>\n         ^~~~~~\n```\n\nTo fix the error, we need to update the GCC version to 11. To do this, we'll need to check if the latest version is available in the distribution's official repositories or use a third-party repository that provides GCC 11 packages. Here are general steps:\n\n```bash\n$ sudo apt update\n$ sudo apt install gcc-11 g++-11\n# If the above command fails with `Unable to locate package gcc-11` we need\n# to add the APT repository\n$ sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n# Now run `apt install` again\n$ sudo apt install gcc-11 g++-11\n```\n\nNow, we need to set GCC 11 as the default compiler:\n\n```bash\n$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100\n$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100\n```\n\n### libarchive\n\nIf you see an error when compiling `libarchive`, run this:\n\n```bash\n$ brew install pkg-config\n```\n\n### missing files on `zig build obj`\n\nIf you see an error about missing files on `zig build obj`, make sure you built the headers.\n\n```bash\n$ make headers\n```\n\n### cmakeconfig.h not found\n\nIf you see an error about `cmakeconfig.h` not being found, this is because the precompiled WebKit did not install properly.\n\n```bash\n$ bun install\n```\n\nCheck to see the command installed webkit, and you can manully look for `node_modules/bun-webkit-{platform}-{arch}`:\n\n```bash\n# this should reveal two directories. if not, something went wrong\n$ echo node_modules/bun-webkit*\n```\n\n### macOS `library not found for -lSystem`\n\nIf you see this error when compiling, run:\n\n```bash\n$ xcode-select --install\n```\n\n## Arch Linux / Cannot find `libatomic.a`\n\nBun requires `libatomic` to be statically linked. On Arch Linux, it is only given as a shared library, but as a workaround you can symlink it to get the build working locally.\n\n```bash\n$ sudo ln -s /lib/libatomic.so /lib/libatomic.a\n```\n\nThe built version of bun may not work on other systems if compiled this way.\n"}
{"filename": "docs/project/licensing.md", "content": "Bun itself is MIT-licensed.\n\n## JavaScriptCore\n\nBun statically links JavaScriptCore (and WebKit) which is LGPL-2 licensed. WebCore files from WebKit are also licensed under LGPL2. Per LGPL2:\n\n> (1) If you statically link against an LGPL\u2019d library, you must also provide your application in an object (not necessarily source) format, so that a user has the opportunity to modify the library and relink the application.\n\nYou can find the patched version of WebKit used by Bun here: <https://github.com/oven-sh/webkit>. If you would like to relink Bun with changes:\n\n- `git submodule update --init --recursive`\n- `make jsc`\n- `zig build`\n\nThis compiles JavaScriptCore, compiles Bun\u2019s `.cpp` bindings for JavaScriptCore (which are the object files using JavaScriptCore) and outputs a new `bun` binary with your changes.\n\n## Linked libraries\n\nBun statically links these libraries:\n\n{% table %}\n\n- Library\n- License\n\n---\n\n- [`boringssl`](https://boringssl.googlesource.com/boringssl/)\n- [several licenses](https://boringssl.googlesource.com/boringssl/+/refs/heads/master/LICENSE)\n\n---\n\n- [`libarchive`](https://github.com/libarchive/libarchive)\n- [several licenses](https://github.com/libarchive/libarchive/blob/master/COPYING)\n\n---\n\n- [`lol-html`](https://github.com/cloudflare/lol-html/tree/master/c-api)\n- BSD 3-Clause\n\n---\n\n- [`mimalloc`](https://github.com/microsoft/mimalloc)\n- MIT\n\n---\n\n- [`picohttp`](https://github.com/h2o/picohttpparser)\n- dual-licensed under the Perl License or the MIT License\n\n---\n\n- [`zstd`](https://github.com/facebook/zstd)\n- dual-licensed under the BSD License or GPLv2 license\n\n---\n\n- [`simdutf`](https://github.com/simdutf/simdutf)\n- Apache 2.0\n\n---\n\n- [`tinycc`](https://github.com/tinycc/tinycc)\n- LGPL v2.1\n\n---\n\n- [`uSockets`](https://github.com/uNetworking/uSockets)\n- Apache 2.0\n\n---\n\n- [`zlib-cloudflare`](https://github.com/cloudflare/zlib)\n- zlib\n\n---\n\n- [`c-ares`](https://github.com/c-ares/c-ares)\n- MIT licensed\n\n---\n\n- [`libicu`](https://github.com/unicode-org/icu) 72\n- [license here](https://github.com/unicode-org/icu/blob/main/icu4c/LICENSE)\n\n---\n\n- [`libbase64`](https://github.com/aklomp/base64/blob/master/LICENSE)\n- BSD 2-Clause\n\n---\n\n- A fork of [`uWebsockets`](https://github.com/jarred-sumner/uwebsockets)\n- Apache 2.0 licensed\n\n---\n\n- Parts of Tigerbeetle's IO code https://github.com/tigerbeetle/tigerbeetle/blob/532c8b70b9142c17e07737ab6d3da68d7500cbca/src/io/windows.zig#L1\n- Apache 2.0 licensed\n\n{% /table %}\n\n## Polyfills\n\nFor compatibility reasons, the following packages are embedded into Bun's binary and injected if imported.\n\n{% table %}\n\n- Package\n- License\n\n---\n\n- [`assert`](https://npmjs.com/package/assert)\n- MIT\n\n---\n\n- [`browserify-zlib`](https://npmjs.com/package/browserify-zlib)\n- MIT\n\n---\n\n- [`buffer`](https://npmjs.com/package/buffer)\n- MIT\n\n---\n\n- [`constants-browserify`](https://npmjs.com/package/constants-browserify)\n- MIT\n\n---\n\n- [`crypto-browserify`](https://npmjs.com/package/crypto-browserify)\n- MIT\n\n---\n\n- [`domain-browser`](https://npmjs.com/package/domain-browser)\n- MIT\n\n---\n\n- [`events`](https://npmjs.com/package/events)\n- MIT\n\n---\n\n- [`https-browserify`](https://npmjs.com/package/https-browserify)\n- MIT\n\n---\n\n- [`os-browserify`](https://npmjs.com/package/os-browserify)\n- MIT\n\n---\n\n- [`path-browserify`](https://npmjs.com/package/path-browserify)\n- MIT\n\n---\n\n- [`process`](https://npmjs.com/package/process)\n- MIT\n\n---\n\n- [`punycode`](https://npmjs.com/package/punycode)\n- MIT\n\n---\n\n- [`querystring-es3`](https://npmjs.com/package/querystring-es3)\n- MIT\n\n---\n\n- [`stream-browserify`](https://npmjs.com/package/stream-browserify)\n- MIT\n\n---\n\n- [`stream-http`](https://npmjs.com/package/stream-http)\n- MIT\n\n---\n\n- [`string_decoder`](https://npmjs.com/package/string_decoder)\n- MIT\n\n---\n\n- [`timers-browserify`](https://npmjs.com/package/timers-browserify)\n- MIT\n\n---\n\n- [`tty-browserify`](https://npmjs.com/package/tty-browserify)\n- MIT\n\n---\n\n- [`url`](https://npmjs.com/package/url)\n- MIT\n\n---\n\n- [`util`](https://npmjs.com/package/util)\n- MIT\n\n---\n\n- [`vm-browserify`](https://npmjs.com/package/vm-browserify)\n- MIT\n\n{% /table %}\n\n## Additional credits\n\n- Bun's JS transpiler, CSS lexer, and Node.js module resolver source code is a Zig port of [@evanw](https://github.com/evanw)\u2019s [esbuild](https://github.com/evanw/esbuild) project.\n- Credit to [@kipply](https://github.com/kipply) for the name \"Bun\"!\n"}
{"filename": "docs/project/roadmap.md", "content": "Bun is a project with an incredibly large scope and is still in its early days. Long-term, Bun aims to provide an all-in-one tookit to replace the complex, fragmented toolchains common today: Node.js, Jest, Webpack, esbuild, Babel, yarn, PostCSS, etc.\n\nRefer to [Bun's Roadmap](https://github.com/oven-sh/bun/issues/159) on GitHub to learn more about the project's long-term plans and priorities.\n\n<!--\n{% table %}\n\n- Feature\n- Implemented in\n\n---\n\n- Web Streams with HTMLRewriter\n- Bun.js\n\n---\n\n- Source Maps (unbundled is supported)\n- JS Bundler\n\n---\n\n- Source Maps\n- CSS\n\n---\n\n- JavaScript Minifier\n- JS Transpiler\n\n---\n\n- CSS Minifier\n- CSS\n\n---\n\n- CSS Parser (it only bundles)\n- CSS\n\n---\n\n- Tree-shaking\n- JavaScript\n\n---\n\n- Tree-shaking\n- CSS\n\n---\n\n- [TypeScript Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n- TS Transpiler\n\n---\n\n- `@jsxPragma` comments\n- JS Transpiler\n\n---\n\n- Sharing `.bun` files\n- Bun\n\n---\n\n- Dates & timestamps\n- TOML parser\n\n---\n\n- [Hash components for Fast Refresh](https://github.com/oven-sh/bun/issues/18)\n- JSX Transpiler\n\n{% /table %} -->\n\n<!-- ## Limitations & intended usage\n\nToday, Bun is mostly focused on Bun.js: the JavaScript runtime.\n\nWhile you could use Bun's bundler & transpiler separately to build for browsers or node, Bun doesn't have a minifier or support tree-shaking yet. For production browser builds, you probably should use a tool like esbuild or swc.\n\n## Upcoming breaking changes\n\n- Bun's CLI flags will change to better support Bun as a JavaScript runtime. They were chosen when Bun was just a frontend development tool.\n- Bun's bundling format will change to accommodate production browser bundles and on-demand production bundling -->\n"}
{"filename": "docs/quickstart.md", "content": "Let's write a simple HTTP server using the built-in `Bun.serve` API. First, create a fresh directory.\n\n```bash\n$ mkdir quickstart\n$ cd quickstart\n```\n\nRun `bun init` to scaffold a new project. It's an interactive tool; for this tutorial, just press `enter` to accept the default answer for each prompt.\n\n```bash\n$ bun init\nbun init helps you get started with a minimal project and tries to\nguess sensible defaults. Press ^C anytime to quit.\n\npackage name (quickstart):\nentry point (index.ts):\n\nDone! A package.json file was saved in the current directory.\n + index.ts\n + .gitignore\n + tsconfig.json (for editor auto-complete)\n + README.md\n\nTo get started, run:\n  bun run index.ts\n```\n\nSince our entry point is a `*.ts` file, Bun generates a `tsconfig.json` for you. If you're using plain JavaScript, it will generate a [`jsconfig.json`](https://code.visualstudio.com/docs/languages/jsconfig) instead.\n\n## Run a file\n\nOpen `index.ts` and paste the following code snippet, which implements a simple HTTP server with [`Bun.serve`](/docs/api/http).\n\n```ts\nconst server = Bun.serve({\n  port: 3000,\n  fetch(req) {\n    return new Response(`Bun!`);\n  },\n});\n\nconsole.log(`Listening on http://localhost:${server.port}...`);\n```\n\nRun the file from your shell.\n\n```bash\n$ bun index.ts\nListening at http://localhost:3000...\n```\n\nVisit [http://localhost:3000](http://localhost:3000) to test the server. You should see a simple page that says \"Bun!\".\n\n## Run a script\n\nBun can also execute `\"scripts\"` from your `package.json`. Add the following script:\n\n```json-diff\n  {\n    \"name\": \"quickstart\",\n    \"module\": \"index.ts\",\n    \"type\": \"module\",\n+   \"scripts\": {\n+     \"start\": \"bun run index.ts\"\n+   },\n    \"devDependencies\": {\n      \"bun-types\": \"^0.7.0\"\n    }\n  }\n```\n\nThen run it with `bun run start`.\n\n```bash\n$ bun run start\n  $ bun run index.ts\n  Listening on http://localhost:4000...\n```\n\n{% callout %}\n\u26a1\ufe0f **Performance** \u2014 `bun run` is roughly 28x faster than `npm run` (6ms vs 170ms of overhead).\n{% /callout %}\n\n## Install a package\n\nLet's make our server a little more interesting by installing a package. First install the `figlet` package and its type declarations. Figlet is a utility for converting strings into ASCII art.\n\n```bash\n$ bun add figlet\n$ bun add -d @types/figlet # TypeScript users only\n```\n\nUpdate `index.ts` to use `figlet` in the `fetch` handler.\n\n```ts-diff\n+ import figlet from \"figlet\";\n\n  const server = Bun.serve({\n    fetch() {\n+     const body = figlet.textSync('Bun!');\n+     return new Response(body);\n-     return new Response(`Bun!`);\n    },\n    port: 3000,\n  });\n```\n\nRestart the server and refresh the page. You should see a new ASCII art banner.\n\n```txt\n  ____              _\n | __ ) _   _ _ __ | |\n |  _ \\| | | | '_ \\| |\n | |_) | |_| | | | |_|\n |____/ \\__,_|_| |_(_)\n```\n"}
{"filename": "docs/rfcs/README.md", "content": "# RFCs\n\n| Number | Name | Issue |\n| ------ | ---- | ----- |\n"}
{"filename": "docs/runtime/autoimport.md", "content": "{% callout %}\n**Note** \u2014 Added in Bun v0.3.0\n{% /callout %}\n\nIf no `node_modules` directory is found in the working directory or higher, Bun will abandon Node.js-style module resolution in favor of the **Bun module resolution algorithm**.\n\nUnder Bun-style module resolution, all imported packages are auto-installed on the fly into a [global module cache](/docs/install/cache) during execution (the same cache used by [`bun install`](/docs/cli/install)).\n\n```ts\nimport { foo } from \"foo\"; // install `latest` version\n\nfoo();\n```\n\nThe first time you run this script, Bun will auto-install `\"foo\"` and cache it. The next time you run the script, it will use the cached version.\n\n## Version resolution\n\nTo determine which version to install, Bun follows the following algorithm:\n\n1. Check for a `bun.lockb` file in the project root. If it exists, use the version specified in the lockfile.\n2. Otherwise, scan up the tree for a `package.json` that includes `\"foo\"` as a dependency. If found, use the specified semver version or version range.\n3. Otherwise, use `latest`.\n\n## Cache behavior\n\nOnce a version or version range has been determined, Bun will:\n\n1. Check the module cache for a compatible version. If one exists, use it.\n2. When resolving `latest`, Bun will check if `package@latest` has been downloaded and cached in the last _24 hours_. If so, use it.\n3. Otherwise, download and install the appropriate version from the `npm` registry.\n\n## Installation\n\nPackages are installed and cached into `<cache>/<pkg>@<version>`, so multiple versions of the same package can be cached at once. Additionally, a symlink is created under `<cache>/<pkg>/<version>` to make it faster to look up all versions of a package that exist in the cache.\n\n## Version specifiers\n\nThis entire resolution algorithm can be short-circuited by specifying a version or version range directly in your import statement.\n\n```ts\nimport { z } from \"zod@3.0.0\"; // specific version\nimport { z } from \"zod@next\"; // npm tag\nimport { z } from \"zod@^3.20.0\"; // semver range\n```\n\n## Benefits\n\nThis auto-installation approach is useful for a few reasons:\n\n- **Space efficiency** \u2014 Each version of a dependency only exists in one place on disk. This is a huge space and time savings compared to redundant per-project installations.\n- **Portability** \u2014 To share simple scripts and gists, your source file is _self-contained_. No need to `zip` together a directory containing your code and config files. With version specifiers in `import` statements, even a `package.json` isn't necessary.\n- **Convenience** \u2014 There's no need to run `npm install` or `bun install` before running a file or script. Just `bun run` it.\n- **Backwards compatibility** \u2014 Because Bun still respects the versions specified in `package.json` if one exists, you can switch to Bun-style resolution with a single command: `rm -rf node_modules`.\n\n## Limitations\n\n- No Intellisense. TypeScript auto-completion in IDEs relies on the existence of type declaration files inside `node_modules`. We are investigating various solutions to this.\n- No [patch-package](https://github.com/ds300/patch-package) support\n\n<!-- - The implementation details of Bun's install cache will change between versions. Don't think of it as an API. To reliably resolve packages, use Bun's builtin APIs (such as `Bun.resolveSync` or `import.meta.resolve`) instead of relying on the filesystem directly. Bun will likely move to a binary archive format where packages may not correspond to files/folders on disk at all - so if you depend on the filesystem structure instead of the JavaScript API, your code will eventually break. -->\n\n<!-- ## Customizing behavior\n\nTo prefer locally-installed versions of packages. Instead of checking npm for latest versions, you can pass the `--prefer-offline` flag to prefer locally-installed versions of packages.\n\n```bash\n$ bun run --prefer-offline my-script.ts\n```\n\nThis will check the install cache for installed versions of packages before checking the npm registry. If no matching version of a package is installed, only then will it check npm for the latest version.\n\n#### Prefer latest\n\nTo always use the latest version of a package, you can pass the `--prefer-latest` flag.\n\n```bash\n$ bun run --prefer-latest my-script.ts\n``` -->\n\n## FAQ\n\n{% details summary=\"How is this different from what pnpm does?\" %}\n\nWith pnpm, you have to run `pnpm install`, which creates a `node_modules` folder of symlinks for the runtime to resolve. By contrast, Bun resolves dependencies on the fly when you run a file; there's no need to run any `install` command ahead of time. Bun also doesn't create a `node_modules` folder.\n\n{% /details %}\n\n{% details summary=\"How is this different from Yarn Plug'N'Play does?\" %}\nWith Yarn, you must run `yarn install` before you run a script. By contrast, Bun resolves dependencies on the fly when you run a file; there's no need to run any `install` command ahead of time.\n\nYarn Plug'N'Play also uses zip files to store dependencies. This makes dependency loading [slower at runtime](https://twitter.com/jarredsumner/status/1458207919636287490), as random access reads on zip files tend to be slower than the equivalent disk lookup.\n{% /details %}\n\n{% details summary=\"How is this different from what Deno does?\" %}\n\nDeno requires an `npm:` specifier before each npm `import`, lacks support for import maps via `compilerOptions.paths` in `tsconfig.json`, and has incomplete support for `package.json` settings. Unlike Deno, Bun does not currently support URL imports.\n{% /details %}\n"}
{"filename": "docs/runtime/bun-apis.md", "content": "Bun implements a set of native APIs on the `Bun` global object and through a number of built-in modules. These APIs are heavily optimized and represent the canonical \"Bun-native\" way to implement some common functionality.\n\nBun strives to implement standard Web APIs wherever possible. Bun introduces new APIs primarily for server-side tasks where no standard exists, such as file I/O and starting an HTTP server. In these cases, Bun's approach still builds atop standard APIs like `Blob`, `URL`, and `Request`.\n\n```ts\nBun.serve({\n  fetch(req: Request) {\n    return new Response(\"Success!\");\n  },\n});\n```\n\nClick the link in the right column to jump to the associated documentation.\n\n{% table %}\n\n- Topic\n- APIs\n\n---\n\n- HTTP server\n- [`Bun.serve`](/docs/api/http#bun-serve)\n\n---\n\n- Bundler\n- [`Bun.build`](/docs/bundler)\n\n---\n\n- File I/O\n- [`Bun.file`](/docs/api/file-io#reading-files-bun-file) [`Bun.write`](/docs/api/file-io#writing-files-bun-write)\n\n---\n\n- Child processes\n- [`Bun.spawn`](/docs/api/spawn#spawn-a-process-bun-spawn) [`Bun.spawnSync`](/docs/api/spawn#blocking-api-bun-spawnsync)\n\n---\n\n- TCP\n- [`Bun.listen`](/docs/api/tcp#start-a-server-bun-listen) [`Bun.connect`](/docs/api/tcp#start-a-server-bun-listen)\n\n---\n\n- Transpiler\n- [`Bun.Transpiler`](/docs/api/transpiler)\n\n---\n\n- Routing\n- [`Bun.FileSystemRouter`](/docs/api/file-system-router)\n\n---\n\n- HTML Rewriting\n- [`HTMLRewriter`](/docs/api/html-rewriter)\n\n---\n\n- Hashing\n- [`Bun.hash`](/docs/api/hashing#bun-hash) [`Bun.CryptoHasher`](/docs/api/hashing#bun-cryptohasher)\n\n---\n\n- import.meta\n- [`import.meta`](/docs/api/import-meta)\n\n---\n\n<!-- - [DNS](/docs/api/dns)\n- `Bun.dns`\n\n--- -->\n\n- SQLite\n- [`bun:sqlite`](/docs/api/sqlite)\n\n---\n\n- FFI\n- [`bun:ffi`](/docs/api/ffi)\n\n---\n\n- Testing\n- [`bun:test`](/docs/cli/test)\n\n---\n\n- Node-API\n- [`Node-API`](/docs/api/node-api)\n\n---\n\n- Utilities\n- [`Bun.version`](/docs/api/utils#bun-version) [`Bun.revision`](/docs/api/utils#bun-revision) [`Bun.env`](/docs/api/utils#bun-env) [`Bun.main`](/docs/api/utils#bun-main) [`Bun.sleep()`](/docs/api/utils#bun-sleep) [`Bun.sleepSync()`](/docs/api/utils#bun-sleepsync) [`Bun.which()`](/docs/api/utils#bun-which) [`Bun.peek()`](/docs/api/utils#bun-peek) [`Bun.openInEditor()`](/docs/api/utils#bun-openineditor) [`Bun.deepEquals()`](/docs/api/utils#bun-deepequals) [`Bun.escapeHTML()`](/docs/api/utils#bun-escapehtml) [`Bun.fileURLToPath()`](/docs/api/utils#bun-fileurltopath) [`Bun.pathToFileURL()`](/docs/api/utils#bun-pathtofileurl) [`Bun.gzipSync()`](/docs/api/utils#bun-gzipsync) [`Bun.gunzipSync()`](/docs/api/utils#bun-gunzipsync) [`Bun.deflateSync()`](/docs/api/utils#bun-deflatesync) [`Bun.inflateSync()`](/docs/api/utils#bun-inflatesync) [`Bun.inspect()`](/docs/api/utils#bun-inspect) [`Bun.nanoseconds()`](/docs/api/utils#bun-nanoseconds) [`Bun.readableStreamTo*()`](/docs/api/utils#bun-readablestreamto) [`Bun.resolveSync()`](/docs/api/utils#bun-resolvesync)\n\n{% /table %}\n"}
{"filename": "docs/runtime/configuration.md", "content": "There are two primary mechanisms for configuring the behavior of Bun.\n\n- environment variables\n- `bunfig.toml`: Bun's configuration file\n\nConfiguring with `bunfig.toml` is optional. Bun aims to be zero-configuration out of the box, but is also highly configurable for advanced use cases. Your `bunfig.toml` should live in your project root alongside `package.json`.\n\nYou can also create a global configuration file at the following paths:\n\n- `$HOME/.bunfig.toml`\n- `$XDG_CONFIG_HOME/.bunfig.toml`\n\nIf both a global and local `bunfig` are detected, the results are shallow-merged, with local overridding global. CLI flags will override `bunfig` setting where applicable.\n\n## Runtime\n\n```toml\n# scripts to run before `bun run`ning a file or script\n# useful for registering plugins\npreload = [\"./preload.ts\"]\n\n# equivalent to corresponding tsconfig compilerOptions\njsx = \"react\"\njsxFactory = \"h\"\njsxFragment = \"Fragment\"\njsxImportSource = \"react\"\n\n# Reduce memory usage at the cost of performance\nsmol = true\n\n# Set Bun's log level\nlogLevel = \"debug\" # \"debug\", \"warn\", \"error\"\n\n[define]\n# Replace any usage of \"process.env.bagel\" with the string `lox`.\n# The values are parsed as JSON, except single-quoted strings are supported and `'undefined'` becomes `undefined` in JS.\n# This will probably change in a future release to be just regular TOML instead. It is a holdover from the CLI argument parsing.\n\"process.env.bagel\" = \"'lox'\"\n\n[loaders]\n# When loading a .bagel file, run the JS parser\n\".bagel\" = \"js\"\n```\n\n## Test runner\n\n```toml\n[test]\n# Scripts to run before all test files\npreload = [\"./setup.ts\"]\n\n# Reduce memory usage at the cost of performance\nsmol = true\n```\n\n## Package manager\n\nPackage management is a complex issue; to support a range of use cases, the behavior of `bun install` can be configured in [`bunfig.toml`](/docs/runtime/configuration).\n\n### Default flags\n\nThe following settings modify the core behavior of Bun's package management commands. **The default values are shown below.**\n\n```toml\n[install]\n\n# whether to install optionalDependencies\noptional = true\n\n# whether to install devDependencies\ndev = true\n\n# whether to install peerDependencies\npeer = false\n\n# equivalent to `--production` flag\nproduction = false\n\n# equivalent to `--frozen-lockfile` flag\nfrozenLockfile = false\n\n# equivalent to `--dry-run` flag\ndryRun = false\n```\n\n### Private scopes and registries\n\nThe default registry is `https://registry.npmjs.org/`. This can be globally configured in `bunfig.toml`:\n\n```toml\n[install]\n# set default registry as a string\nregistry = \"https://registry.npmjs.org\"\n# set a token\nregistry = { url = \"https://registry.npmjs.org\", token = \"123456\" }\n# set a username/password\nregistry = \"https://username:password@registry.npmjs.org\"\n```\n\nTo configure scoped registries:\n\n```toml\n[install.scopes]\n# registry as string\nmyorg1 = \"https://username:password@registry.myorg.com/\"\n\n# registry with username/password\n# you can reference environment variables\nmyorg12 = { username = \"myusername\", password = \"$NPM_PASS\", url = \"https://registry.myorg.com/\" }\n\n# registry with token\nmyorg3 = { token = \"$npm_token\", url = \"https://registry.myorg.com/\" }\n```\n\n### Cache\n\nTo configure caching behavior:\n\n```toml\n[install]\n# where `bun install --global` installs packages\nglobalDir = \"~/.bun/install/global\"\n\n# where globally-installed package bins are linked\nglobalBinDir = \"~/.bun/bin\"\n\n[install.cache]\n# the directory to use for the cache\ndir = \"~/.bun/install/cache\"\n\n# when true, don't load from the global cache.\n# Bun may still write to node_modules/.cache\ndisable = false\n\n# when true, always resolve the latest versions from the registry\ndisableManifest = false\n```\n\n### Lockfile\n\nTo configure lockfile behavior:\n\n```toml\n[install.lockfile]\n\n# path to read bun.lockb from\npath = \"bun.lockb\"\n\n# path to save bun.lockb to\nsavePath = \"bun.lockb\"\n\n# whether to save the lockfile to disk\nsave = true\n\n# whether to save a non-Bun lockfile alongside bun.lockb\n# only \"yarn\" is supported\nprint = \"yarn\"\n```\n\n### Debugging\n\n```toml\n[debug]\n# When navigating to a blob: or src: link, open the file in your editor\n# If not, it tries $EDITOR or $VISUAL\n# If that still fails, it will try Visual Studio Code, then Sublime Text, then a few others\n# This is used by Bun.openInEditor()\neditor = \"code\"\n\n# List of editors:\n# - \"subl\", \"sublime\"\n# - \"vscode\", \"code\"\n# - \"textmate\", \"mate\"\n# - \"idea\"\n# - \"webstorm\"\n# - \"nvim\", \"neovim\"\n# - \"vim\",\"vi\"\n# - \"emacs\"\n```\n\n## Environment variables\n\nThese environment variables are checked by Bun to detect functionality and toggle features.\n\n{% table %}\n\n- Name\n- Description\n\n---\n\n- `TMPDIR`\n- Bun occasionally requires a directory to store intermediate assets during bundling or other operations. If unset, defaults to the platform-specific temporary directory: `/tmp` on Linux, `/private/tmp` on macOS.\n\n---\n\n- `NO_COLOR`\n- If `NO_COLOR=1`, then ANSI color output is [disabled](https://no-color.org/).\n\n---\n\n- `FORCE_COLOR`\n- If `FORCE_COLOR=1`, then ANSI color output is force enabled, even if `NO_COLOR` is set.\n\n---\n\n- `DO_NOT_TRACK`\n- If `DO_NOT_TRACK=1`, then analytics are [disabled](https://do-not-track.dev/). Bun records bundle timings (so we can answer with data, \"is Bun getting faster?\") and feature usage (e.g., \"are people actually using macros?\"). The request body size is about 60 bytes, so it's not a lot of data.\n\n{% /table %}\n"}
{"filename": "docs/runtime/debugger.md", "content": "---\nname: Debugger\n---\n\nBun speaks the [WebKit Inspector Protocol](https://github.com/oven-sh/bun/blob/main/packages/bun-vscode/types/jsc.d.ts). For demonstration purposes, consider the following simple web server.\n\n```ts#server.ts\nBun.serve({\n  fetch(req){\n    console.log(req.url);\n    return new Response(\"Hello, world!\");\n  }\n})\n```\n\n### `--inspect`\n\nTo enable debugging when running code with Bun, use the `--inspect` flag. This automatically starts a WebSocket server on an available port that can be used to introspect the running Bun process.\n\n```sh\n$ bun --inspect server.ts\n------------------ Bun Inspector ------------------\nListening at:\n  ws://localhost:6499/0tqxs9exrgrm\n\nInspect in browser:\n  https://debug.bun.sh/#localhost:6499/0tqxs9exrgrm\n------------------ Bun Inspector ------------------\n```\n\n### `--inspect-brk`\n\nThe `--inspect-brk` flag behaves identically to `--inspect`, except it automatically injects a breakpoint at the first line of the executed script. This is useful for debugging scripts that run quickly and exit immediately.\n\n### `--inspect-wait`\n\nThe `--inspect-wait` flag behaves identically to `--inspect`, except the code will not execute until a debugger has attached to the running process.\n\n### Setting a port or URL for the debugger\n\nRegardless of which flag you use, you can optionally specify a port number, URL prefix, or both.\n\n```sh\n$ bun --inspect=4000 server.ts\n$ bun --inspect=localhost:4000 server.ts\n$ bun --inspect=localhost:4000/prefix server.ts\n```\n\n## Debuggers\n\nVarious debugging tools can connect to this server to provide an interactive debugging experience. Bun hosts a web-based debugger at [debug.bun.sh](https://debug.bun.sh). It is a modified version of WebKit's [Web Inspector Interface](https://webkit.org/web-inspector/web-inspector-interface/), which will look familiar to Safari users.\n\n### `debug.bun.sh`\n\nBun hosts a web-based debugger at [debug.bun.sh](https://debug.bun.sh). It is a modified version of WebKit's [Web Inspector Interface](https://webkit.org/web-inspector/web-inspector-interface/), which will look familiar to Safari users.\n\nOpen the provided `debug.bun.sh` URL in your browser to start a debugging session. From this interface, you'll be able to view the source code of the running file, view and set breakpoints, and execute code with the built-in console.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/e6a976a8-80cc-4394-8925-539025cc025d\" alt=\"Screenshot of Bun debugger, Console tab\" /%}\n\nLet's set a breakpoint. Navigate to the Sources tab; you should see the code from earlier. Click on the line number `3` to set a breakpoint on our `console.log(req.url)` statement.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/3b69c7e9-25ff-4f9d-acc4-caa736862935\" alt=\"screenshot of Bun debugger\" /%}\n\nThen visit [`http://localhost:3000`](http://localhost:3000) in your web browser. This will send an HTTP request to our `localhost` web server. It will seem like the page isn't loading. Why? Because the program has paused execution at the breakpoint we set earlier.\n\nNote how the UI has changed.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/8b565e58-5445-4061-9bc4-f41090dfe769\" alt=\"screenshot of Bun debugger\" /%}\n\nAt this point there's a lot we can do to introspect the current execution environment. We can use the console at the bottom to run arbitrary code in the context of the program, with full access to the variables in scope at our breakpoint.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/f4312b76-48ba-4a7d-b3b6-6205968ac681\" /%}\n\nOn the right side of the Sources pane, we can see all local variables currently in scope, and drill down to see their properties and methods. Here, we're inspecting the `req` variable.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/63d7f843-5180-489c-aa94-87c486e68646\" /%}\n\nIn the upper left of the Sources pane, we can control the execution of the program.\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/41b76deb-7371-4461-9d5d-81b5a6d2f7a4\" /%}\n\nHere's a cheat sheet explaining the functions of the control flow buttons.\n\n- _Continue script execution_ \u2014\u00a0continue running the program until the next breakpoint or exception.\n- _Step over_ \u2014\u00a0The program will continue to the next line.\n- _Step into_ \u2014\u00a0If the current statement contains a function call, the debugger will \"step into\" the called function.\n- _Step out_ \u2014\u00a0If the current statement is a function call, the debugger will finish executing the call, then \"step out\" of the function to the location where it was called.\n\n{% image src=\"https://github-production-user-asset-6210df.s3.amazonaws.com/3084745/261510346-6a94441c-75d3-413a-99a7-efa62365f83d.png\" /%}\n"}
{"filename": "docs/runtime/hot.md", "content": "Bun supports two kinds of automatic reloading via CLI flags:\n\n- `--watch` mode, which hard restarts Bun's process when imported files change (introduced in Bun v0.5.9)\n- `--hot` mode, which soft reloads the code (without restarting the process) when imported files change (introduced in Bun v0.2.0)\n\n## `--watch` mode\n\nWatch mode can be used with `bun test` or when running TypeScript, JSX, and JavaScript files.\n\nTo run a file in `--watch` mode:\n\n```bash\n$ bun --watch index.tsx\n```\n\nTo run your tests in `--watch` mode:\n\n```bash\n$ bun --watch test\n```\n\nIn `--watch` mode, Bun keeps track of all imported files and watches them for changes. When a change is detected, Bun restarts the process, preserving the same set of CLI arguments and environment variables used in the initial run. If Bun crashes, `--watch` will attempt to automatically restart the process.\n\n{% callout %}\n\n**\u26a1\ufe0f Reloads are fast.** The filesystem watchers you're probably used to have several layers of libraries wrapping the native APIs or worse, rely on polling.\n\nInstead, Bun uses operating system native filesystem watcher APIs like kqueue or inotify to detect changes to files. Bun also does a number of optimizations to enable it scale to larger projects (such as setting a high rlimit for file descriptors, statically allocated file path buffers, reuse file descriptors when possible, etc).\n\n{% /callout %}\n\nThe following examples show Bun live-reloading a file as it is edited, with VSCode configured to save the file [on each keystroke](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).\n\n{% codetabs %}\n\n```bash\n$ bun run --watch watchy.tsx\n```\n\n```tsx#watchy.tsx\nimport { serve } from \"bun\";\nconsole.log(\"I restarted at:\", Date.now());\n\nserve({\n  port: 4003,\n\n  fetch(request) {\n    return new Response(\"Sup\");\n  },\n});\n```\n\n{% /codetabs %}\n\n![bun watch gif](https://user-images.githubusercontent.com/709451/228439002-7b9fad11-0db2-4e48-b82d-2b88c8625625.gif)\n\nRunning `bun test` in watch mode and `save-on-keypress` enabled:\n\n```bash\n$ bun --watch test\n```\n\n![bun test gif](https://user-images.githubusercontent.com/709451/228396976-38a23864-4a1d-4c96-87cc-04e5181bf459.gif)\n\n## `--hot` mode\n\nUse `bun --hot` to enable hot reloading when executing code with Bun.\n\n```bash\n$ bun --hot server.ts\n```\n\nStarting from the entrypoint (`server.ts` in the example above), Bun builds a registry of all imported source files (excluding those in `node_modules`) and watches them for changes. When a change is detected, Bun performs a \"soft reload\". All files are re-evaluated, but all global state (notably, the `globalThis` object) is persisted.\n\n```ts#server.ts\n// make TypeScript happy\ndeclare global {\n  var count: number;\n}\n\nglobalThis.count ??= 0;\nconsole.log(`Reloaded ${globalThis.count} times`);\nglobalThis.count++;\n\n// prevent `bun run` from exiting\nsetInterval(function () {}, 1000000);\n```\n\nIf you run this file with `bun --hot server.ts`, you'll see the reload count increment every time you save the file.\n\n```bash\n$ bun --hot index.ts\nReloaded 1 times\nReloaded 2 times\nReloaded 3 times\n```\n\nTraditional file watchers like `nodemon` restart the entire process, so HTTP servers and other stateful objects are lost. By contrast, `bun --hot` is able to reflect the updated code without restarting the process.\n\n### HTTP servers\n\nBun provides the following simplified API for implementing HTTP servers. Refer to [API > HTTP](/docs/api/http) for full details.\n\n```ts#server.ts\nimport {serve} from \"bun\";\n\nglobalThis.count ??= 0;\nglobalThis.count++;\n\nserve({\n  fetch(req: Request) {\n    return new Response(`Reloaded ${globalThis.count} times`);\n  },\n  port: 3000,\n});\n```\n\nThe file above is simply exporting an object with a `fetch` handler defined. When this file is executed, Bun interprets this as an HTTP server and passes the exported object into `Bun.serve`.\n\nWhen you save the file, your HTTP server be reloaded with the updated code without the process being restarted. This results in seriously fast refresh speeds.\n\n{% image src=\"https://user-images.githubusercontent.com/709451/195477632-5fd8a73e-014d-4589-9ba2-e075ad9eb040.gif\" alt=\"Bun vs Nodemon refresh speeds\" caption=\"Bun on the left, Nodemon on the right.\" /%}\n\n{% callout %}\n**Note** \u2014 In a future version of Bun, support for Vite's `import.meta.hot` is planned to enable better lifecycle management for hot reloading and to align with the ecosystem.\n\n{% /callout %}\n\n{% details summary=\"Implementation `details`\" %}\n\nOn hot reload, Bun:\n\n- Resets the internal `require` cache and ES module registry (`Loader.registry`)\n- Runs the garbage collector synchronously (to minimize memory leaks, at the cost of runtime performance)\n- Re-transpiles all of your code from scratch (including sourcemaps)\n- Re-evaluates the code with JavaScriptCore\n\nThis implementation isn't particularly optimized. It re-transpiles files that haven't changed. It makes no attempt at incremental compilation. It's a starting point.\n\n{% /details %}\n"}
{"filename": "docs/runtime/index.md", "content": "Bun is a new JavaScript & TypeScript runtime designed to be a faster, leaner, and more modern drop-in replacement for Node.js.\n\n## Speed\n\nBun is designed to start fast and run fast. It's transpiler and runtime are written in Zig, a modern, high-performance language. On Linux, this translates into startup times [4x faster](https://twitter.com/jarredsumner/status/1499225725492076544) than Node.js.\n\n{% image src=\"/images/bun-run-speed.jpeg\" caption=\"Bun vs Node.js vs Deno running Hello World\" /%}\n\n<!-- If no `node_modules` directory is found in the working directory or above, Bun will abandon Node.js-style module resolution in favor of the `Bun module resolution algorithm`. Under Bun-style module resolution, all packages are _auto-installed_ on the fly into a [global module cache](/docs/install/cache). For full details on this algorithm, refer to [Runtime > Modules](/docs/runtime/modules). -->\n\nPerformance sensitive APIs like `Buffer`, `fetch`, and `Response` are heavily profiled and optimized. Under the hood Bun uses the [JavaScriptCore engine](https://developer.apple.com/documentation/javascriptcore), which is developed by Apple for Safari. It starts and runs faster than V8, the engine used by Node.js and Chromium-based browsers.\n\n## TypeScript\n\nBun natively supports TypeScript out of the box. All files are transpiled on the fly by Bun's fast native transpiler before being executed. Similar to other build tools, Bun does not perform typechecking; it simply removes type annotations from the file.\n\n```bash\n$ bun index.js\n$ bun index.jsx\n$ bun index.ts\n$ bun index.tsx\n```\n\nSome aspects of Bun's runtime behavior are affected by the contents of your `tsconfig.json` file. Refer to [Runtime > TypeScript](/docs/runtime/typescript) page for details.\n\n<!-- Before execution, Bun internally transforms all source files to vanilla JavaScript using its fast native transpiler. The transpiler looks at the files extension to determine how to handle it. -->\n\n<!--\n\nevery file before execution. It's transpiler  can directly run TypeScript and JSX `{.js|.jsx|.ts|.tsx}` files directly. During execution, Bun internally transpiles all files (including `.js` files) to vanilla JavaScript with it's fast native transpiler. -->\n\n<!-- A loader determines how to map imports &amp; file extensions to transforms and output. -->\n\n<!-- Currently, Bun implements the following loaders: -->\n\n<!-- {% table %}\n\n- Extension\n- Transforms\n- Output (internal)\n\n---\n\n- `.js`\n- JSX + JavaScript\n- `.js`\n\n---\n\n- `.jsx`\n- JSX + JavaScript\n- `.js`\n\n---\n\n- `.ts`\n- TypeScript + JavaScript\n- `.js`\n\n---\n\n- `.tsx`\n- TypeScript + JSX + JavaScript\n- `.js`\n\n---\n\n- `.mjs`\n- JavaScript\n- `.js`\n\n---\n\n- `.cjs`\n- JavaScript\n- `.js`\n\n---\n\n- `.mts`\n- TypeScript\n- `.js`\n\n---\n\n- `.cts`\n- TypeScript\n- `.js`\n\n\n{% /table %} -->\n\n## JSX\n\n## JSON and TOML\n\nSource files can import a `*.json` or `*.toml` file to load its contents as a plain old JavaScript object.\n\n```ts\nimport pkg from \"./package.json\";\nimport bunfig from \"./bunfig.toml\";\n```\n\n## WASM\n\nAs of v0.5.2, experimental support exists for WASI, the [WebAssembly System Interface](https://github.com/WebAssembly/WASI). To run a `.wasm` binary with Bun:\n\n```bash\n$ bun ./my-wasm-app.wasm\n# if the filename doesn't end with \".wasm\"\n$ bun run ./my-wasm-app.whatever\n```\n\n{% callout %}\n\n**Note** \u2014 WASI support is based on [wasi-js](https://github.com/sagemathinc/cowasm/tree/main/packages/wasi-js). Currently, it only supports WASI binaries that use the `wasi_snapshot_preview1` or `wasi_unstable` APIs. Bun's implementation is not fully optimized for performance; this will become more of a priority as WASM grows in popularity.\n{% /callout %}\n\n## Node.js compatibility\n\nLong-term, Bun aims for complete Node.js compatibility. Most Node.js packages already work with Bun out of the box, but certain low-level APIs like `dgram` are still unimplemented. Track the current compatibility status at [Ecosystem > Node.js](/docs/runtime/nodejs-apis).\n\nBun implements the Node.js module resolution algorithm, so dependencies can still be managed with `package.json`, `node_modules`, and CommonJS-style imports.\n\n{% callout %}\n**Note** \u2014 We recommend using Bun's [built-in package manager](/docs/cli/install) for a performance boost over other npm clients.\n{% /callout %}\n\n## Web APIs\n\n<!-- When prudent, Bun attempts to implement Web-standard APIs instead of introducing new APIs. Refer to [Runtime > Web APIs](/docs/web-apis) for a list of Web APIs that are available in Bun. -->\n\nSome Web APIs aren't relevant in the context of a server-first runtime like Bun, such as the [DOM API](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API#html_dom_api_interfaces) or [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API). Many others, though, are broadly useful outside of the browser context; when possible, Bun implements these Web-standard APIs instead of introducing new APIs.\n\nThe following Web APIs are partially or completely supported.\n\n{% table %}\n\n---\n\n- HTTP\n- [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n\n---\n\n- URLs\n- [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\n---\n\n- Streams\n- [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream) [`ByteLengthQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy) [`CountQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy) and associated classes\n\n---\n\n- Blob\n- [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n\n---\n\n- WebSockets\n- [`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n\n---\n\n- Encoding and decoding\n- [`atob`](https://developer.mozilla.org/en-US/docs/Web/API/atob) [`btoa`](https://developer.mozilla.org/en-US/docs/Web/API/btoa) [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder)\n\n---\n\n- Timeouts\n- [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout)\n\n---\n\n- Intervals\n- [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval)[`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval)\n\n---\n\n- Crypto\n- [`crypto`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) [`SubtleCrypto`](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)\n  [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n\n---\n\n- Debugging\n\n- [`console`](https://developer.mozilla.org/en-US/docs/Web/API/console) [`performance`](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\n\n---\n\n- Microtasks\n- [`queueMicrotask`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask)\n\n---\n\n- Errors\n- [`reportError`](https://developer.mozilla.org/en-US/docs/Web/API/reportError)\n\n---\n\n- User interaction\n- [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert) [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm) [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) (intended for interactive CLIs)\n\n<!-- - Blocking. Prints the alert message to terminal and awaits `[ENTER]` before proceeding. -->\n<!-- - Blocking. Prints confirmation message and awaits `[y/N]` input from user. Returns `true` if user entered `y` or `Y`, `false` otherwise.\n- Blocking. Prints prompt message and awaits user input. Returns the user input as a string. -->\n\n---\n\n- Realms\n- [`ShadowRealm`](https://github.com/tc39/proposal-shadowrealm)\n\n---\n\n- Events\n- [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)\n  [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) [`ErrorEvent`](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent) [`CloseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent) [`MessageEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n\n---\n\n{% /table %}\n\n## Bun APIs\n\nBun exposes a set of Bun-specific APIs on the `Bun` global object and through a number of built-in modules. These APIs represent the canonical \"Bun-native\" way to perform some common development tasks. They are all heavily optimized for performance. Click the link in the left column to view the associated documentation.\n\n{% table %}\n\n- Topic\n- APIs\n\n---\n\n- [HTTP](/docs/api/http)\n- `Bun.serve`\n\n---\n\n- [File I/O](/docs/api/file-io)\n- `Bun.file` `Bun.write`\n\n---\n\n- [Processes](/docs/api/spawn)\n- `Bun.spawn` `Bun.spawnSync`\n\n---\n\n- [TCP](/docs/api/tcp)\n- `Bun.listen` `Bun.connect`\n\n---\n\n- [Transpiler](/docs/api/transpiler)\n- `Bun.Transpiler`\n\n---\n\n- [Routing](/docs/api/file-system-router)\n- `Bun.FileSystemRouter`\n\n---\n\n- [HTMLRewriter](/docs/api/html-rewriter)\n- `HTMLRewriter`\n\n---\n\n- [Utils](/docs/api/utils)\n- `Bun.peek` `Bun.which`\n\n---\n\n- [SQLite](/docs/api/sqlite)\n- `bun:sqlite`\n\n---\n\n- [FFI](/docs/api/ffi)\n- `bun:ffi`\n\n---\n\n- [DNS](/docs/api/dns)\n- `bun:dns`\n\n---\n\n- [Testing](/docs/api/test)\n- `bun:test`\n\n---\n\n- [Node-API](/docs/api/node-api)\n- `Node-API`\n\n---\n\n{% /table %}\n\n## Plugins\n\nSupport for additional file types can be implemented with plugins. Refer to [Runtime > Plugins](/docs/bundler/plugins) for full documentation.\n"}
{"filename": "docs/runtime/jsx.md", "content": "Bun supports `.jsx` and `.tsx` files out of the box. Bun's internal transpiler converts JSX syntax into vanilla JavaScript before execution.\n\n```tsx#react.tsx\nfunction Component(props: {message: string}) {\n  return (\n    <body>\n      <h1 style={{color: 'red'}}>{props.message}</h1>\n    </body>\n  );\n}\n\nconsole.log(<Component message=\"Hello world!\" />);\n```\n\n## Configuration\n\nBun reads your `tsconfig.json` or `jsconfig.json` configuration files to determines how to perform the JSX transform internally. To avoid using either of these, the following options can also be defined in [`bunfig.toml`](/docs/runtime/configuration).\n\nThe following compiler options are respected.\n\n### [`jsx`](https://www.typescriptlang.org/tsconfig#jsx)\n\nHow JSX constructs are transformed into vanilla JavaScript internally. The table below lists the possible values of `jsx`, along with their transpilation of the following simple JSX component:\n\n```tsx\n<Box width={5}>Hello</Box>\n```\n\n{% table %}\n\n- Compiler options\n- Transpiled output\n\n---\n\n- ```json\n  {\n    \"jsx\": \"react\"\n  }\n  ```\n\n- ```tsx\n  import { createElement } from \"react\";\n  createElement(\"Box\", { width: 5 }, \"Hello\");\n  ```\n\n---\n\n- ```json\n  {\n    \"jsx\": \"react-jsx\"\n  }\n  ```\n\n- ```tsx\n  import { jsx } from \"react/jsx-runtime\";\n  jsx(\"Box\", { width: 5 }, \"Hello\");\n  ```\n\n---\n\n- ```json\n  {\n    \"jsx\": \"react-jsxdev\"\n  }\n  ```\n\n- ```tsx\n  import { jsxDEV } from \"react/jsx-dev-runtime\";\n  jsxDEV(\n    \"Box\",\n    { width: 5, children: \"Hello\" },\n    undefined,\n    false,\n    undefined,\n    this,\n  );\n  ```\n\n  The `jsxDEV` variable name is a convention used by React. The `DEV` suffix is a visible way to indicate that the code is intended for use in development. The development version of React is slower and includes additional validity checks & debugging tools.\n\n---\n\n- ```json\n  {\n    \"jsx\": \"preserve\"\n  }\n  ```\n\n- ```tsx\n  // JSX is not transpiled\n  // \"preserve\" is not supported by Bun currently\n  <Box width={5}>Hello</Box>\n  ```\n\n{% /table %}\n\n<!-- {% table %}\n\n- `react`\n- `React.createElement(\"Box\", {width: 5}, \"Hello\")`\n\n---\n\n- `react-jsx`\n- `jsx(\"Box\", {width: 5}, \"Hello\")`\n\n---\n\n- `react-jsxdev`\n- `jsxDEV(\"Box\", {width: 5}, \"Hello\", void 0, false)`\n\n---\n\n- `preserve`\n- `<Box width={5}>Hello</Box>` Left as-is; not yet supported by Bun.\n\n{% /table %} -->\n\n### [`jsxFactory`](https://www.typescriptlang.org/tsconfig#jsxFactory)\n\n{% callout %}\n**Note** \u2014 Only applicable when `jsx` is `react`.\n{% /callout %}\n\nThe function name used to represent JSX constructs. Default value is `\"createElement\"`. This is useful for libraries like [Preact](https://preactjs.com/) that use a different function name (`\"h\"`).\n\n{% table %}\n\n- Compiler options\n- Transpiled output\n\n---\n\n- ```json\n  {\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\"\n  }\n  ```\n\n- ```tsx\n  import { h } from \"react\";\n  h(\"Box\", { width: 5 }, \"Hello\");\n  ```\n\n{% /table %}\n\n### [`jsxFragmentFactory`](https://www.typescriptlang.org/tsconfig#jsxFragmentFactory)\n\n{% callout %}\n**Note** \u2014 Only applicable when `jsx` is `react`.\n{% /callout %}\n\nThe function name used to represent [JSX fragments](https://react.dev/reference/react/Fragment) such as `<>Hello</>`; only applicable when `jsx` is `react`. Default value is `\"Fragment\"`.\n\n{% table %}\n\n- Compiler options\n- Transpiled output\n\n---\n\n- ```json\n  {\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"myjsx\",\n    \"jsxFragmentFactory\": \"MyFragment\"\n  }\n  ```\n\n- ```tsx\n  // input\n  <>Hello</>;\n\n  // output\n  import { myjsx, MyFragment } from \"react\";\n  createElement(\"Box\", { width: 5 }, \"Hello\");\n  ```\n\n{% /table %}\n\n### [`jsxImportSource`](https://www.typescriptlang.org/tsconfig#jsxImportSource)\n\n{% callout %}\n**Note** \u2014 Only applicable when `jsx` is `react-jsx` or `react-jsxdev`.\n{% /callout %}\n\nThe module from which the component factory function (`createElement`, `jsx`, `jsxDEV`, etc) will be imported. Default value is `\"react\"`. This will typically be necessary when using a component library like Preact.\n\n{% table %}\n\n- Compiler options\n- Transpiled output\n\n---\n\n- ```jsonc\n  {\n    \"jsx\": \"react\"\n    // jsxImportSource is not defined\n    // default to \"react\"\n  }\n  ```\n\n- ```tsx\n  import { jsx } from \"react/jsx-runtime\";\n  jsx(\"Box\", { width: 5, children: \"Hello\" });\n  ```\n\n---\n\n- ```jsonc\n  {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\"\n  }\n  ```\n\n- ```tsx\n  import { jsx } from \"preact/jsx-runtime\";\n  jsx(\"Box\", { width: 5, children: \"Hello\" });\n  ```\n\n---\n\n- ```jsonc\n  {\n    \"jsx\": \"react-jsxdev\",\n    \"jsxImportSource\": \"preact\"\n  }\n  ```\n\n- ```tsx\n  // /jsx-runtime is automatically appended\n  import { jsxDEV } from \"preact/jsx-dev-runtime\";\n  jsxDEV(\n    \"Box\",\n    { width: 5, children: \"Hello\" },\n    undefined,\n    false,\n    undefined,\n    this,\n  );\n  ```\n\n{% /table %}\n\n### JSX pragma\n\nAll of these values can be set on a per-file basis using _pragmas_. A pragma is a special comment that sets a compiler option in a particular file.\n\n{% table %}\n\n- Pragma\n- Equivalent config\n\n---\n\n- ```ts\n  // @jsx h\n  ```\n\n- ```jsonc\n  {\n    \"jsxFactory\": \"h\"\n  }\n  ```\n\n---\n\n- ```ts\n  // @jsxFrag MyFragment\n  ```\n- ```jsonc\n  {\n    \"jsxFragmentFactory\": \"MyFragment\"\n  }\n  ```\n\n---\n\n- ```ts\n  // @jsxImportSource preact\n  ```\n- ```jsonc\n  {\n    \"jsxImportSource\": \"preact\"\n  }\n  ```\n\n{% /table %}\n\n## Logging\n\nBun implements special logging for JSX to make debugging easier. Given the following file:\n\n```tsx#index.tsx\nimport { Stack, UserCard } from \"./components\";\n\nconsole.log(\n  <Stack>\n    <UserCard name=\"Dom\" bio=\"Street racer and Corona lover\" />\n    <UserCard name=\"Jakob\" bio=\"Super spy and Dom's secret brother\" />\n  </Stack>\n);\n```\n\nBun will pretty-print the component tree when logged:\n\n{% image src=\"https://github.com/oven-sh/bun/assets/3084745/d29db51d-6837-44e2-b8be-84fc1b9e9d97\" / %}\n\n## Prop punning\n\nThe Bun runtime also supports \"prop punning\" for JSX. This is a shorthand syntax useful for assigning a variable to a prop with the same name.\n\n```tsx\nfunction Div(props: {className: string;}) {\n  const {className} = props;\n\n  // without punning\n  return <div className={className} />;\n  // with punning\n  return <div {className} />;\n}\n```\n"}
{"filename": "docs/runtime/loaders.md", "content": "## TypeScript\n\nBun natively supports TypeScript out of the box. All files are transpiled on the fly by Bun's fast native transpiler before being executed. Similar to other build tools, Bun does not perform typechecking; it simply removes type annotations from the file.\n\n```bash\n$ bun index.js\n$ bun index.jsx\n$ bun index.ts\n$ bun index.tsx\n```\n\nSome aspects of Bun's runtime behavior are affected by the contents of your `tsconfig.json` file. Refer to [Runtime > TypeScript](/docs/runtime/typescript) page for details.\n\n## JSX\n\nBun supports `.jsx` and `.tsx` files out of the box. Bun's internal transpiler converts JSX syntax into vanilla JavaScript before execution.\n\n```tsx#react.tsx\nfunction Component(props: {message: string}) {\n  return (\n    <body>\n      <h1 style={{color: 'red'}}>{props.message}</h1>\n    </body>\n  );\n}\n\nconsole.log(<Component message=\"Hello world!\" />);\n```\n\nBun implements special logging for JSX to make debugging easier.\n\n```bash\n$ bun run react.tsx\n<Component message=\"Hello world!\" />\n```\n\n## Text files\n\n{% callout %}\nSupported in Bun v0.6.0 canary.\n{% /callout %}\n\nText files can be imported as strings.\n\n{% codetabs %}\n\n```ts#index.ts\nimport text from \"./text.txt\";\nconsole.log(text);\n// => \"Hello world!\"\n```\n\n```txt#text.txt\nHello world!\n```\n\n{% /codetabs %}\n\n## JSON and TOML\n\nJSON and TOML files can be directly imported from a source file. The contents will be loaded and returned as a JavaScript object.\n\n```ts\nimport pkg from \"./package.json\";\nimport data from \"./data.toml\";\n```\n\n## WASM\n\nAs of v0.5.2, experimental support exists for WASI, the [WebAssembly System Interface](https://github.com/WebAssembly/WASI). To run a `.wasm` binary with Bun:\n\n```bash\n$ bun ./my-wasm-app.wasm\n# if the filename doesn't end with \".wasm\"\n$ bun run ./my-wasm-app.whatever\n```\n\n{% callout %}\n\n**Note** \u2014 WASI support is based on [wasi-js](https://github.com/sagemathinc/cowasm/tree/main/packages/wasi-js). Currently, it only supports WASI binaries that use the `wasi_snapshot_preview1` or `wasi_unstable` APIs. Bun's implementation is not fully optimized for performance; this will become more of a priority as WASM grows in popularity.\n{% /callout %}\n\n## Custom loaders\n\nSupport for additional file types can be implemented with plugins. Refer to [Runtime > Plugins](/docs/bundler/plugins) for full documentation.\n\n<!--\n\nA loader determines how to map imports &amp; file extensions to transforms and output.\n\nCurrently, Bun implements the following loaders:\n\n| Input | Loader                        | Output |\n| ----- | ----------------------------- | ------ |\n| .js   | JSX + JavaScript              | .js    |\n| .jsx  | JSX + JavaScript              | .js    |\n| .ts   | TypeScript + JavaScript       | .js    |\n| .tsx  | TypeScript + JSX + JavaScript | .js    |\n| .mjs  | JavaScript                    | .js    |\n| .cjs  | JavaScript                    | .js    |\n| .mts  | TypeScript                    | .js    |\n| .cts  | TypeScript                    | .js    |\n| .toml | TOML                          | .js    |\n| .css  | CSS                           | .css   |\n| .env  | Env                           | N/A    |\n| .\\*   | file                          | string |\n\nEverything else is treated as `file`. `file` replaces the import with a URL (or a path).\n\nYou can configure which loaders map to which extensions by passing `--loaders` to `bun`. For example:\n\n```sh\n$ bun --loader=.js:js\n```\n\nThis will disable JSX transforms for `.js` files. -->\n"}
{"filename": "docs/runtime/modules.md", "content": "Module resolution in JavaScript is a complex topic.\n\nThe ecosystem is currently in the midst of a years-long transition from CommonJS modules to native ES modules. TypeScript enforces its own set of rules around import extensions that aren't compatible with ESM. Different build tools support path re-mapping via disparate non-compatible mechanisms.\n\nBun aims to provide a consistent and predictable module resolution system that just works. Unfortunately it's still quite complex.\n\n## Syntax\n\nConsider the following files.\n\n{% codetabs %}\n\n```ts#index.ts\nimport { hello } from \"./hello\";\n\nhello();\n```\n\n```ts#hello.ts\nexport function hello() {\n  console.log(\"Hello world!\");\n}\n```\n\n{% /codetabs %}\n\nWhen we run `index.ts`, it prints \"Hello world\".\n\n```bash\n$ bun index.ts\nHello world!\n```\n\nIn this case, we are importing from `./hello`, a relative path with no extension. To resolve this import, Bun will check for the following files in order:\n\n- `./hello.ts`\n- `./hello.tsx`\n- `./hello.js`\n- `./hello.mjs`\n- `./hello.cjs`\n- `./hello/index.ts`\n- `./hello/index.js`\n- `./hello/index.json`\n- `./hello/index.mjs`\n\nImport paths are case-insensitive.\n\n```ts#index.ts\nimport { hello } from \"./hello\";\nimport { hello } from \"./HELLO\";\nimport { hello } from \"./hElLo\";\n```\n\nImport paths can optionally include extensions. If an extension is present, Bun will only check for a file with that exact extension.\n\n```ts#index.ts\nimport { hello } from \"./hello\";\nimport { hello } from \"./hello.ts\"; // this works\n```\n\nThere is one exception: if you import `from \"*.js{x}\"`, Bun will additionally check for a matching `*.ts{x}` file, to be compatible with TypeScript's [ES module support](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#new-file-extensions).\n\n```ts#index.ts\nimport { hello } from \"./hello\";\nimport { hello } from \"./hello.ts\"; // this works\nimport { hello } from \"./hello.js\"; // this also works\n```\n\nBun supports both ES modules (`import`/`export` syntax) and CommonJS modules (`require()`/`module.exports`). The following CommonJS version would also work in Bun.\n\n{% codetabs %}\n\n```ts#index.js\nconst { hello } = require(\"./hello\");\n\nhello();\n```\n\n```ts#hello.js\nfunction hello() {\n  console.log(\"Hello world!\");\n}\n\nexports.hello = hello;\n```\n\n{% /codetabs %}\n\nThat said, using CommonJS is discouraged in new projects.\n\n## Resolution\n\nBun implements the Node.js module resolution algorithm, so you can import packages from `node_modules` with a bare specifier.\n\n```ts\nimport { stuff } from \"foo\";\n```\n\nThe full specification of this algorithm are officially documented in the [Node.js documentation](https://nodejs.org/api/modules.html); we won't rehash it here. Briefly: if you import `from \"foo\"`, Bun scans up the file system for a `node_modules` directory containing the package `foo`.\n\nOnce it finds the `foo` package, Bun reads the `package.json` to determine how the package should be imported. To determine the package's entrypoint, Bun first reads the `exports` field and checks for the following conditions.\n\n```jsonc#package.json\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \"bun\": \"./index.js\",\n    \"worker\": \"./index.js\",\n    \"node\": \"./index.js\",\n    \"require\": \"./index.js\", # if importer is CommonJS\n    \"import\": \"./index.mjs\", # if importer is ES module\n    \"default\": \"./index.js\",\n  }\n}\n```\n\nWhichever one of these conditions occurs _first_ in the `package.json` is used to determine the package's entrypoint.\n\nBun respects subpath [`\"exports\"`](https://nodejs.org/api/packages.html#subpath-exports) and [`\"imports\"`](https://nodejs.org/api/packages.html#imports). Specifying any subpath in the `\"exports\"` map will prevent other subpaths from being importable.\n\n```jsonc#package.json\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package.json\": \"./package.json\" // subpath\n  }\n}\n```\n\n{% callout %}\n**Shipping TypeScript** \u2014 Note that Bun supports the special `\"bun\"` export condition. If your library is written in TypeScript, you can publish your (un-transpiled!) TypeScript files to `npm` directly. If you specify your package's `*.ts` entrypoint in the `\"bun\"` condition, Bun will directly import and execute your TypeScript source files.\n{% /callout %}\n\nIf `exports` is not defined, Bun falls back to `\"module\"` (ESM imports only) then [`\"main\"`](https://nodejs.org/api/packages.html#main).\n\n```json#package.json\n{\n  \"name\": \"foo\",\n  \"module\": \"./index.js\",\n  \"main\": \"./index.js\"\n}\n```\n\n## Path re-mapping\n\nIn the spirit of treating TypeScript as a first-class citizen, the Bun runtime will re-map import paths according to the [`compilerOptions.paths`](https://www.typescriptlang.org/tsconfig#paths) field in `tsconfig.json`. This is a major divergence from Node.js, which doesn't support any form of import path re-mapping.\n\n```jsonc#tsconfig.json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"config\": [\"./config.ts\"],         // map specifier to file\n      \"components/*\": [\"components/*\"],  // wildcard matching\n    }\n  }\n}\n```\n\nIf you aren't a TypeScript user, you can create a [`jsconfig.json`](https://code.visualstudio.com/docs/languages/jsconfig) in your project root to achieve the same behavior.\n\n## CommonJS\n\nBun has native support for CommonJS modules (added in Bun v0.6.5). ES Modules are the recommended module format, but CommonJS modules are still widely used in the Node.js ecosystem. Bun supports both module formats, so that existing CommonJS packages can be used.\n\nIn Bun's JavaScript runtime, `require` can be used by both ES Modules and CommonJS modules.\n\nIn Bun, you can `require()` ESM modules from CommonJS modules.\n\n| Module Type | `require()`      | `import * as`                                                           |\n| ----------- | ---------------- | ----------------------------------------------------------------------- |\n| ES Module   | Module Namespace | Module Namespace                                                        |\n| CommonJS    | module.exports   | `default` is `module.exports`, keys of module.exports are named exports |\n\nIf the target module is an ES Module, `require` returns the module namespace object (equivalent to `import * as`).\nIf the target module is a CommonJS module, `require` returns the `module.exports` object.\n\n### What is a CommonJS module?\n\nIn 2016, ECMAScript added support for [ES Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules). ES Modules are the standard for JavaScript modules. However, millions of npm packages still use CommonJS modules.\n\nCommonJS modules are modules that use `module.exports` to export values. Typically, `require` is used to import CommonJS modules.\n\n```ts\n// my-commonjs.cjs\nconst stuff = require(\"./stuff\");\nmodule.exports = { stuff };\n```\n\nThe biggest difference between CommonJS and ES Modules is that CommonJS modules are synchronous, while ES Modules are asynchronous. There are other differences too, like ES Modules support top-level `await` and CommonJS modules don't. ES Modules are always in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), while CommonJS modules are not. Browsers do not have native support for CommonJS modules, but they do have native support for ES Modules (`<script type=\"module\">`). CommonJS modules are not statically analyzable, while ES Modules only allow static imports and exports.\n\n### Importing CommonJS from ESM\n\nYou can `import` or `require` CommonJS modules from ESM modules.\n\n```ts\nimport { stuff } from \"./my-commonjs.cjs\";\nimport Stuff from \"./my-commonjs.cjs\";\nconst myStuff = require(\"./my-commonjs.cjs\");\n```\n\n### Importing ESM from CommonJS\n\n```ts\n// this works in Bun v0.6.5+\n// It does not work in Node.js\nconst { stuff } = require(\"./my-esm.mjs\");\n```\n\n### Importing CommonJS from CommonJS\n\nYou can `require()` CommonJS modules from CommonJS modules.\n\n```ts\nconst { stuff } = require(\"./my-commonjs.cjs\");\n```\n\n#### Top-level await\n\nIf you are using top-level await, you must use `import()` to import ESM modules from CommonJS modules.\n\n```ts\nimport(\"./my-esm.js\").then(({ stuff }) => {\n  // ...\n});\n\n// this will throw an error if \"my-esm.js\" uses top-level await\nconst { stuff } = require(\"./my-esm.js\");\n```\n\n#### Low-level details of CommonJS interop in Bun\n\nBun's JavaScript runtime has native support for CommonJS as of Bun v0.6.5.\n\nWhen Bun's JavaScript transpiler detects usages of `module.exports`, it treats the file as CommonJS. The module loader will then wrap the transpiled module in a function shaped like this:\n\n```js\n(function (module, exports, require) {\n  // transpiled module\n})(module, exports, require);\n```\n\n`module`, `exports`, and `require` are very much like the `module`, `exports`, and `require` in Node.js. These are assigned via a [`with scope`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) in C++. An internal `Map` stores the `exports` object to handle cyclical `require` calls before the module is fully loaded.\n\nOnce the CommonJS module is successfully evaluated, a Synthetic Module Record is created with the `default` ES Module [export set to `module.exports`](https://github.com/oven-sh/bun/blob/9b6913e1a674ceb7f670f917fc355bb8758c6c72/src/bun.js/bindings/CommonJSModuleRecord.cpp#L212-L213) and keys of the `module.exports` object are re-exported as named exports (if the `module.exports` object is an object).\n\nWhen using Bun's bundler, this works differently. The bundler will wrap the CommonJS module in a `require_${moduleName}` function which returns the `module.exports` object.\n"}
{"filename": "docs/runtime/nodejs-apis.md", "content": "Bun aims for complete Node.js API compatibility. Most `npm` packages intended for `Node.js` environments will work with Bun out of the box; the best way to know for certain is to try it.\n\nThis page is updated regularly to reflect compatibility status of the latest version of Bun. If you run into any bugs with a particular package, please [open an issue](https://bun.sh/issues). Opening issues for compatibility bugs helps us prioritize what to work on next.\n\n## Built-in modules\n\n### [`node:assert`](https://nodejs.org/api/assert.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:async_hooks`](https://nodejs.org/api/async_hooks.html)\n\n\ud83d\udfe1 Only `AsyncLocalStorage`, and `AsyncResource` are implemented.\n\n### [`node:buffer`](https://nodejs.org/api/buffer.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:child_process`](https://nodejs.org/api/child_process.html)\n\n\ud83d\udfe1 Missing IPC, `Stream` stdio, `proc.gid`, `proc.uid`, advanced serialization.\n\n### [`node:cluster`](https://nodejs.org/api/cluster.html)\n\n\ud83d\udd34 Not implemented.\n\n### [`node:console`](https://nodejs.org/api/console.html)\n\n\ud83d\udfe2 Recommended to use `console` global instead\n\n### [`node:crypto`](https://nodejs.org/api/crypto.html)\n\n\ud83d\udfe1 Missing `crypto.Certificate` `crypto.ECDH` `crypto.KeyObject` `crypto.X509Certificate` `crypto.checkPrime{Sync}` `crypto.createPrivateKey` `crypto.createPublicKey` `crypto.createSecretKey` `crypto.diffieHellman` `crypto.generateKey{Sync}` `crypto.generateKeyPair{Sync}` `crypto.generatePrime{Sync}` `crypto.getCipherInfo` `crypto.{get|set}Fips` `crypto.hkdf` `crypto.hkdfSync` `crypto.secureHeapUsed` `crypto.setEngine` `crypto.sign` `crypto.verify`. Some methods are not optimized yet.\n\n### [`node:dgram`](https://nodejs.org/api/dgram.html)\n\n\ud83d\udd34 Not implemented.\n\n### [`node:diagnostics_channel`](https://nodejs.org/api/diagnostics_channel.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:dns`](https://nodejs.org/api/dns.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:domain`](https://nodejs.org/api/domain.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:events`](https://nodejs.org/api/events.html)\n\n\ud83d\udfe1 Missing `on`\n\n### [`node:fs`](https://nodejs.org/api/fs.html)\n\n\ud83d\udfe1 Missing `fs.fdatasync{Sync}` `fs.opendir{Sync}` `fs.{watchFile|unwatchFile}` `fs.{cp|cpSync}`. `fs.promises.open` incorrectly returns a file descriptor instead of a `FileHandle`.\n\n### [`node:http`](https://nodejs.org/api/http.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:http2`](https://nodejs.org/api/http2.html)\n\n\ud83d\udd34 Not implemented.\n\n### [`node:https`](https://nodejs.org/api/https.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:inspector`](https://nodejs.org/api/inspector.html)\n\n\ud83d\udd34 Not implemented.\n\n### [`node:module`](https://nodejs.org/api/module.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:net`](https://nodejs.org/api/net.html)\n\n\ud83d\udfe1 Missing `net.{get|set}DefaultAutoSelectFamily` `net.SocketAddress` `net.BlockList`.\n\n### [`node:os`](https://nodejs.org/api/os.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:path`](https://nodejs.org/api/path.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:perf_hooks`](https://nodejs.org/api/perf_hooks.html)\n\n\ud83d\udfe1 Only `perf_hooks.performance.now()` and `perf_hooks.performance.timeOrigin` are implemented. Recommended to use `performance` global instead of `perf_hooks.performance`.\n\n### [`node:process`](https://nodejs.org/api/process.html)\n\n\ud83d\udfe1 See `Globals > process`.\n\n### [`node:punycode`](https://nodejs.org/api/punycode.html)\n\n\ud83d\udfe2 Fully implemented. _Deprecated by Node.js._\n\n### [`node:querystring`](https://nodejs.org/api/querystring.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:readline`](https://nodejs.org/api/readline.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:repl`](https://nodejs.org/api/repl.html)\n\n\ud83d\udd34 Not implemented.\n\n### [`node:stream`](https://nodejs.org/api/stream.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:string_decoder`](https://nodejs.org/api/string_decoder.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:sys`](https://nodejs.org/api/util.html)\n\n\ud83d\udfe1 See `node:util`.\n\n### [`node:timers`](https://nodejs.org/api/timers.html)\n\n\ud83d\udfe2 Recommended to use global `setTimeout`, et. al. instead.\n\n### [`node:tls`](https://nodejs.org/api/tls.html)\n\n\ud83d\udfe1 Missing `tls.createSecurePair`\n\n### [`node:trace_events`](https://nodejs.org/api/tracing.html)\n\n\ud83d\udd34 Not implemented.\n\n### [`node:tty`](https://nodejs.org/api/tty.html)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`node:url`](https://nodejs.org/api/url.html)\n\n\ud83d\udfe1 Missing `url.domainTo{ASCII|Unicode}`. Recommended to use `URL` and `URLSearchParams` globals instead.\n\n### [`node:util`](https://nodejs.org/api/util.html)\n\n\ud83d\udfe1 Missing `util.MIMEParams` `util.MIMEType` `util.formatWithOptions()` `util.getSystemErrorMap()` `util.getSystemErrorName()` `util.parseArgs()` `util.stripVTControlCharacters()` `util.transferableAbortController()` `util.transferableAbortSignal()`.\n\n### [`node:v8`](https://nodejs.org/api/v8.html)\n\n\ud83d\udd34 `serialize` and `deserialize` use JavaScriptCore's wire format instead of V8's. Otherwise, not implemented. For profiling, use [`bun:jsc`](/docs/project/benchmarking#bunjsc) instead.\n\n### [`node:vm`](https://nodejs.org/api/vm.html)\n\n\ud83d\udfe1 Core functionality works, but VM modules are not implemented. `ShadowRealm` can be used.\n\n### [`node:wasi`](https://nodejs.org/api/wasi.html)\n\n\ud83d\udfe1 Partially implemented.\n\n### [`node:worker_threads`](https://nodejs.org/api/worker_threads.html)\n\n\ud83d\udfe1 `Worker` doesn't support the following options: `eval`, `argv`, `execArgv`, `stdin`, `stdout`, `stderr`, `trackedUnmanagedFds`, `resourceLimits`. Missing `markAsUntransferable`, `moveMessagePortToContext`, `getHeapSnapshot`.\n\n### [`node:zlib`](https://nodejs.org/api/zlib.html)\n\n\ud83d\udfe1 Missing `zlib.brotli*`. Some methods are not optimized.\n\n<!-- {% block className=\"ScrollFrame\" %}\n{% table %}\n\n- Module\n- Status\n- Notes\n\n---\n\n- {% anchor id=\"node_assert\" %} [`node:assert`](https://nodejs.org/api/assert.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_async_hooks\" %} [`node:async_hooks`](https://nodejs.org/api/async_hooks.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_buffer\" %} [`node:buffer`](https://nodejs.org/api/buffer.html) {% /anchor %}\n- \ud83d\udfe2\n\n---\n\n- {% anchor id=\"node_child_process\" %} [`node:child_process`](https://nodejs.org/api/child_process.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing IPC, `Stream` stdio, `proc.gid`, `proc.uid`, advanced serialization.\n\n---\n\n- {% anchor id=\"node_cluster\" %} [`node:cluster`](https://nodejs.org/api/cluster.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_console\" %} [`node:console`](https://nodejs.org/api/console.html) {% /anchor %}\n- \ud83d\udfe2\n- Recommended to use `console` global instead\n\n---\n\n- {% anchor id=\"node_crypto\" %} [`node:crypto`](https://nodejs.org/api/crypto.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `crypto.Certificate` `crypto.ECDH` `crypto.KeyObject` `crypto.X509Certificate` `crypto.checkPrime{Sync}` `crypto.createPrivateKey` `crypto.createPublicKey` `crypto.createSecretKey` `crypto.diffieHellman` `crypto.generateKey{Sync}` `crypto.generateKeyPair{Sync}` `crypto.generatePrime{Sync}` `crypto.getCipherInfo` `crypto.{get|set}Fips` `crypto.hkdf` `crypto.hkdfSync` `crypto.secureHeapUsed` `crypto.setEngine` `crypto.sign` `crypto.verify`. Some methods are not optimized yet.\n\n---\n\n- {% anchor id=\"node_dgram\" %} [`node:dgram`](https://nodejs.org/api/dgram.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_diagnostics_channel\" %} [`node:diagnostics_channel`](https://nodejs.org/api/diagnostics_channel.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_dns\" %} [`node:dns`](https://nodejs.org/api/dns.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_domain\" %} [`node:domain`](https://nodejs.org/api/domain.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_events\" %} [`node:events`](https://nodejs.org/api/events.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `EventEmitterAsyncResource` `events.on`.\n\n---\n\n- {% anchor id=\"node_fs\" %} [`node:fs`](https://nodejs.org/api/fs.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `fs.fdatasync{Sync}` `fs.opendir{Sync}` `fs.{watchFile|unwatchFile}` `fs.{cp|cpSync}`. `fs.promises.open` incorrectly returns a file descriptor instead of a `FileHandle`.\n\n---\n\n- {% anchor id=\"node_http\" %} [`node:http`](https://nodejs.org/api/http.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_http2\" %} [`node:http2`](https://nodejs.org/api/http2.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_https\" %} [`node:https`](https://nodejs.org/api/https.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_inspector\" %} [`node:inspector`](https://nodejs.org/api/inspector.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_module\" %} [`node:module`](https://nodejs.org/api/module.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_net\" %} [`node:net`](https://nodejs.org/api/net.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `net.{get|set}DefaultAutoSelectFamily` `net.SocketAddress` `net.BlockList`.\n\n---\n\n- {% anchor id=\"node_os\" %} [`node:os`](https://nodejs.org/api/os.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_path\" %} [`node:path`](https://nodejs.org/api/path.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_perf_hooks\" %} [`node:perf_hooks`](https://nodejs.org/api/perf_hooks.html) {% /anchor %}\n- \ud83d\udfe1\n- Only `perf_hooks.performance.now()` and `perf_hooks.performance.timeOrigin` are implemented. Recommended to use `performance` global instead of `perf_hooks.performance`.\n\n---\n\n- {% anchor id=\"node_process\" %} [`node:process`](https://nodejs.org/api/process.html) {% /anchor %}\n- \ud83d\udfe1\n- See `Globals > process`.\n\n---\n\n- {% anchor id=\"node_punycode\" %} [`node:punycode`](https://nodejs.org/api/punycode.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented. _Deprecated by Node.js._\n\n---\n\n- {% anchor id=\"node_querystring\" %} [`node:querystring`](https://nodejs.org/api/querystring.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_readline\" %} [`node:readline`](https://nodejs.org/api/readline.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_repl\" %} [`node:repl`](https://nodejs.org/api/repl.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_stream\" %} [`node:stream`](https://nodejs.org/api/stream.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_string_decoder\" %} [`node:string_decoder`](https://nodejs.org/api/string_decoder.html) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_sys\" %} [`node:sys`](https://nodejs.org/api/util.html) {% /anchor %}\n- \ud83d\udfe1\n- See `node:util`.\n\n---\n\n- {% anchor id=\"node_timers\" %} [`node:timers`](https://nodejs.org/api/timers.html) {% /anchor %}\n- \ud83d\udfe2\n- Recommended to use global `setTimeout`, et. al. instead.\n\n---\n\n- {% anchor id=\"node_tls\" %} [`node:tls`](https://nodejs.org/api/tls.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `tls.createSecurePair`\n\n---\n\n- {% anchor id=\"node_trace_events\" %} [`node:trace_events`](https://nodejs.org/api/tracing.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_tty\" %} [`node:tty`](https://nodejs.org/api/tty.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `tty.ReadStream` and `tty.WriteStream`.\n\n---\n\n- {% anchor id=\"node_url\" %} [`node:url`](https://nodejs.org/api/url.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `url.domainTo{ASCII|Unicode}`. Recommended to use `URL` and `URLSearchParams` globals instead.\n\n---\n\n- {% anchor id=\"node_util\" %} [`node:util`](https://nodejs.org/api/util.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `util.MIMEParams` `util.MIMEType` `util.formatWithOptions()` `util.getSystemErrorMap()` `util.getSystemErrorName()` `util.parseArgs()` `util.stripVTControlCharacters()` `util.transferableAbortController()` `util.transferableAbortSignal()`.\n\n---\n\n- {% anchor id=\"node_v8\" %} [`node:v8`](https://nodejs.org/api/v8.html) {% /anchor %}\n- \ud83d\udd34\n- `serialize` and `deserialize` use JavaScriptCore's wire format instead of V8's. Otherwise, not implemented. For profiling, use [`bun:jsc`](/docs/project/benchmarking#bunjsc) instead.\n\n---\n\n- {% anchor id=\"node_vm\" %} [`node:vm`](https://nodejs.org/api/vm.html) {% /anchor %}\n- \ud83d\udfe1\n- Core functionality works, but VM modules are not implemented. `ShadowRealm` can be used.\n\n---\n\n- {% anchor id=\"node_wasi\" %} [`node:wasi`](https://nodejs.org/api/wasi.html) {% /anchor %}\n- \ud83d\udfe1\n- Partially implemented.\n\n---\n\n- {% anchor id=\"node_worker_threads\" %} [`node:worker_threads`](https://nodejs.org/api/worker_threads.html) {% /anchor %}\n- \ud83d\udd34\n- Not implemented, but coming soon.\n\n---\n\n- {% anchor id=\"node_zlib\" %} [`node:zlib`](https://nodejs.org/api/zlib.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `zlib.brotli*`\n\n{% /table %}\n{% /block %} -->\n\n## Globals\n\nThe table below lists all globals implemented by Node.js and Bun's current compatibility status.\n\n### [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`Buffer`](https://nodejs.org/api/buffer.html#class-buffer)\n\n\ud83d\udfe1 Incomplete implementation of `base64` and `base64url` encodings.\n\n### [`ByteLengthQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`__dirname`](https://nodejs.org/api/globals.html#__dirname)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`__filename`](https://nodejs.org/api/globals.html#__filename)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`atob()`](https://developer.mozilla.org/en-US/docs/Web/API/atob)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`BroadcastChannel`](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`btoa()`](https://developer.mozilla.org/en-US/docs/Web/API/btoa)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`clearImmediate()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`clearInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`clearTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`CompressionStream`](https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream)\n\n\ud83d\udd34 Not implemented.\n\n### [`console`](https://developer.mozilla.org/en-US/docs/Web/API/console)\n\n\ud83d\udfe1 Missing `Console` constructor.\n\n### [`CountQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`Crypto`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`SubtleCrypto (crypto)`](https://developer.mozilla.org/en-US/docs/Web/API/crypto)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`DecompressionStream`](https://developer.mozilla.org/en-US/docs/Web/API/DecompressionStream)\n\n\ud83d\udd34 Not implemented.\n\n### [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`exports`](https://nodejs.org/api/globals.html#exports)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n\n\ud83d\udfe2 Fully implemented. Added in Bun 0.5.7.\n\n### [`global`](https://nodejs.org/api/globals.html#global)\n\n\ud83d\udfe2 Implemented. This is an object containing all objects in the global namespace. It's rarely referenced directly, as its contents are available without an additional prefix, e.g. `__dirname` instead of `global.__dirname`.\n\n### [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis)\n\n\ud83d\udfe2 Aliases to `global`.\n\n### [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`MessageChannel`](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`MessageEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`MessagePort`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`module`](https://nodejs.org/api/globals.html#module)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`PerformanceEntry`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry)\n\n\ud83d\udd34 Not implemented.\n\n### [`PerformanceMark`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark)\n\n\ud83d\udd34 Not implemented.\n\n### [`PerformanceMeasure`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure)\n\n\ud83d\udd34 Not implemented.\n\n### [`PerformanceObserver`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver)\n\n\ud83d\udd34 Not implemented.\n\n### [`PerformanceObserverEntryList`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList)\n\n\ud83d\udd34 Not implemented.\n\n### [`PerformanceResourceTiming`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming)\n\n\ud83d\udd34 Not implemented.\n\n### [`performance`](https://developer.mozilla.org/en-US/docs/Web/API/performance)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`process`](https://nodejs.org/api/process.html)\n\n\ud83d\udfe1 Missing `process.allowedNodeEnvironmentFlags` `process.channel()` `process.connected` `process.constrainedMemory()` `process.disconnect()` `process.getActiveResourcesInfo/setActiveResourcesInfo()` `process.setuid/setgid/setegid/seteuid/setgroups()` `process.hasUncaughtExceptionCaptureCallback` `process.initGroups()` `process.report` `process.resourceUsage()` `process.send()`.\n\n### [`queueMicrotask()`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`ReadableByteStreamController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`ReadableStreamBYOBReader`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader)\n\n\ud83d\udd34 Not implemented.\n\n### [`ReadableStreamBYOBRequest`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBRequest)\n\n\ud83d\udd34 Not implemented.\n\n### [`ReadableStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`ReadableStreamDefaultReader`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`require()`](https://nodejs.org/api/globals.html#require)\n\n\ud83d\udfe2 Fully implemented, as well as [`require.main`](https://nodejs.org/api/modules.html#requiremain), [`require.cache`](https://nodejs.org/api/modules.html#requirecache), and [`require.resolve`](https://nodejs.org/api/modules.html#requireresolverequest-options)\n\n### [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`setImmediate()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`SubtleCrypto`](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`DOMException`](https://developer.mozilla.org/en-US/docs/Web/API/DOMException)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`TextDecoderStream`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream)\n\n\ud83d\udd34 Not implemented.\n\n### [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`TextEncoderStream`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoderStream)\n\n\ud83d\udd34 Not implemented.\n\n### [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`TransformStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStreamDefaultController)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`WebAssembly`](https://nodejs.org/api/globals.html#webassembly)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`WritableStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultController)\n\n\ud83d\udfe2 Fully implemented.\n\n### [`WritableStreamDefaultWriter`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter)\n\n\ud83d\udfe2 Fully implemented.\n\n<!-- {% table %}\n\n---\n\n- {% anchor id=\"node_abortcontroller\" %} [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_abortsignal\" %} [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_blob\" %} [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_buffer\" %} [`Buffer`](https://nodejs.org/api/buffer.html#class-buffer) {% /anchor %}\n- \ud83d\udfe1\n- Incomplete implementation of `base64` and `base64url` encodings.\n\n---\n\n- {% anchor id=\"node_bytelengthqueuingstrategy\" %} [`ByteLengthQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_dirname\" %} [`__dirname`](https://nodejs.org/api/globals.html#__dirname) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_filename\" %} [`__filename`](https://nodejs.org/api/globals.html#__filename) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_atob\" %} [`atob()`](https://developer.mozilla.org/en-US/docs/Web/API/atob) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_broadcastchannel\" %} [`BroadcastChannel`](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_btoa\" %} [`btoa()`](https://developer.mozilla.org/en-US/docs/Web/API/btoa) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_clearimmediate\" %} [`clearImmediate()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_clearinterval\" %} [`clearInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_cleartimeout\" %} [`clearTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_compressionstream\" %} [`CompressionStream`](https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_console\" %} [`console`](https://developer.mozilla.org/en-US/docs/Web/API/console) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_countqueuingstrategy\" %} [`CountQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_crypto\" %} [`Crypto`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_crypto\" %} [`SubtleCrypto (crypto)`](https://developer.mozilla.org/en-US/docs/Web/API/crypto) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_cryptokey\" %} [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_customevent\" %} [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_decompressionstream\" %} [`DecompressionStream`](https://developer.mozilla.org/en-US/docs/Web/API/DecompressionStream) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_event\" %} [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_eventtarget\" %} [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_exports\" %} [`exports`](https://nodejs.org/api/globals.html#exports) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_fetch\" %} [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_formdata\" %} [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented. Added in Bun 0.5.7.\n\n---\n\n- {% anchor id=\"node_global\" %} [`global`](https://nodejs.org/api/globals.html#global) {% /anchor %}\n- \ud83d\udfe2\n- Implemented. This is an object containing all objects in the global namespace. It's rarely referenced directly, as its contents are available without an additional prefix, e.g. `__dirname` instead of `global.__dirname`.\n\n---\n\n- {% anchor id=\"node_globalthis\" %} [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) {% /anchor %}\n- \ud83d\udfe2\n- Aliases to `global`.\n\n---\n\n- {% anchor id=\"node_headers\" %} [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_messagechannel\" %} [`MessageChannel`](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_messageevent\" %} [`MessageEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_messageport\" %} [`MessagePort`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_module\" %} [`module`](https://nodejs.org/api/globals.html#module) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_performanceentry\" %} [`PerformanceEntry`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_performancemark\" %} [`PerformanceMark`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_performancemeasure\" %} [`PerformanceMeasure`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_performanceobserver\" %} [`PerformanceObserver`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_performanceobserverentrylist\" %} [`PerformanceObserverEntryList`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_performanceresourcetiming\" %} [`PerformanceResourceTiming`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_performance\" %} [`performance`](https://developer.mozilla.org/en-US/docs/Web/API/performance) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_process\" %} [`process`](https://nodejs.org/api/process.html) {% /anchor %}\n- \ud83d\udfe1\n- Missing `process.allowedNodeEnvironmentFlags` `process.channel()` `process.connected` `process.constrainedMemory()` `process.disconnect()` `process.getActiveResourcesInfo/setActiveResourcesInfo()` `process.setuid/setgid/setegid/seteuid/setgroups()` `process.hasUncaughtExceptionCaptureCallback` `process.initGroups()` `process.report` `process.resourceUsage()` `process.send()`.\n\n---\n\n- {% anchor id=\"node_queuemicrotask\" %} [`queueMicrotask()`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_readablebytestreamcontroller\" %} [`ReadableByteStreamController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_readablestream\" %} [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_readablestreambyobreader\" %} [`ReadableStreamBYOBReader`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_readablestreambyobrequest\" %} [`ReadableStreamBYOBRequest`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBRequest) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_readablestreamdefaultcontroller\" %} [`ReadableStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_readablestreamdefaultreader\" %} [`ReadableStreamDefaultReader`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_require\" %} [`require()`](https://nodejs.org/api/globals.html#require) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented, as well as [`require.main`](https://nodejs.org/api/modules.html#requiremain), [`require.cache`](https://nodejs.org/api/modules.html#requirecache), and [`require.resolve`](https://nodejs.org/api/modules.html#requireresolverequest-options)\n\n---\n\n- {% anchor id=\"node_response\" %} [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_request\" %} [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_setimmediate\" %} [`setImmediate()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_setinterval\" %} [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_settimeout\" %} [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_structuredclone\" %} [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_subtlecrypto\" %} [`SubtleCrypto`](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_domexception\" %} [`DOMException`](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_textdecoder\" %} [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_textdecoderstream\" %} [`TextDecoderStream`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_textencoder\" %} [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_textencoderstream\" %} [`TextEncoderStream`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoderStream) {% /anchor %}\n- \ud83d\udd34\n- Not implemented.\n\n---\n\n- {% anchor id=\"node_transformstream\" %} [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_transformstreamdefaultcontroller\" %} [`TransformStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStreamDefaultController) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_url\" %} [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_urlsearchparams\" %} [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_webassembly\" %} [`WebAssembly`](https://nodejs.org/api/globals.html#webassembly) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_writablestream\" %} [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_writablestreamdefaultcontroller\" %} [`WritableStreamDefaultController`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultController) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n---\n\n- {% anchor id=\"node_writablestreamdefaultwriter\" %} [`WritableStreamDefaultWriter`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter) {% /anchor %}\n- \ud83d\udfe2\n- Fully implemented.\n\n{% /table %} -->\n"}
{"filename": "docs/runtime/plugins.md", "content": "{% callout %}\n**Note** \u2014 Introduced in Bun v0.1.11.\n{% /callout %}\n\nBun provides a universal plugin API that can be used to extend both the _runtime_ and [_bundler_](/docs/bundler).\n\nPlugins intercept imports and perform custom loading logic: reading files, transpiling code, etc. They can be used to add support for additional file types, like `.scss` or `.yaml`. In the context of Bun's bundler, plugins can be used to implement framework-level features like CSS extraction, macros, and client-server code co-location.\n\n## Usage\n\nA plugin is defined as simple JavaScript object containing a `name` property and a `setup` function. Register a plugin with Bun using the `plugin` function.\n\n```tsx#myPlugin.ts\nimport { plugin, type BunPlugin } from \"bun\";\n\nconst myPlugin: BunPlugin = {\n  name: \"Custom loader\",\n  setup(build) {\n    // implementation\n  },\n};\n```\n\nPlugins have to be registered before any other code runs! To achieve this, use the `preload` option in your [`bunfig.toml`](/docs/runtime/configuration). Bun automatically loads the files/modules specified in `preload` before running a file.\n\n```toml\npreload = [\"./myPlugin.ts\"]\n```\n\nTo preload files before `bun test`:\n\n```toml\n[test]\npreload = [\"./myPlugin.ts\"]\n```\n\n## Third-party plugins\n\nBy convention, third-party plugins intended for consumption should export a factory function that accepts some configuration and returns a plugin object.\n\n```ts\nimport { plugin } from \"bun\";\nimport fooPlugin from \"bun-plugin-foo\";\n\nplugin(\n  fooPlugin({\n    // configuration\n  }),\n);\n```\n\nBun's plugin API is based on [esbuild](https://esbuild.github.io/plugins). Only [a subset](/docs/bundler/vs-esbuild#plugin-api) of the esbuild API is implemented, but some esbuild plugins \"just work\" in Bun, like the official [MDX loader](https://mdxjs.com/packages/esbuild/):\n\n```jsx\nimport { plugin } from \"bun\";\nimport mdx from \"@mdx-js/esbuild\";\n\nplugin(mdx());\n```\n\n## Loaders\n\nPlugins are primarily used to extend Bun with loaders for additional file types. Let's look at a simple plugin that implements a loader for `.yaml` files.\n\n```ts#yamlPlugin.ts\nimport { plugin } from \"bun\";\n\nplugin({\n  name: \"YAML\",\n  async setup(build) {\n    const { load } = await import(\"js-yaml\");\n    const { readFileSync } = await import(\"fs\");\n\n    // when a .yaml file is imported...\n    build.onLoad({ filter: /\\.(yaml|yml)$/ }, (args) => {\n\n      // read and parse the file\n      const text = readFileSync(args.path, \"utf8\");\n      const exports = load(text) as Record<string, any>;\n\n      // and returns it as a module\n      return {\n        exports,\n        loader: \"object\", // special loader for JS objects\n      };\n    });\n  },\n});\n```\n\nWith this plugin, data can be directly imported from `.yaml` files.\n\n{% codetabs %}\n\n```ts#index.ts\nimport \"./yamlPlugin.ts\"\nimport {name, releaseYear} from \"./data.yml\"\n\nconsole.log(name, releaseYear);\n```\n\n```yaml#data.yml\nname: Fast X\nreleaseYear: 2023\n```\n\n{% /codetabs %}\n\nNote that the returned object has a `loader` property. This tells Bun which of its internal loaders should be used to handle the result. Even though we're implementing a loader for `.yaml`, the result must still be understandable by one of Bun's built-in loaders. It's loaders all the way down.\n\nIn this case we're using `\"object\"`\u2014a built-in loader (intended for use by plugins) that converts a plain JavaScript object to an equivalent ES module. Any of Bun's built-in loaders are supported; these same loaders are used by Bun internally for handling files of various kinds. The table below is a quick reference; refer to [Bundler > Loaders](/docs/bundler/loaders) for complete documentation.\n\n{% table %}\n\n- Loader\n- Extensions\n- Output\n\n---\n\n- `js`\n- `.mjs` `.cjs`\n- Transpile to JavaScript files\n\n---\n\n- `jsx`\n- `.js` `.jsx`\n- Transform JSX then transpile\n\n---\n\n- `ts`\n- `.ts` `.mts` `cts`\n- Transform TypeScript then transpile\n\n---\n\n- `tsx`\n- `.tsx`\n- Transform TypeScript, JSX, then transpile\n\n---\n\n- `toml`\n- `.toml`\n- Parse using Bun's built-in TOML parser\n\n---\n\n- `json`\n- `.json`\n- Parse using Bun's built-in JSON parser\n\n---\n\n- `napi`\n- `.node`\n- Import a native Node.js addon\n\n---\n\n- `wasm`\n- `.wasm`\n- Import a native Node.js addon\n\n---\n\n- `object`\n- _none_\n- A special loader intended for plugins that converts a plain JavaScript object to an equivalent ES module. Each key in the object corresponds to a named export.\n\n{% /callout %}\n\nLoading a YAML file is useful, but plugins support more than just data loading. Let's look at a plugin that lets Bun import `*.svelte` files.\n\n```ts#sveltePlugin.ts\nimport { plugin } from \"bun\";\n\nawait plugin({\n  name: \"svelte loader\",\n  async setup(build) {\n    const { compile } = await import(\"svelte/compiler\");\n    const { readFileSync } = await import(\"fs\");\n\n    // when a .svelte file is imported...\n    build.onLoad({ filter: /\\.svelte$/ }, ({ path }) => {\n\n      // read and compile it with the Svelte compiler\n      const file = readFileSync(path, \"utf8\");\n      const contents = compile(file, {\n        filename: path,\n        generate: \"ssr\",\n      }).js.code;\n\n      // and return the compiled source code as \"js\"\n      return {\n        contents,\n        loader: \"js\",\n      };\n    });\n  },\n});\n```\n\n> Note: in a production implementation, you'd want to cache the compiled output and include additional error handling.\n\nThe object returned from `build.onLoad` contains the compiled source code in `contents` and specifies `\"js\"` as its loader. That tells Bun to consider the returned `contents` to be a JavaScript module and transpile it using Bun's built-in `js` loader.\n\nWith this plugin, Svelte components can now be directly imported and consumed.\n\n```js\nimport \"./sveltePlugin.ts\";\nimport MySvelteComponent from \"./component.svelte\";\n\nconsole.log(mySvelteComponent.render());\n```\n\n## Reading the config\n\nPlugins can read and write to the [build config](/docs/bundler#api) with `build.config`.\n\n```ts\nBun.build({\n  entrypoints: [\"./app.ts\"],\n  outdir: \"./dist\",\n  sourcemap: \"external\",\n  plugins: [\n    {\n      name: \"demo\",\n      setup(build) {\n        console.log(build.config.sourcemap); // \"external\"\n\n        build.config.minify = true; // enable minification\n\n        // `plugins` is readonly\n        console.log(`Number of plugins: ${build.config.plugins.length}`);\n      },\n    },\n  ],\n});\n```\n\n## Reference\n\n```ts\nnamespace Bun {\n  function plugin(plugin: {\n    name: string;\n    setup: (build: PluginBuilder) => void;\n  }): void;\n}\n\ntype PluginBuilder = {\n  onResolve: (\n    args: { filter: RegExp; namespace?: string },\n    callback: (args: { path: string; importer: string }) => {\n      path: string;\n      namespace?: string;\n    } | void,\n  ) => void;\n  onLoad: (\n    args: { filter: RegExp; namespace?: string },\n    callback: (args: { path: string }) => {\n      loader?: Loader;\n      contents?: string;\n      exports?: Record<string, any>;\n    },\n  ) => void;\n  config: BuildConfig;\n};\n\ntype Loader = \"js\" | \"jsx\" | \"ts\" | \"tsx\" | \"json\" | \"toml\" | \"object\";\n```\n\nThe `onLoad` method optionally accepts a `namespace` in addition to the `filter` regex. This namespace will be be used to prefix the import in transpiled code; for instance, a loader with a `filter: /\\.yaml$/` and `namespace: \"yaml:\"` will transform an import from `./myfile.yaml` into `yaml:./myfile.yaml`.\n"}
{"filename": "docs/runtime/typescript.md", "content": "Bun treats TypeScript as a first-class citizen.\n\n## Running `.ts` files\n\nBun can directly execute `.ts` and `.tsx` files just like vanilla JavaScript, with no extra configuration. If you import a `.ts` or `.tsx` file (or an `npm` module that exports these files), Bun internally transpiles it into JavaScript then executes the file.\n\n**Note** \u2014 Similar to other build tools, Bun does not typecheck the files. Use [`tsc`](https://www.typescriptlang.org/docs/handbook/compiler-options.html) (the official TypeScript CLI) if you're looking to catch static type errors.\n\n{% callout %}\n\n**Is transpiling still necessary?** \u2014 Because Bun can directly execute TypeScript, you may not need to transpile your TypeScript to run in production. Bun internally transpiles every file it executes (both `.js` and `.ts`), so the additional overhead of directly executing your `.ts/.tsx` source files is negligible.\n\nThat said, if you are using Bun as a development tool but still targeting Node.js or browsers in production, you'll still need to transpile.\n\n{% /callout %}\n\n## Configuring `tsconfig.json`\n\nBun supports a number of features that TypeScript doesn't support by default, such as extensioned imports, top-level await, and `exports` conditions. It also implements global APIs like the `Bun`. To enable these features, your `tsconfig.json` must be configured properly.\n\n{% callout %}\nIf you initialized your project with `bun init`, everything is already configured properly.\n{% /callout %}\n\nTo get started, install the `bun-types` package.\n\n```sh\n$ bun add -d bun-types # dev dependency\n```\n\nIf you're using a canary build of Bun, use the `canary` tag. The canary package is updated on every commit to the `main` branch.\n\n```sh\n$ bun add -d bun-types@canary\n```\n\n<!-- ### Quick setup\n\n{% callout %}\n\n**Note**\u00a0\u2014\u00a0This approach requires TypeScript 5.0 or later!\n\n{% /callout %}\n\nAdd the following to your `tsconfig.json`.\n\n```json-diff\n  {\n+   \"extends\": [\"bun-types\"]\n    // other options...\n  }\n```\n\n{% callout %}\n**Note** \u2014 The `\"extends\"` field in your `tsconfig.json` can accept an array of values. If you're already using `\"extends\"`, just add `\"bun-types\"` to the array.\n{% /callout %}\n\nThat's it! You should be able to use Bun's full feature set without seeing any TypeScript compiler errors.\n\n### Manual setup -->\n\n### Recommended `compilerOptions`\n\nThese are the recommended `compilerOptions` for a Bun project.\n\n```jsonc\n{\n  \"compilerOptions\": {\n    // add Bun type definitions\n    \"types\": [\"bun-types\"],\n\n    // enable latest features\n    \"lib\": [\"esnext\"],\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n\n    // if TS 5.x+\n    \"moduleResolution\": \"bundler\",\n    \"noEmit\": true,\n    \"allowImportingTsExtensions\": true,\n    \"moduleDetection\": \"force\",\n    // if TS 4.x or earlier\n    \"moduleResolution\": \"nodenext\",\n\n    \"jsx\": \"react-jsx\", // support JSX\n    \"allowJs\": true, // allow importing `.js` from `.ts`\n    \"esModuleInterop\": true, // allow default imports for CommonJS modules\n\n    // best practices\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"skipLibCheck\": true\n  }\n}\n```\n\n### Add DOM types\n\nSettings `\"types\": [\"bun-types\"]` means TypeScript will ignore other global type definitions, including `lib: [\"dom\"]`. To add DOM types into your project, add the following [triple-slash directives](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html) at the top of any TypeScript file in your project.\n\n```ts\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n```\n\nThe same applies to other global type definition _libs_ like `webworker`.\n\n## Path mapping\n\nWhen resolving modules, Bun's runtime respects path mappings defined in [`compilerOptions.paths`](https://www.typescriptlang.org/tsconfig#paths) in your `tsconfig.json`. No other runtime does this.\n\nGiven the following `tsconfig.json`...\n\n```json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"data\": [\"./data.ts\"]\n    }\n  }\n}\n```\n\n...the import from `\"data\"` will work as expected.\n\n{% codetabs %}\n\n```ts#index.ts\nimport { foo } from \"data\";\nconsole.log(foo); // => \"Hello world!\"\n```\n\n```ts#data.ts\nexport const foo = \"Hello world!\"\n```\n\n{% /codetabs %}\n"}
{"filename": "docs/runtime/web-apis.md", "content": "Some Web APIs aren't relevant in the context of a server-first runtime like Bun, such as the [DOM API](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API#html_dom_api_interfaces) or [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API). Many others, though, are broadly useful outside of the browser context; when possible, Bun implements these Web-standard APIs instead of introducing new APIs.\n\nThe following Web APIs are partially or completely supported.\n\n{% table %}\n\n---\n\n- HTTP\n- [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n\n---\n\n- URLs\n- [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\n---\n\n- Web Workers\n- [`Worker`](https://developer.mozilla.org/en-US/docs/Web/API/Worker) [`self.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage) [`structuredClone`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) [`MessagePort`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) [`MessageChannel`](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel), [`BroadcastChannel`](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel).\n\n---\n\n- Streams\n- [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) [`TransformStream`](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream) [`ByteLengthQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy) [`CountQueuingStrategy`](https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy) and associated classes\n\n---\n\n- Blob\n- [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n\n---\n\n- WebSockets\n- [`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n\n---\n\n- Encoding and decoding\n- [`atob`](https://developer.mozilla.org/en-US/docs/Web/API/atob) [`btoa`](https://developer.mozilla.org/en-US/docs/Web/API/btoa) [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder)\n\n---\n\n- JSON\n- [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON)\n\n---\n\n- Timeouts\n- [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout)\n\n---\n\n- Intervals\n- [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval)[`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval)\n\n---\n\n- Crypto\n- [`crypto`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) [`SubtleCrypto`](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)\n  [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n\n---\n\n- Debugging\n\n- [`console`](https://developer.mozilla.org/en-US/docs/Web/API/console) [`performance`](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\n\n---\n\n- Microtasks\n- [`queueMicrotask`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask)\n\n---\n\n- Errors\n- [`reportError`](https://developer.mozilla.org/en-US/docs/Web/API/reportError)\n\n---\n\n- User interaction\n- [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert) [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm) [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) (intended for interactive CLIs)\n\n<!-- - Blocking. Prints the alert message to terminal and awaits `[ENTER]` before proceeding. -->\n<!-- - Blocking. Prints confirmation message and awaits `[y/N]` input from user. Returns `true` if user entered `y` or `Y`, `false` otherwise.\n- Blocking. Prints prompt message and awaits user input. Returns the user input as a string. -->\n\n---\n\n- Realms\n- [`ShadowRealm`](https://github.com/tc39/proposal-shadowrealm)\n\n---\n\n- Events\n- [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)\n  [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) [`ErrorEvent`](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent) [`CloseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent) [`MessageEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n\n---\n\n{% /table %}\n"}
{"filename": "docs/templates.md", "content": "## `bun init`\n\nScaffold an empty project with the interactive `bun init` command.\n\n```bash\n$ bun init\nbun init helps you get started with a minimal project and tries to\nguess sensible defaults. Press ^C anytime to quit.\n\npackage name (quickstart):\nentry point (index.ts):\n\nDone! A package.json file was saved in the current directory.\n + index.ts\n + .gitignore\n + tsconfig.json (for editor auto-complete)\n + README.md\n\nTo get started, run:\n  bun run index.ts\n```\n\nPress `enter` to accept the default answer for each prompt, or pass the `-y` flag to auto-accept the defaults.\n\n## `bun create`\n\nTemplate a new Bun project with `bun create`.\n\n```bash\n$ bun create <template> <destination>\n```\n\n{% callout %}\n**Note** \u2014\u00a0You don\u2019t need `bun create` to use Bun. You don\u2019t need any configuration at all. This command exists to make getting started a bit quicker and easier.\n{% /callout %}\n\nA template can take a number of forms:\n\n```bash\n$ bun create <template>         # an official template (remote)\n$ bun create <username>/<repo>  # a GitHub repo (remote)\n$ bun create <local-template>   # a custom template (local)\n```\n\nRunning `bun create` performs the following steps:\n\n- Download the template (remote templates only)\n- Copy all template files into the destination folder. By default Bun will _not overwrite_ any existing files. Use the `--force` flag to overwrite existing files.\n- Install dependencies with `bun install`.\n- Initialize a fresh Git repo. Opt out with the `--no-git` flag.\n- Run the template's configured `start` script, if defined.\n\n### Official templates\n\nThe following official templates are available.\n\n```bash\nbun create next ./myapp\nbun create react ./myapp\nbun create svelte-kit ./myapp\nbun create elysia ./myapp\nbun create hono ./myapp\nbun create kingworld ./myapp\n```\n\nEach of these corresponds to a directory in the [bun-community/create-templates](https://github.com/bun-community/create-templates) repo. If you think a major framework is missing, please open a PR there. This list will change over time as additional examples are added. To see an up-to-date list, run `bun create` with no arguments.\n\n```bash\n$ bun create\nWelcome to bun! Create a new project by pasting any of the following:\n  <list of templates>\n```\n\n{% callout %}\n\u26a1\ufe0f **Speed** \u2014 At the time of writing, `bun create react app` runs ~11x faster on a M1 Macbook Pro than `yarn create react-app app`.\n{% /callout %}\n\n### GitHub repos\n\nA template of the form `<username>/<repo>` will be downloaded from GitHub.\n\n```bash\n$ bun create ahfarmer/calculator ./myapp\n```\n\nComplete GitHub URLs will also work:\n\n```bash\n$ bun create github.com/ahfarmer/calculator ./myapp\n$ bun create https://github.com/ahfarmer/calculator ./myapp\n```\n\nBun installs the files as they currently exist current default branch (usually `main` or `master`). Unlike `git clone` it doesn't download the commit history or configure a remote.\n\n### Local templates\n\n{% callout %}\n**\u26a0\ufe0f Warning** \u2014 Unlike remote templates, running `bun create` with a local template will delete the entire destination folder if it already exists! Be careful.\n{% /callout %}\nBun's templater can be extended to support custom templates defined on your local file system. These templates should live in one of the following directories:\n\n- `$HOME/.bun-create/<name>`: global templates\n- `<project root>/.bun-create/<name>`: project-specific templates\n\n{% callout %}\n**Note** \u2014 You can customize the global template path by setting the `BUN_CREATE_DIR` environment variable.\n{% /callout %}\n\nTo create a local template, navigate to `$HOME/.bun-create` and create a new directory with the desired name of your template.\n\n```bash\n$ cd $HOME/.bun-create\n$ mkdir foo\n$ cd foo\n```\n\nThen, create a `package.json` file in that directory with the following contents:\n\n```json\n{\n  \"name\": \"foo\"\n}\n```\n\nYou can run `bun create foo` elsewhere on your file system to verify that Bun is correctly finding your local template.\n\n{% table %}\n\n---\n\n- `postinstall`\n- runs after installing dependencies\n\n---\n\n- `preinstall`\n- runs before installing dependencies\n\n<!-- ---\n\n- `start`\n- a command to auto-start the application -->\n\n{% /table %}\n\nEach of these can correspond to a string or array of strings. An array of commands will be executed in order. Here is an example:\n\n```json\n{\n  \"name\": \"@bun-examples/simplereact\",\n  \"version\": \"0.0.1\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\"\n  },\n  \"bun-create\": {\n    \"preinstall\": \"echo 'Installing...'\", // a single command\n    \"postinstall\": [\"echo 'Done!'\"], // an array of commands\n    \"start\": \"bun run echo 'Hello world!'\"\n  }\n}\n```\n\nWhen cloning a template, `bun create` will automatically remove the `\"bun-create\"` section from `package.json` before writing it to the destination folder.\n\n### Reference\n\n#### CLI flags\n\n{% table %}\n\n- Flag\n- Description\n\n---\n\n- `--force`\n- Overwrite existing files\n\n---\n\n- `--no-install`\n- Skip installing `node_modules` & tasks\n\n---\n\n- `--no-git`\n- Don\u2019t initialize a git repository\n\n---\n\n- `--open`\n- Start & open in-browser after finish\n\n{% /table %}\n\n#### Environment variables\n\n{% table %}\n\n- Name\n- Description\n\n---\n\n- `GITHUB_API_DOMAIN`\n- If you\u2019re using a GitHub enterprise or a proxy, you can customize the GitHub domain Bun pings for downloads\n\n---\n\n- `GITHUB_API_TOKEN`\n- This lets `bun create` work with private repositories or if you get rate-limited\n\n{% /table %}\n\n{% details summary=\"How `bun create` works\" %}\n\nWhen you run `bun create ${template} ${destination}`, here\u2019s what happens:\n\nIF remote template\n\n1. GET `registry.npmjs.org/@bun-examples/${template}/latest` and parse it\n2. GET `registry.npmjs.org/@bun-examples/${template}/-/${template}-${latestVersion}.tgz`\n3. Decompress & extract `${template}-${latestVersion}.tgz` into `${destination}`\n\n   - If there are files that would overwrite, warn and exit unless `--force` is passed\n\nIF GitHub repo\n\n1. Download the tarball from GitHub\u2019s API\n2. Decompress & extract into `${destination}`\n\n   - If there are files that would overwrite, warn and exit unless `--force` is passed\n\nELSE IF local template\n\n1. Open local template folder\n2. Delete destination directory recursively\n3. Copy files recursively using the fastest system calls available (on macOS `fcopyfile` and Linux, `copy_file_range`). Do not copy or traverse into `node_modules` folder if exists (this alone makes it faster than `cp`)\n\n4. Parse the `package.json` (again!), update `name` to be `${basename(destination)}`, remove the `bun-create` section from the `package.json` and save the updated `package.json` to disk.\n   - IF Next.js is detected, add `bun-framework-next` to the list of dependencies\n   - IF Create React App is detected, add the entry point in /src/index.{js,jsx,ts,tsx} to `public/index.html`\n   - IF Relay is detected, add `bun-macro-relay` so that Relay works\n5. Auto-detect the npm client, preferring `pnpm`, `yarn` (v1), and lastly `npm`\n6. Run any tasks defined in `\"bun-create\": { \"preinstall\" }` with the npm client\n7. Run `${npmClient} install` unless `--no-install` is passed OR no dependencies are in package.json\n8. Run any tasks defined in `\"bun-create\": { \"preinstall\" }` with the npm client\n9. Run `git init; git add -A .; git commit -am \"Initial Commit\";`\n\n   - Rename `gitignore` to `.gitignore`. NPM automatically removes `.gitignore` files from appearing in packages.\n   - If there are dependencies, this runs in a separate thread concurrently while node_modules are being installed\n   - Using libgit2 if available was tested and performed 3x slower in microbenchmarks\n\n{% /details %}\n"}
{"filename": "docs/test/coverage.md", "content": "Bun's test runner now supports built-in _code coverage reporting_. This makes it easy to see how much of the codebase is covered by tests, and find areas that are not currently well-tested.\n\n## Enabling coverage\n\n`bun:test` supports seeing which lines of code are covered by tests. To use this feature, pass `--coverage` to the CLI. It will print out a coverage report to the console:\n\n```js\n$ bun test --coverage\n-------------|---------|---------|-------------------\nFile         | % Funcs | % Lines | Uncovered Line #s\n-------------|---------|---------|-------------------\nAll files    |   38.89 |   42.11 |\n index-0.ts  |   33.33 |   36.84 | 10-15,19-24\n index-1.ts  |   33.33 |   36.84 | 10-15,19-24\n index-10.ts |   33.33 |   36.84 | 10-15,19-24\n index-2.ts  |   33.33 |   36.84 | 10-15,19-24\n index-3.ts  |   33.33 |   36.84 | 10-15,19-24\n index-4.ts  |   33.33 |   36.84 | 10-15,19-24\n index-5.ts  |   33.33 |   36.84 | 10-15,19-24\n index-6.ts  |   33.33 |   36.84 | 10-15,19-24\n index-7.ts  |   33.33 |   36.84 | 10-15,19-24\n index-8.ts  |   33.33 |   36.84 | 10-15,19-24\n index-9.ts  |   33.33 |   36.84 | 10-15,19-24\n index.ts    |  100.00 |  100.00 |\n-------------|---------|---------|-------------------\n```\n\nTo always enable coverage reporting by default, add the following line to your `bunfig.toml`:\n\n```toml\n[test]\n\n# always enable coverage\ncoverage = true\n```\n\nBy default coverage reports will _include_ test files and _exclude_ sourcemaps. This is usually what you want, but it can be configured otherwise in `bunfig.toml`.\n\n```toml\n[test]\ncoverageSkipTestFiles = true       # default false\n```\n\n### Coverage thresholds\n\n{% callout %}\n**Note** \u2014 Support for coverage reporting was added in Bun v0.7.3.\n{% /callout %}\n\nIt is possible to specify a coverage threshold in `bunfig.toml`. If your test suite does not meet or exceed this threshold, `bun test` will exit with a non-zero exit code to indicate the failure.\n\n```toml\n[test]\n\n# to require 90% line-level and function-level coverage\ncoverageThreshold = 0.9\n\n# to set different thresholds for lines and functions\ncoverageThreshold = { line = 0.9, function = 0.9 }\n```\n\n### Sourcemaps\n\nInternally, Bun transpiles all files by default, so Bun automatically generates an internal [source map](https://web.dev/source-maps/) that maps lines of your original source code onto Bun's internal representation. If for any reason you want to disable this, set `test.coverageIgnoreSourcemaps` to `false`; this will rarely be desirable outside of advanced use cases.\n\n```toml\n[test]\ncoverageIgnoreSourcemaps = true   # default false\n```\n"}
{"filename": "docs/test/dom.md", "content": "Bun's test runner plays well with existing component and DOM testing libraries, including React Testing Library and [`happy-dom`](https://github.com/capricorn86/happy-dom).\n\n## `happy-dom`\n\nFor writing headless tests for your frontend code and components, we recommend [`happy-dom`](https://github.com/capricorn86/happy-dom). Happy DOM implements a complete set of HTML and DOM APIs in plain JavaScript, making it possible to simulate a browser environment with high fidelity.\n\nTo get started install the `@happy-dom/global-registrator` package as a dev dependency.\n\n```bash\n$ bun add -d @happy-dom/global-registrator\n```\n\nWe'll be using Bun's _preload_ functionality to register the `happy-dom` globals before running our tests. This step will make browser APIs like `document` available in the global scope. Create a file called `happydom.ts` in the root of your project and add the following code:\n\n```ts\nimport { GlobalRegistrator } from \"@happy-dom/global-registrator\";\n\nGlobalRegistrator.register();\n```\n\nTo preload this file before `bun test`, open or create a `bunfig.toml` file and add the following lines.\n\n```toml\n[test]\npreload = \"./happydom.ts\"\n```\n\nThis will execute `happydom.ts` when you run `bun test`. Now you can write tests that use browser APIs like `document` and `window`.\n\n```ts#dom.test.ts\nimport {test, expect} from 'bun:test';\n\ntest('dom test', () => {\n  document.body.innerHTML = `<button>My button</button>`;\n  const button = document.querySelector('button');\n  expect(button?.innerText).toEqual('My button');\n});\n```\n\nDepending on your `tsconfig.json` setup, you may see a `\"Cannot find name 'document'\"` type error in the code above. To \"inject\" the types for `document` and other browser APIs, add the following [triple-slash directive](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html) to the top of any test file.\n\n```ts-diff#dom.test.ts\n+ /// <reference lib=\"dom\" />\n\n  import {test, expect} from 'bun:test';\n\n  test('dom test', () => {\n    document.body.innerHTML = `<button>My button</button>`;\n    const button = document.querySelector('button');\n    expect(button?.innerText).toEqual('My button');\n  });\n```\n\nLet's run this test with `bun test`:\n\n```bash\n$ bun test\nbun test v0.x.y\n\ndom.test.ts:\n\u2713 dom test [0.82ms]\n\n 1 pass\n 0 fail\n 1 expect() calls\nRan 1 tests across 1 files. 1 total [125.00ms]\n```\n\n<!-- ## React Testing Library\n\nOnce you've set up `happy-dom` as described above, you can use it with React Testing Library. To get started, install the `@testing-library/react` package as a dev dependency.\n\n```bash\n$ bun add -d @testing-library/react\n``` -->\n"}
{"filename": "docs/test/hot.md", "content": "To automatically re-run tests when files change, use the `--watch` flag:\n\n```sh\n$ bun test --watch\n```\n\nBun will watch for changes to any files imported in a test file, and re-run tests when a change is detected.\n\nIt's fast.\n\n{% raw %}\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">&quot;bun test --watch url&quot; in a large folder with multiple files that start with &quot;url&quot; <a href=\"https://t.co/aZV9BP4eFu\">pic.twitter.com/aZV9BP4eFu</a></p>&mdash; Jarred Sumner (@jarredsumner) <a href=\"https://twitter.com/jarredsumner/status/1640890850535436288?ref_src=twsrc%5Etfw\">March 29, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n{% /raw %}\n"}
{"filename": "docs/test/lifecycle.md", "content": "The test runner supports the following lifecycle hooks. This is useful for loading test fixtures, mocking data, and configuring the test environment.\n\n| Hook         | Description                 |\n| ------------ | --------------------------- |\n| `beforeAll`  | Runs once before all tests. |\n| `beforeEach` | Runs before each test.      |\n| `afterEach`  | Runs after each test.       |\n| `afterAll`   | Runs once after all tests.  |\n\nPerform per-test setup and teardown logic with `beforeEach` and `afterEach`.\n\n```ts\nimport { beforeEach, afterEach } from \"bun:test\";\n\nbeforeEach(() => {\n  console.log(\"running test.\");\n});\n\nafterEach(() => {\n  console.log(\"done with test.\");\n});\n\n// tests...\n```\n\nPerform per-scope setup and teardown logic with `beforeAll` and `afterAll`. The _scope_ is determined by where the hook is defined.\n\nTo scope the hooks to a particular `describe` block:\n\n```ts\nimport { describe, beforeAll } from \"bun:test\";\n\ndescribe(\"test group\", () => {\n  beforeAll(() => {\n    // setup\n  });\n\n  // tests...\n});\n```\n\nTo scope the hooks to a test file:\n\n```ts\nimport { describe, beforeAll } from \"bun:test\";\n\ndescribe(\"test group\", () => {\n  beforeAll(() => {\n    // setup\n  });\n\n  // tests...\n});\n```\n\nTo scope the hooks to an entire multi-file test run, define the hooks in a separate file.\n\n```ts#setup.ts\nimport { beforeAll, afterAll } from \"bun:test\";\n\nbeforeAll(() => {\n  // global setup\n});\n\nafterAll(() => {\n  // global teardown\n});\n```\n\nThen use `--preload` to run the setup script before any test files.\n\n```ts\n$ bun test --preload ./setup.ts\n```\n\nTo avoid typing `--preload` every time you run tests, it can be added to your `bunfig.toml`:\n\n```toml\n[test]\npreload = [\"./setup.ts\"]\n```\n"}
{"filename": "docs/test/mocks.md", "content": "Create mocks with the `mock` function.\n\n```ts\nimport { test, expect, mock } from \"bun:test\";\nconst random = mock(() => Math.random());\n\ntest(\"random\", async () => {\n  const val = random();\n  expect(val).toBeGreaterThan(0);\n  expect(random).toHaveBeenCalled();\n  expect(random).toHaveBeenCalledTimes(1);\n});\n```\n\nThe result of `mock()` is a new function that's been decorated with some additional properties.\n\n```ts\nimport { mock } from \"bun:test\";\nconst random = mock((multiplier: number) => multiplier * Math.random());\n\nrandom(2);\nrandom(10);\n\nrandom.mock.calls;\n// [[ 2 ], [ 10 ]]\n\nrandom.mock.results;\n//  [\n//    { type: \"return\", value: 0.6533907460954099 },\n//    { type: \"return\", value: 0.6452713933037312 }\n//  ]\n```\n\n## `.spyOn()`\n\nIt's possible to track calls to a function without replacing it with a mock. Use `spyOn()` to create a spy; these spies can be passed to `.toHaveBeenCalled()` and `.toHaveBeenCalledTimes()`.\n\n```ts\nimport { test, expect, spyOn } from \"bun:test\";\n\nconst ringo = {\n  name: \"Ringo\",\n  sayHi() {\n    console.log(`Hello I'm ${this.name}`);\n  },\n};\n\nconst spy = spyOn(ringo, \"sayHi\");\n\ntest(\"spyon\", () => {\n  expect(spy).toHaveBeenCalledTimes(0);\n  ringo.sayHi();\n  expect(spy).toHaveBeenCalledTimes(1);\n});\n```\n"}
{"filename": "docs/test/snapshots.md", "content": "Snapshot tests are written using the `.toMatchSnapshot()` matcher:\n\n```ts\nimport { test, expect } from \"bun:test\";\n\ntest(\"snap\", () => {\n  expect(\"foo\").toMatchSnapshot();\n});\n```\n\nThe first time this test is run, the argument to `expect` will be serialized and written to a special snapshot file in a `__snapshots__` directory alongside the test file. On future runs, the argument is compared against the snapshot on disk. Snapshots can be re-generated with the following command:\n\n```bash\n$ bun test --update-snapshots\n```\n"}
{"filename": "docs/test/time.md", "content": "`bun:test` lets you change what time it is in your tests. This was introduced in Bun v0.6.13.\n\nThis works with any of the following:\n\n- `Date.now`\n- `new Date()`\n- `new Intl.DateTimeFormat().format()`\n\nTimers are not impacted yet, but may be in a future release of Bun.\n\n## `setSystemTime`\n\nTo change the system time, use `setSystemTime`:\n\n```ts\nimport { setSystemTime, beforeAll, test, expect } from \"bun:test\";\n\nbeforeAll(() => {\n  setSystemTime(new Date(\"2020-01-01T00:00:00.000Z\"));\n});\n\ntest(\"it is 2020\", () => {\n  expect(new Date().getFullYear()).toBe(2020);\n});\n```\n\nTo support existing tests that use Jest's `useFakeTimers` and `useRealTimers`, you can use `useFakeTimers` and `useRealTimers`:\n\n```ts\ntest(\"just like in jest\", () => {\n  jest.useFakeTimers();\n  jest.setSystemTime(new Date(\"2020-01-01T00:00:00.000Z\"));\n  expect(new Date().getFullYear()).toBe(2020);\n  jest.useRealTimers();\n  expect(new Date().getFullYear()).toBeGreaterThan(2020);\n});\n\ntest(\"unlike in jest\", () => {\n  const OriginalDate = Date;\n  jest.useFakeTimers();\n  if (typeof Bun === \"undefined\") {\n    // In Jest, the Date constructor changes\n    // That can cause all sorts of bugs because suddenly Date !== Date before the test.\n    expect(Date).not.toBe(OriginalDate);\n    expect(Date.now).not.toBe(OriginalDate.now);\n  } else {\n    // In bun:test, Date constructor does not change when you useFakeTimers\n    expect(Date).toBe(OriginalDate);\n    expect(Date.now).toBe(OriginalDate.now);\n  }\n});\n```\n\n{% callout %}\n**Timers** \u2014 Note that we have not implemented builtin support for mocking timers yet, but this is on the roadmap.\n{% /callout %}\n\n### Reset the system time\n\nTo reset the system time, pass no arguments to `setSystemTime`:\n\n```ts\nimport { setSystemTime, beforeAll } from \"bun:test\";\n\ntest(\"it was 2020, for a moment.\", () => {\n  // Set it to something!\n  setSystemTime(new Date(\"2020-01-01T00:00:00.000Z\"));\n  expect(new Date().getFullYear()).toBe(2020);\n\n  // reset it!\n  setSystemTime();\n\n  expect(new Date().getFullYear()).toBeGreaterThan(2020);\n});\n```\n\n## Set the time zone\n\nTo change the time zone, either pass the `$TZ` environment variable to `bun test`.\n\n```sh\nTZ=America/Los_Angeles bun test\n```\n\nOr set `process.env.TZ` at runtime:\n\n```ts\nimport { test, expect } from \"bun:test\";\n\ntest(\"Welcome to California!\", () => {\n  process.env.TZ = \"America/Los_Angeles\";\n  expect(new Date().getTimezoneOffset()).toBe(420);\n  expect(new Intl.DateTimeFormat().resolvedOptions().timeZone).toBe(\n    \"America/Los_Angeles\",\n  );\n});\n\ntest(\"Welcome to New York!\", () => {\n  // Unlike in Jest, you can set the timezone multiple times at runtime and it will work.\n  process.env.TZ = \"America/New_York\";\n  expect(new Date().getTimezoneOffset()).toBe(240);\n  expect(new Intl.DateTimeFormat().resolvedOptions().timeZone).toBe(\n    \"America/New_York\",\n  );\n});\n```\n"}
{"filename": "docs/test/writing.md", "content": "Define tests with a Jest-like API imported from the built-in `bun:test` module. Long term, Bun aims for complete Jest compatibility; at the moment, a [limited set](#matchers) of `expect` matchers are supported.\n\n## Basic usage\n\nTo define a simple test:\n\n```ts#math.test.ts\nimport { expect, test } from \"bun:test\";\n\ntest(\"2 + 2\", () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n{% details summary=\"Jest-style globals\" %}\nAs in Jest, you can use `describe`, `test`, `expect`, and other functions without importing them. Unlike Jest, they are not injected into the global scope. Instead, the Bun transpiler will automatically inject an import from `bun:test` internally.\n\n```ts\ntypeof globalThis.describe; // \"undefined\"\ntypeof describe; // \"function\"\n```\n\nThis transpiler integration only occurs during `bun test`, and only for test files & preloaded scripts. In practice there's no significant difference to the end user.\n{% /details %}\n\nTests can be grouped into suites with `describe`.\n\n```ts#math.test.ts\nimport { expect, test, describe } from \"bun:test\";\n\ndescribe(\"arithmetic\", () => {\n  test(\"2 + 2\", () => {\n    expect(2 + 2).toBe(4);\n  });\n\n  test(\"2 * 2\", () => {\n    expect(2 * 2).toBe(4);\n  });\n});\n```\n\nTests can be `async`.\n\n```ts\nimport { expect, test } from \"bun:test\";\n\ntest(\"2 * 2\", async () => {\n  const result = await Promise.resolve(2 * 2);\n  expect(result).toEqual(4);\n});\n```\n\nAlternatively, use the `done` callback to signal completion. If you include the `done` callback as a parameter in your test definition, you _must_ call it or the test will hang.\n\n```ts\nimport { expect, test } from \"bun:test\";\n\ntest(\"2 * 2\", done => {\n  Promise.resolve(2 * 2).then(result => {\n    expect(result).toEqual(4);\n    done();\n  });\n});\n```\n\n## Timeouts\n\nOptionally specify a per-test timeout in milliseconds by passing a number as the third argument to `test`.\n\n```ts\nimport { test } from \"bun:test\";\n\ntest(\"wat\", async () => {\n  const data = await slowOperation();\n  expect(data).toBe(42);\n}, 500); // test must run in <500ms\n```\n\n## `test.skip`\n\nSkip individual tests with `test.skip`. These tests will not be run.\n\n```ts\nimport { expect, test } from \"bun:test\";\n\ntest.skip(\"wat\", () => {\n  // TODO: fix this\n  expect(0.1 + 0.2).toEqual(0.3);\n});\n```\n\n## `test.todo`\n\nMark a test as a todo with `test.todo`. These tests _will_ be run, and the test runner will expect them to fail. If they pass, you will be prompted to mark it as a regular test.\n\n```ts\nimport { expect, test } from \"bun:test\";\n\ntest.todo(\"fix this\", () => {\n  myTestFunction();\n});\n```\n\nTo exclusively run tests marked as _todo_, use `bun test --todo`.\n\n```sh\n$ bun test --todo\n```\n\n## `test.only`\n\nTo run a particular test or suite of tests use `test.only()` or `describe.only()`. Once declared, running `bun test --skip` will only execute tests/suites that have been marked with `.only()`.\n\n```ts\nimport { test, describe } from \"bun:test\";\n\ntest(\"test #1\", () => {\n  // does not run\n});\n\ntest.only(\"test #2\", () => {\n  // runs\n});\n\ndescribe.only(\"only\", () => {\n  test(\"test #3\", () => {\n    // runs\n  });\n});\n```\n\nThe following command will only execute tests #2 and #3.\n\n```sh\n$ bun test --only\n```\n\n## `test.if`\n\nTo run a test conditionally, use `test.if()`. The test will run if the condition is truthy. This is particularly useful for tests that should only run on specific architectures or operating systems.\n\n```ts\ntest.if(Math.random() > 0.5)(\"runs half the time\", () => {\n  // ...\n});\n```\n\n```ts\ntest.if(Math.random() > 0.5)(\"runs half the time\", () => {\n  // ...\n});\n\nconst macOS = process.arch === \"darwin\";\ntest.if(macOS)(\"runs on macOS\", () => {\n  // runs if macOS\n});\n```\n\nTo instead skip a test based on some condition, use `test.skipIf()` or `describe.skipIf()`.\n\n```ts\nconst macOS = process.arch === \"darwin\";\n\ntest.skipIf(macOS)(\"runs on non-macOS\", () => {\n  // runs if *not* macOS\n});\n```\n\n## Matchers\n\nBun implements the following matchers. Full Jest compatibility is on the roadmap; track progress [here](https://github.com/oven-sh/bun/issues/1825).\n\n{% table %}\n\n---\n\n- \ud83d\udfe2\n- [`.not`](https://jestjs.io/docs/expect#not)\n\n---\n\n- \ud83d\udfe2\n- [`.toBe()`](https://jestjs.io/docs/expect#tobevalue)\n\n---\n\n- \ud83d\udfe2\n- [`.toEqual()`](https://jestjs.io/docs/expect#toequalvalue)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeNull()`](https://jestjs.io/docs/expect#tobenull)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeUndefined()`](https://jestjs.io/docs/expect#tobeundefined)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeNaN()`](https://jestjs.io/docs/expect#tobenan)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeDefined()`](https://jestjs.io/docs/expect#tobedefined)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeFalsy()`](https://jestjs.io/docs/expect#tobefalsy)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeTruthy()`](https://jestjs.io/docs/expect#tobetruthy)\n\n---\n\n- \ud83d\udfe2\n- [`.toContain()`](https://jestjs.io/docs/expect#tocontainitem)\n\n---\n\n- \ud83d\udfe2\n- [`.toStrictEqual()`](https://jestjs.io/docs/expect#tostrictequalvalue)\n\n---\n\n- \ud83d\udfe2\n- [`.toThrow()`](https://jestjs.io/docs/expect#tothrowerror)\n\n---\n\n- \ud83d\udfe2\n- [`.toHaveLength()`](https://jestjs.io/docs/expect#tohavelengthnumber)\n\n---\n\n- \ud83d\udfe2\n- [`.toHaveProperty()`](https://jestjs.io/docs/expect#tohavepropertykeypath-value)\n\n---\n\n- \ud83d\udd34\n- [`.extend`](https://jestjs.io/docs/expect#expectextendmatchers)\n\n---\n\n- \ud83d\udfe2\n- [`.anything()`](https://jestjs.io/docs/expect#expectanything)\n\n---\n\n- \ud83d\udfe2\n- [`.any()`](https://jestjs.io/docs/expect#expectanyconstructor)\n\n---\n\n- \ud83d\udd34\n- [`.arrayContaining()`](https://jestjs.io/docs/expect#expectarraycontainingarray)\n\n---\n\n- \ud83d\udd34\n- [`.assertions()`](https://jestjs.io/docs/expect#expectassertionsnumber)\n\n---\n\n- \ud83d\udd34\n- [`.closeTo()`](https://jestjs.io/docs/expect#expectclosetonumber-numdigits)\n\n---\n\n- \ud83d\udd34\n- [`.hasAssertions()`](https://jestjs.io/docs/expect#expecthasassertions)\n\n---\n\n- \ud83d\udd34\n- [`.objectContaining()`](https://jestjs.io/docs/expect#expectobjectcontainingobject)\n\n---\n\n- \ud83d\udfe2\n- [`.stringContaining()`](https://jestjs.io/docs/expect#expectstringcontainingstring)\n\n---\n\n- \ud83d\udfe2\n- [`.stringMatching()`](https://jestjs.io/docs/expect#expectstringmatchingstring--regexp)\n\n---\n\n- \ud83d\udd34\n- [`.addSnapshotSerializer()`](https://jestjs.io/docs/expect#expectaddsnapshotserializerserializer)\n\n---\n\n- \ud83d\udfe2\n- [`.resolves()`](https://jestjs.io/docs/expect#resolves) (since Bun v0.6.12+)\n\n---\n\n- \ud83d\udfe2\n- [`.rejects()`](https://jestjs.io/docs/expect#rejects) (since Bun v0.6.12+)\n\n---\n\n- \ud83d\udfe2\n- [`.toHaveBeenCalled()`](https://jestjs.io/docs/expect#tohavebeencalled)\n\n---\n\n- \ud83d\udfe2\n- [`.toHaveBeenCalledTimes()`](https://jestjs.io/docs/expect#tohavebeencalledtimesnumber)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveBeenCalledWith()`](https://jestjs.io/docs/expect#tohavebeencalledwitharg1-arg2-)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveBeenLastCalledWith()`](https://jestjs.io/docs/expect#tohavebeenlastcalledwitharg1-arg2-)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveBeenNthCalledWith()`](https://jestjs.io/docs/expect#tohavebeennthcalledwithnthcall-arg1-arg2-)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveReturned()`](https://jestjs.io/docs/expect#tohavereturned)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveReturnedTimes()`](https://jestjs.io/docs/expect#tohavereturnedtimesnumber)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveReturnedWith()`](https://jestjs.io/docs/expect#tohavereturnedwithvalue)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveLastReturnedWith()`](https://jestjs.io/docs/expect#tohavelastreturnedwithvalue)\n\n---\n\n- \ud83d\udd34\n- [`.toHaveNthReturnedWith()`](https://jestjs.io/docs/expect#tohaventhreturnedwithnthcall-value)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeCloseTo()`](https://jestjs.io/docs/expect#tobeclosetonumber-numdigits)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeGreaterThan()`](https://jestjs.io/docs/expect#tobegreaterthannumber--bigint)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeGreaterThanOrEqual()`](https://jestjs.io/docs/expect#tobegreaterthanorequalnumber--bigint)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeLessThan()`](https://jestjs.io/docs/expect#tobelessthannumber--bigint)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeLessThanOrEqual()`](https://jestjs.io/docs/expect#tobelessthanorequalnumber--bigint)\n\n---\n\n- \ud83d\udfe2\n- [`.toBeInstanceOf()`](https://jestjs.io/docs/expect#tobeinstanceofclass) (Bun v0.5.8+)\n\n---\n\n- \ud83d\udd34\n- [`.toContainEqual()`](https://jestjs.io/docs/expect#tocontainequalitem)\n\n---\n\n- \ud83d\udfe2\n- [`.toMatch()`](https://jestjs.io/docs/expect#tomatchregexp--string)\n\n---\n\n- \ud83d\udfe2\n- [`.toMatchObject()`](https://jestjs.io/docs/expect#tomatchobjectobject)\n\n---\n\n- \ud83d\udfe2\n- [`.toMatchSnapshot()`](https://jestjs.io/docs/expect#tomatchsnapshotpropertymatchers-hint) (Bun v0.5.8+)\n\n---\n\n- \ud83d\udd34\n- [`.toMatchInlineSnapshot()`](https://jestjs.io/docs/expect#tomatchinlinesnapshotpropertymatchers-inlinesnapshot)\n\n---\n\n- \ud83d\udd34\n- [`.toThrowErrorMatchingSnapshot()`](https://jestjs.io/docs/expect#tothrowerrormatchingsnapshothint)\n\n---\n\n- \ud83d\udd34\n- [`.toThrowErrorMatchingInlineSnapshot()`](https://jestjs.io/docs/expect#tothrowerrormatchinginlinesnapshotinlinesnapshot)\n\n{% /table %}\n"}
{"filename": "docs/troubleshooting.md", "content": "## Troubleshooting\n\n### Bun not running on an M1 (or Apple Silicon)\n\nIf you see a message like this\n\n> [1] 28447 killed bun create next ./test\n\nIt most likely means you\u2019re running Bun\u2019s x64 version on Apple Silicon. This happens if Bun is running via Rosetta. Rosetta is unable to emulate AVX2 instructions, which Bun indirectly uses.\n\nThe fix is to ensure you installed a version of Bun built for Apple Silicon.\n\n### error: Unexpected\n\nIf you see an error like this:\n\n![image](https://user-images.githubusercontent.com/709451/141210854-89434678-d21b-42f4-b65a-7df3b785f7b9.png)\n\nIt usually means the max number of open file descriptors is being explicitly set to a low number. By default, Bun requests the max number of file descriptors available (which on macOS, is something like 32,000). But, if you previously ran into ulimit issues with, e.g., Chokidar, someone on The Internet may have advised you to run `ulimit -n 8096`.\n\nThat advice unfortunately **lowers** the hard limit to `8096`. This can be a problem in large repositories or projects with lots of dependencies. Chokidar (and other watchers) don\u2019t seem to call `setrlimit`, which means they\u2019re reliant on the (much lower) soft limit.\n\nTo fix this issue:\n\n1. Remove any scripts that call `ulimit -n` and restart your shell.\n2. Try again, and if the error still occurs, try setting `ulimit -n` to an absurdly high number, such as `ulimit -n 2147483646`\n3. Try again, and if that still doesn\u2019t fix it, open an issue\n\n### Unzip is required\n\nUnzip is required to install Bun on Linux. You can use one of the following commands to install `unzip`:\n\n#### Debian / Ubuntu / Mint\n\n```sh\n$ sudo apt install unzip\n```\n\n#### RedHat / CentOS / Fedora\n\n```sh\n$ sudo dnf install unzip\n```\n\n#### Arch / Manjaro\n\n```sh\n$ sudo pacman -S unzip\n```\n\n#### OpenSUSE\n\n```sh\n$ sudo zypper install unzip\n```\n\n### bun install is stuck\n\nPlease run `bun install --verbose 2> logs.txt` and send them to me in Bun's discord. If you're on Linux, it would also be helpful if you run `sudo perf trace bun install --silent` and attach the logs.\n\n### Uninstalling\n\nBun's binary and install cache is located in `~/.bun` by default. To uninstall bun, delete this directory and edit your shell config (`.bashrc`, `.zshrc`, or similar) to remove `~/.bun/bin` from the `$PATH` variable.\n\n```sh\n$ rm -rf ~/.bun # make sure to remove ~/.bun/bin from $PATH\n```\n"}
{"filename": "docs/upgrading-webkit.md", "content": "Bun uses [a fork](https://github.com/oven-sh/WebKit) of WebKit with a small number of changes.\n\nIt's important to periodically update WebKit for many reasons:\n\n- Security\n- Performance\n- Compatibility\n- \u2026and many more.\n\nTo upgrade, first find the commit in **Bun's WebKit fork** (not Bun!) between when we last upgraded and now.\n\n```bash\n$ cd src/bun.js/WebKit # In the WebKit directory! not bun\n$ git checkout $COMMIT\n```\n\nThis is the main command to run:\n\n```bash\n$ git pull https://github.com/WebKit/WebKit.git main --no-rebase --allow-unrelated-histories -X theirs\n```\n\nThen, you will likely see some silly merge conflicts. Fix them and then run:\n\n```bash\n# You might have to run this multiple times.\n$ rm -rf WebKitBuild\n\n# Go to Bun's directory! Not WebKit.\ncd ../../../../\nmake jsc-build-mac-compile\n```\n\nMake sure that JSC's CLI is able to load successfully. This verifies that the build is working.\n\nYou know this worked when it printed help options. If it complains about symbols, crashes, or anything else that looks wrong, something is wrong.\n\n```bash\nsrc/bun.js/WebKit/WebKitBuild/Release/bin/jsc --help\n```\n\nThen, clear out our bindings and regenerate the C++<>Zig headers:\n\n```bash\nmake clean-bindings headers builtins\n```\n\nNow update Bun's bindings wherever there are compiler errors:\n\n```bash\n# It will take awhile if you don't pass -j here\nmake bindings -j10\n```\n\nThis is the hard part. It might involve digging through WebKit's commit history to figure out what changed and why. Fortunately, WebKit contributors write great commit messages.\n"}
